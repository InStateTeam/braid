{
  "openapi" : "3.0.1",
  "info" : {
    "title" : "",
    "description" : "",
    "contact" : { },
    "version" : "1.0.0"
  },
  "servers" : [ {
    "url" : "http://localhost:8080/api/rest"
  } ],
  "paths" : {
    "/network/nodes" : {
      "get" : {
        "tags" : [ "network" ],
        "description" : "",
        "operationId": "network_nodes",
        "parameters" : [ {
          "name" : "host-and-port",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "x500-name",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/io.bluebank.braid.corda.services.SimpleNodeInfo"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "the server failed to parse the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref": "#/components/schemas/InvocationError"
                }
              }
            }
          },
          "422" : {
            "description" : "the request could not be processed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref": "#/components/schemas/InvocationError"
                }
              }
            }
          }
        }
      }
    },
    "/network/nodes/self" : {
      "get" : {
        "tags" : [ "network" ],
        "description" : "",
        "operationId": "network_nodes_self",
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/io.bluebank.braid.corda.services.SimpleNodeInfo"
                }
              }
            }
          },
          "400" : {
            "description" : "the server failed to parse the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref": "#/components/schemas/InvocationError"
                }
              }
            }
          },
          "422" : {
            "description" : "the request could not be processed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref": "#/components/schemas/InvocationError"
                }
              }
            }
          }
        }
      }
    },
    "/network/notaries" : {
      "get" : {
        "tags" : [ "network" ],
        "description" : "",
        "operationId": "network_notaries",
        "parameters" : [ {
          "name" : "x500-name",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/net.corda.core.identity.Party"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "the server failed to parse the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref": "#/components/schemas/InvocationError"
                }
              }
            }
          },
          "422" : {
            "description" : "the request could not be processed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref": "#/components/schemas/InvocationError"
                }
              }
            }
          }
        }
      }
    },
    "/vault/vaultQuery" : {
      "get" : {
        "tags" : [ "vault" ],
        "description" : "",
        "operationId": "vault_vaultQuery",
        "parameters" : [ {
          "name" : "contract-state-type",
          "in" : "query",
          "schema" : {
            "type" : "string",
            "description" : "Java class name",
            "example" : "java.lang.Object"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/net.corda.core.node.services.Vault_Page_net_corda_core_contracts_ContractState"
                }
              }
            }
          },
          "400" : {
            "description" : "the server failed to parse the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref": "#/components/schemas/InvocationError"
                }
              }
            }
          },
          "422" : {
            "description" : "the request could not be processed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref": "#/components/schemas/InvocationError"
                }
              }
            }
          }
        }
      }
    },
    "/vault/vaultQueryBy" : {
      "post" : {
        "tags" : [ "vault" ],
        "description" : "",
        "operationId": "vault_vaultQueryBy",
        "parameters" : [ ],
        "requestBody" : {
          "description" : "vault",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/io.bluebank.braid.corda.services.vault.VaultQuery"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/net.corda.core.node.services.Vault_Page_net_corda_core_contracts_ContractState"
                }
              }
            }
          },
          "400" : {
            "description" : "the server failed to parse the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref": "#/components/schemas/InvocationError"
                }
              }
            }
          },
          "422" : {
            "description" : "the request could not be processed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref": "#/components/schemas/InvocationError"
                }
              }
            }
          }
        }
      }
    },
    "/cordapps" : {
      "get" : {
        "tags" : [ "cordapps" ],
        "description" : "",
        "operationId": "cordapps",
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "type" : "string"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "the server failed to parse the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref": "#/components/schemas/InvocationError"
                }
              }
            }
          },
          "422" : {
            "description" : "the request could not be processed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref": "#/components/schemas/InvocationError"
                }
              }
            }
          }
        }
      }
    },
    "/cordapps/{cordapp}/flows" : {
      "get" : {
        "tags" : [ "cordapps" ],
        "description" : "",
        "operationId": "cordapps_:cordapp_flows",
        "parameters" : [ {
          "name" : "cordapp",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "type" : "string"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "the server failed to parse the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref": "#/components/schemas/InvocationError"
                }
              }
            }
          },
          "422" : {
            "description" : "the request could not be processed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref": "#/components/schemas/InvocationError"
                }
              }
            }
          }
        }
      }
    },
    "/cordapps/corda-core/flows/net.corda.core.flows.ContractUpgradeFlow$Authorise" : {
      "post" : {
        "tags" : [ "cordapps" ],
        "description" : "",
        "operationId": "cordapps_corda_core_flows_net.corda.core.flows.ContractUpgradeFlow$Authorise",
        "parameters" : [ ],
        "requestBody" : {
          "description" : "payload",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/generated.net.corda.core.flows.ContractUpgradeFlow_AuthorisePayload"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "empty response"
          },
          "400" : {
            "description" : "the server failed to parse the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref": "#/components/schemas/InvocationError"
                }
              }
            }
          },
          "422" : {
            "description" : "the request could not be processed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref": "#/components/schemas/InvocationError"
                }
              }
            }
          }
        }
      }
    },
    "/cordapps/corda-core/flows/net.corda.core.flows.ContractUpgradeFlow$Deauthorise" : {
      "post" : {
        "tags" : [ "cordapps" ],
        "description" : "",
        "operationId": "cordapps_corda_core_flows_net.corda.core.flows.ContractUpgradeFlow$Deauthorise",
        "parameters" : [ ],
        "requestBody" : {
          "description" : "payload",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/generated.net.corda.core.flows.ContractUpgradeFlow_DeauthorisePayload"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "empty response"
          },
          "400" : {
            "description" : "the server failed to parse the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref": "#/components/schemas/InvocationError"
                }
              }
            }
          },
          "422" : {
            "description" : "the request could not be processed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref": "#/components/schemas/InvocationError"
                }
              }
            }
          }
        }
      }
    },
    "/cordapps/corda-finance-workflows/flows/net.corda.finance.flows.CashExitFlow" : {
      "post" : {
        "tags" : [ "cordapps" ],
        "description" : "",
        "operationId": "cordapps_corda_finance_workflows_flows_net.corda.finance.flows.CashExitFlow",
        "parameters" : [ ],
        "requestBody" : {
          "description" : "payload",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/generated.net.corda.finance.flows.CashExitFlowPayload"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/net.corda.finance.flows.AbstractCashFlow_Result"
                }
              }
            }
          },
          "400" : {
            "description" : "the server failed to parse the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref": "#/components/schemas/InvocationError"
                }
              }
            }
          },
          "422" : {
            "description" : "the request could not be processed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref": "#/components/schemas/InvocationError"
                }
              }
            }
          }
        }
      }
    },
    "/cordapps/corda-finance-workflows/flows/net.corda.finance.flows.CashIssueAndPaymentFlow" : {
      "post" : {
        "tags" : [ "cordapps" ],
        "description" : "",
        "operationId": "cordapps_corda_finance_workflows_flows_net.corda.finance.flows.CashIssueAndPaymentFlow",
        "parameters" : [ ],
        "requestBody" : {
          "description" : "payload",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/generated.net.corda.finance.flows.CashIssueAndPaymentFlowPayload"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/net.corda.finance.flows.AbstractCashFlow_Result"
                }
              }
            }
          },
          "400" : {
            "description" : "the server failed to parse the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref": "#/components/schemas/InvocationError"
                }
              }
            }
          },
          "422" : {
            "description" : "the request could not be processed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref": "#/components/schemas/InvocationError"
                }
              }
            }
          }
        }
      }
    },
    "/cordapps/corda-finance-workflows/flows/net.corda.finance.flows.CashIssueFlow" : {
      "post" : {
        "tags" : [ "cordapps" ],
        "description" : "",
        "operationId": "cordapps_corda_finance_workflows_flows_net.corda.finance.flows.CashIssueFlow",
        "parameters" : [ ],
        "requestBody" : {
          "description" : "payload",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/generated.net.corda.finance.flows.CashIssueFlowPayload"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/net.corda.finance.flows.AbstractCashFlow_Result"
                }
              }
            }
          },
          "400" : {
            "description" : "the server failed to parse the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref": "#/components/schemas/InvocationError"
                }
              }
            }
          },
          "422" : {
            "description" : "the request could not be processed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref": "#/components/schemas/InvocationError"
                }
              }
            }
          }
        }
      }
    },
    "/cordapps/corda-finance-workflows/flows/net.corda.finance.flows.CashPaymentFlow" : {
      "post" : {
        "tags" : [ "cordapps" ],
        "description" : "",
        "operationId": "cordapps_corda_finance_workflows_flows_net.corda.finance.flows.CashPaymentFlow",
        "parameters" : [ ],
        "requestBody" : {
          "description" : "payload",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/generated.net.corda.finance.flows.CashPaymentFlowPayload"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/net.corda.finance.flows.AbstractCashFlow_Result"
                }
              }
            }
          },
          "400" : {
            "description" : "the server failed to parse the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref": "#/components/schemas/InvocationError"
                }
              }
            }
          },
          "422" : {
            "description" : "the request could not be processed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref": "#/components/schemas/InvocationError"
                }
              }
            }
          }
        }
      }
    },
    "/cordapps/corda-finance-workflows/flows/net.corda.finance.internal.CashConfigDataFlow" : {
      "post" : {
        "tags" : [ "cordapps" ],
        "description" : "",
        "operationId": "cordapps_corda_finance_workflows_flows_net.corda.finance.internal.CashConfigDataFlow",
        "parameters" : [ ],
        "requestBody" : {
          "description" : "payload",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/generated.net.corda.finance.internal.CashConfigDataFlowPayload"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/net.corda.finance.internal.CashConfiguration"
                }
              }
            }
          },
          "400" : {
            "description" : "the server failed to parse the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref": "#/components/schemas/InvocationError"
                }
              }
            }
          },
          "422": {
            "description": "the request could not be processed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvocationError"
                }
              }
            }
          }
        }
      }
    },
    "/cordapps/obligation/flows/net.corda.examples.obligation.flows.IssueObligation$Initiator": {
      "post": {
        "tags": [
          "cordapps"
        ],
        "description": "",
        "operationId": "cordapps_obligation_flows_net.corda.examples.obligation.flows.IssueObligation$Initiator",
        "parameters": [],
        "requestBody": {
          "description": "payload",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/generated.net.corda.examples.obligation.flows.IssueObligation_InitiatorPayload"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/net.corda.core.transactions.SignedTransaction"
                }
              }
            }
          },
          "400": {
            "description": "the server failed to parse the request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvocationError"
                }
              }
            }
          },
          "422": {
            "description": "the request could not be processed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvocationError"
                }
              }
            }
          }
        }
      }
    },
    "/cordapps/obligation/flows/net.corda.examples.obligation.flows.SettleObligation$Initiator": {
      "post": {
        "tags": [
          "cordapps"
        ],
        "description": "",
        "operationId": "cordapps_obligation_flows_net.corda.examples.obligation.flows.SettleObligation$Initiator",
        "parameters": [],
        "requestBody": {
          "description": "payload",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/generated.net.corda.examples.obligation.flows.SettleObligation_InitiatorPayload"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/net.corda.core.transactions.SignedTransaction"
                }
              }
            }
          },
          "400": {
            "description": "the server failed to parse the request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvocationError"
                }
              }
            }
          },
          "422": {
            "description": "the request could not be processed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvocationError"
                }
              }
            }
          }
        }
      }
    },
    "/cordapps/obligation/flows/net.corda.examples.obligation.flows.TransferObligation$Initiator": {
      "post": {
        "tags": [
          "cordapps"
        ],
        "description": "",
        "operationId": "cordapps_obligation_flows_net.corda.examples.obligation.flows.TransferObligation$Initiator",
        "parameters": [],
        "requestBody": {
          "description": "payload",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/generated.net.corda.examples.obligation.flows.TransferObligation_InitiatorPayload"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/net.corda.core.transactions.SignedTransaction"
                }
              }
            }
          },
          "400": {
            "description": "the server failed to parse the request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvocationError"
                }
              }
            }
          },
          "422" : {
            "description" : "the request could not be processed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref": "#/components/schemas/InvocationError"
                }
              }
            }
          }
        }
      }
    }
  },
  "components" : {
    "schemas" : {
      "InvocationError": {
        "required" : [ "message", "type" ],
        "type" : "object",
        "properties" : {
          "message" : {
            "type" : "string",
            "description" : "the error message"
          },
          "type" : {
            "type" : "string",
            "description" : "the type of error"
          }
        }
      },
      "io.bluebank.braid.corda.services.SimpleNodeInfo" : {
        "required" : [ "addresses", "legalIdentities" ],
        "type" : "object",
        "properties" : {
          "addresses" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/net.corda.core.utilities.NetworkHostAndPort"
            }
          },
          "legalIdentities" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/net.corda.core.identity.Party"
            }
          }
        }
      },
      "net.corda.core.identity.AbstractParty" : {
        "required" : [ "owningKey" ],
        "type" : "object",
        "properties" : {
          "owningKey" : {
            "type" : "string",
            "description" : "Base 58 Encoded Public Key",
            "example" : "GfHq2tTVk9z4eXgyUuofmR16H6j7srXt8BCyidKdrZL5JEwFqHgDSuiinbTE"
          }
        }
      },
      "net.corda.core.identity.Party" : {
        "required" : [ "name", "owningKey" ],
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string",
            "description" : "CordaX500Name encoded Party",
            "example" : "O=Bank A, L=London, C=GB"
          },
          "owningKey" : {
            "type" : "string",
            "description" : "Base 58 Encoded Public Key",
            "example" : "GfHq2tTVk9z4eXgyUuofmR16H6j7srXt8BCyidKdrZL5JEwFqHgDSuiinbTE"
          }
        }
      },
      "net.corda.core.utilities.NetworkHostAndPort" : {
        "required" : [ "host", "port" ],
        "type" : "object",
        "properties" : {
          "host" : {
            "type" : "string"
          },
          "port" : {
            "type" : "integer",
            "format" : "int32"
          }
        }
      },
      "io.bluebank.braid.corda.serialisation.mixin.ContractStateMixin" : {
        "type" : "object"
      },
      "net.corda.core.contracts.AttachmentConstraint" : {
        "type" : "object"
      },
      "net.corda.core.contracts.ContractState" : {
        "type" : "object"
      },
      "net.corda.core.contracts.StateAndRef_net_corda_core_contracts_ContractState" : {
        "type" : "object",
        "properties" : {
          "state" : {
            "$ref" : "#/components/schemas/net.corda.core.contracts.TransactionState_net_corda_core_contracts_ContractState"
          },
          "ref" : {
            "$ref" : "#/components/schemas/net.corda.core.contracts.StateRef"
          }
        }
      },
      "net.corda.core.contracts.StateRef" : {
        "required" : [ "index", "txhash" ],
        "type" : "object",
        "properties" : {
          "txhash" : {
            "type" : "string",
            "description" : "Base 58 Encoded Secure Hash",
            "example" : "GfHq2tTVk9z4eXgyUuofmR16H6j7srXt8BCyidKdrZL5JEwFqHgDSuiinbTE"
          },
          "index" : {
            "type" : "integer",
            "format" : "int32"
          }
        }
      },
      "net.corda.core.contracts.TransactionState_net_corda_core_contracts_ContractState" : {
        "required" : [ "contract" ],
        "type" : "object",
        "properties" : {
          "data" : {
            "$ref" : "#/components/schemas/net.corda.core.contracts.ContractState"
          },
          "contract" : {
            "type" : "string"
          },
          "notary" : {
            "$ref" : "#/components/schemas/net.corda.core.identity.Party"
          },
          "encumbrance" : {
            "type" : "integer",
            "format" : "int32"
          },
          "constraint" : {
            "$ref" : "#/components/schemas/net.corda.core.contracts.AttachmentConstraint"
          }
        }
      },
      "net.corda.core.node.services.Vault_ConstraintInfo" : {
        "type" : "object",
        "properties" : {
          "constraint" : {
            "$ref" : "#/components/schemas/net.corda.core.contracts.AttachmentConstraint"
          }
        }
      },
      "net.corda.core.node.services.Vault_Page_net_corda_core_contracts_ContractState" : {
        "required" : [ "otherResults", "stateTypes", "states", "statesMetadata", "totalStatesAvailable" ],
        "type" : "object",
        "properties" : {
          "states" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/net.corda.core.contracts.StateAndRef_net_corda_core_contracts_ContractState"
            }
          },
          "statesMetadata" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/net.corda.core.node.services.Vault_StateMetadata"
            }
          },
          "totalStatesAvailable" : {
            "type" : "integer",
            "format" : "int64"
          },
          "stateTypes" : {
            "type" : "string",
            "enum" : [ "UNCONSUMED", "CONSUMED", "ALL" ]
          },
          "otherResults" : {
            "type" : "array",
            "items" : {
              "type" : "object"
            }
          }
        }
      },
      "net.corda.core.node.services.Vault_StateMetadata" : {
        "required" : [ "contractStateClassName", "recordedTime", "status" ],
        "type" : "object",
        "properties" : {
          "ref" : {
            "$ref" : "#/components/schemas/net.corda.core.contracts.StateRef"
          },
          "contractStateClassName" : {
            "type" : "string"
          },
          "recordedTime" : {
            "type" : "string",
            "description" : "JSR310 encoded time representation of Instant"
          },
          "consumedTime" : {
            "type" : "string",
            "description" : "JSR310 encoded time representation of Instant"
          },
          "status" : {
            "type" : "string",
            "enum" : [ "UNCONSUMED", "CONSUMED", "ALL" ]
          },
          "notary" : {
            "$ref" : "#/components/schemas/net.corda.core.identity.AbstractParty"
          },
          "lockId" : {
            "type" : "string"
          },
          "lockUpdateTime" : {
            "type" : "string",
            "description" : "JSR310 encoded time representation of Instant"
          },
          "relevancyStatus" : {
            "type" : "string",
            "enum" : [ "RELEVANT", "NOT_RELEVANT", "ALL" ]
          },
          "constraintInfo" : {
            "$ref" : "#/components/schemas/net.corda.core.node.services.Vault_ConstraintInfo"
          }
        }
      },
      "io.bluebank.braid.corda.serialisation.mixin.PageSpecificationMixin" : {
        "type" : "object"
      },
      "io.bluebank.braid.corda.services.vault.VaultQuery" : {
        "required" : [ "contractStateType" ],
        "type" : "object",
        "properties" : {
          "criteria" : {
            "$ref" : "#/components/schemas/net.corda.core.node.services.vault.QueryCriteria"
          },
          "paging" : {
            "$ref" : "#/components/schemas/net.corda.core.node.services.vault.PageSpecification"
          },
          "sorting" : {
            "$ref" : "#/components/schemas/net.corda.core.node.services.vault.Sort"
          },
          "contractStateType" : {
            "type" : "string",
            "description" : "Java class name",
            "example" : "java.lang.Object"
          }
        }
      },
      "net.corda.core.node.services.vault.BaseSort" : {
        "type" : "object"
      },
      "net.corda.core.node.services.vault.ColumnPredicate" : {
        "type" : "object",
        "discriminator" : {
          "propertyName" : "@class",
          "mapping" : {
            ".ColumnPredicate$AggregateFunction" : "#/components/schemas/net.corda.core.node.services.vault.ColumnPredicate_AggregateFunction",
            ".ColumnPredicate$Between" : "#/components/schemas/net.corda.core.node.services.vault.ColumnPredicate_Between",
            ".ColumnPredicate$BinaryComparison" : "#/components/schemas/net.corda.core.node.services.vault.ColumnPredicate_BinaryComparison",
            ".ColumnPredicate$CollectionExpression" : "#/components/schemas/net.corda.core.node.services.vault.ColumnPredicate_CollectionExpression",
            ".ColumnPredicate$EqualityComparison" : "#/components/schemas/net.corda.core.node.services.vault.ColumnPredicate_EqualityComparison",
            ".ColumnPredicate$NullExpression" : "#/components/schemas/net.corda.core.node.services.vault.ColumnPredicate_NullExpression",
            ".ColumnPredicate$Likeness" : "#/components/schemas/net.corda.core.node.services.vault.ColumnPredicate_Likeness"
          }
        }
      },
      "net.corda.core.node.services.vault.ColumnPredicate_AggregateFunction" : {
        "required" : [ "type" ],
        "type" : "object",
        "allOf" : [ {
          "$ref" : "#/components/schemas/net.corda.core.node.services.vault.ColumnPredicate_Instant"
        }, {
          "type" : "object",
          "properties" : {
            "type" : {
              "type" : "string",
              "enum" : [ "COUNT", "AVG", "MIN", "MAX", "SUM" ]
            }
          }
        }, {
          "$ref" : "#/components/schemas/net.corda.core.node.services.vault.ColumnPredicate_Object"
        }, {
          "$ref" : "#/components/schemas/net.corda.core.node.services.vault.ColumnPredicate_Long"
        } ]
      },
      "net.corda.core.node.services.vault.ColumnPredicate_Between" : {
        "required" : [ "rightFromLiteral", "rightToLiteral" ],
        "type" : "object",
        "allOf" : [ {
          "$ref" : "#/components/schemas/net.corda.core.node.services.vault.ColumnPredicate"
        }, {
          "type" : "object",
          "properties" : {
            "rightToLiteral" : {
              "type" : "object"
            }
          }
        }, {
          "$ref" : "#/components/schemas/net.corda.core.node.services.vault.ColumnPredicate_Instant"
        }, {
          "$ref" : "#/components/schemas/net.corda.core.node.services.vault.ColumnPredicate_Object"
        }, {
          "$ref" : "#/components/schemas/net.corda.core.node.services.vault.ColumnPredicate_Long"
        } ]
      },
      "net.corda.core.node.services.vault.ColumnPredicate_BinaryComparison" : {
        "required" : [ "operator", "rightLiteral" ],
        "type" : "object",
        "allOf" : [ {
          "$ref" : "#/components/schemas/net.corda.core.node.services.vault.ColumnPredicate"
        }, {
          "type" : "object",
          "properties" : {
            "operator" : {
              "type" : "string",
              "enum" : [ "LESS_THAN", "LESS_THAN_OR_EQUAL", "GREATER_THAN", "GREATER_THAN_OR_EQUAL" ]
            },
            "rightLiteral" : {
              "type" : "object"
            }
          }
        }, {
          "$ref" : "#/components/schemas/net.corda.core.node.services.vault.ColumnPredicate_Instant"
        }, {
          "$ref" : "#/components/schemas/net.corda.core.node.services.vault.ColumnPredicate_Object"
        }, {
          "$ref" : "#/components/schemas/net.corda.core.node.services.vault.ColumnPredicate_Long"
        } ]
      },
      "net.corda.core.node.services.vault.ColumnPredicate_CollectionExpression" : {
        "required" : [ "operator", "rightLiteral" ],
        "type" : "object",
        "allOf" : [ {
          "$ref" : "#/components/schemas/net.corda.core.node.services.vault.ColumnPredicate"
        }, {
          "type" : "object",
          "properties" : {
            "operator" : {
              "type" : "string",
              "enum" : [ "IN", "NOT_IN", "IN_IGNORE_CASE", "NOT_IN_IGNORE_CASE" ]
            },
            "rightLiteral" : {
              "type" : "array",
              "items" : {
                "type" : "object"
              }
            }
          }
        }, {
          "$ref" : "#/components/schemas/net.corda.core.node.services.vault.ColumnPredicate_Instant"
        }, {
          "$ref" : "#/components/schemas/net.corda.core.node.services.vault.ColumnPredicate_Object"
        }, {
          "$ref" : "#/components/schemas/net.corda.core.node.services.vault.ColumnPredicate_Long"
        } ]
      },
      "net.corda.core.node.services.vault.ColumnPredicate_EqualityComparison" : {
        "required" : [ "operator", "rightLiteral" ],
        "type" : "object",
        "allOf" : [ {
          "$ref" : "#/components/schemas/net.corda.core.node.services.vault.ColumnPredicate"
        }, {
          "type" : "object",
          "properties" : {
            "operator" : {
              "type" : "string",
              "enum" : [ "EQUAL", "NOT_EQUAL", "EQUAL_IGNORE_CASE", "NOT_EQUAL_IGNORE_CASE" ]
            },
            "rightLiteral" : {
              "type" : "object"
            }
          }
        }, {
          "$ref" : "#/components/schemas/net.corda.core.node.services.vault.ColumnPredicate_Instant"
        }, {
          "$ref" : "#/components/schemas/net.corda.core.node.services.vault.ColumnPredicate_Object"
        }, {
          "$ref" : "#/components/schemas/net.corda.core.node.services.vault.ColumnPredicate_Long"
        } ]
      },
      "net.corda.core.node.services.vault.ColumnPredicate_Instant" : {
        "type" : "object",
        "discriminator" : {
          "propertyName" : "@class",
          "mapping" : {
            ".ColumnPredicate$AggregateFunction" : "#/components/schemas/net.corda.core.node.services.vault.ColumnPredicate_AggregateFunction",
            ".ColumnPredicate$Between" : "#/components/schemas/net.corda.core.node.services.vault.ColumnPredicate_Between",
            ".ColumnPredicate$BinaryComparison" : "#/components/schemas/net.corda.core.node.services.vault.ColumnPredicate_BinaryComparison",
            ".ColumnPredicate$CollectionExpression" : "#/components/schemas/net.corda.core.node.services.vault.ColumnPredicate_CollectionExpression",
            ".ColumnPredicate$EqualityComparison" : "#/components/schemas/net.corda.core.node.services.vault.ColumnPredicate_EqualityComparison",
            ".ColumnPredicate$NullExpression" : "#/components/schemas/net.corda.core.node.services.vault.ColumnPredicate_NullExpression",
            ".ColumnPredicate$Likeness" : "#/components/schemas/net.corda.core.node.services.vault.ColumnPredicate_Likeness"
          }
        }
      },
      "net.corda.core.node.services.vault.ColumnPredicate_Likeness" : {
        "required" : [ "operator", "rightLiteral" ],
        "type" : "object",
        "allOf" : [ {
          "$ref" : "#/components/schemas/net.corda.core.node.services.vault.ColumnPredicate"
        }, {
          "type" : "object",
          "properties" : {
            "operator" : {
              "type" : "string",
              "enum" : [ "LIKE", "NOT_LIKE", "LIKE_IGNORE_CASE", "NOT_LIKE_IGNORE_CASE" ]
            },
            "rightLiteral" : {
              "type" : "string"
            }
          }
        }, {
          "$ref" : "#/components/schemas/net.corda.core.node.services.vault.ColumnPredicate_Instant"
        }, {
          "$ref" : "#/components/schemas/net.corda.core.node.services.vault.ColumnPredicate_Object"
        }, {
          "$ref" : "#/components/schemas/net.corda.core.node.services.vault.ColumnPredicate_Long"
        } ]
      },
      "net.corda.core.node.services.vault.ColumnPredicate_Long" : {
        "type" : "object",
        "discriminator" : {
          "propertyName" : "@class",
          "mapping" : {
            ".ColumnPredicate$AggregateFunction" : "#/components/schemas/net.corda.core.node.services.vault.ColumnPredicate_AggregateFunction",
            ".ColumnPredicate$Between" : "#/components/schemas/net.corda.core.node.services.vault.ColumnPredicate_Between",
            ".ColumnPredicate$BinaryComparison" : "#/components/schemas/net.corda.core.node.services.vault.ColumnPredicate_BinaryComparison",
            ".ColumnPredicate$CollectionExpression" : "#/components/schemas/net.corda.core.node.services.vault.ColumnPredicate_CollectionExpression",
            ".ColumnPredicate$EqualityComparison" : "#/components/schemas/net.corda.core.node.services.vault.ColumnPredicate_EqualityComparison",
            ".ColumnPredicate$NullExpression" : "#/components/schemas/net.corda.core.node.services.vault.ColumnPredicate_NullExpression",
            ".ColumnPredicate$Likeness" : "#/components/schemas/net.corda.core.node.services.vault.ColumnPredicate_Likeness"
          }
        }
      },
      "net.corda.core.node.services.vault.ColumnPredicate_NullExpression" : {
        "required" : [ "operator" ],
        "type" : "object",
        "allOf" : [ {
          "$ref" : "#/components/schemas/net.corda.core.node.services.vault.ColumnPredicate"
        }, {
          "type" : "object",
          "properties" : {
            "operator" : {
              "type" : "string",
              "enum" : [ "IS_NULL", "NOT_NULL" ]
            }
          }
        }, {
          "$ref" : "#/components/schemas/net.corda.core.node.services.vault.ColumnPredicate_Instant"
        }, {
          "$ref" : "#/components/schemas/net.corda.core.node.services.vault.ColumnPredicate_Object"
        }, {
          "$ref" : "#/components/schemas/net.corda.core.node.services.vault.ColumnPredicate_Long"
        } ]
      },
      "net.corda.core.node.services.vault.ColumnPredicate_Object" : {
        "type" : "object",
        "discriminator" : {
          "propertyName" : "@class",
          "mapping" : {
            ".ColumnPredicate$AggregateFunction" : "#/components/schemas/net.corda.core.node.services.vault.ColumnPredicate_AggregateFunction",
            ".ColumnPredicate$Between" : "#/components/schemas/net.corda.core.node.services.vault.ColumnPredicate_Between",
            ".ColumnPredicate$BinaryComparison" : "#/components/schemas/net.corda.core.node.services.vault.ColumnPredicate_BinaryComparison",
            ".ColumnPredicate$CollectionExpression" : "#/components/schemas/net.corda.core.node.services.vault.ColumnPredicate_CollectionExpression",
            ".ColumnPredicate$EqualityComparison" : "#/components/schemas/net.corda.core.node.services.vault.ColumnPredicate_EqualityComparison",
            ".ColumnPredicate$NullExpression" : "#/components/schemas/net.corda.core.node.services.vault.ColumnPredicate_NullExpression",
            ".ColumnPredicate$Likeness" : "#/components/schemas/net.corda.core.node.services.vault.ColumnPredicate_Likeness"
          }
        }
      },
      "net.corda.core.node.services.vault.Column_Object_Object" : {
        "required" : [ "declaringClass", "name" ],
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string"
          },
          "declaringClass" : {
            "type" : "string",
            "description" : "Java class name",
            "example" : "java.lang.Object"
          }
        }
      },
      "net.corda.core.node.services.vault.CriteriaExpression" : {
        "type" : "object",
        "discriminator" : {
          "propertyName" : "@class",
          "mapping" : {
            ".CriteriaExpression$AggregateFunctionExpression" : "#/components/schemas/net.corda.core.node.services.vault.CriteriaExpression_AggregateFunctionExpression",
            ".CriteriaExpression$BinaryLogical" : "#/components/schemas/net.corda.core.node.services.vault.CriteriaExpression_BinaryLogical",
            ".CriteriaExpression$ColumnPredicateExpression" : "#/components/schemas/net.corda.core.node.services.vault.CriteriaExpression_ColumnPredicateExpression",
            ".CriteriaExpression$Not" : "#/components/schemas/net.corda.core.node.services.vault.CriteriaExpression_Not"
          }
        }
      },
      "net.corda.core.node.services.vault.CriteriaExpression_AggregateFunctionExpression" : {
        "required" : [ "column", "predicate" ],
        "type" : "object",
        "allOf" : [ {
          "$ref" : "#/components/schemas/net.corda.core.node.services.vault.CriteriaExpression_net_corda_core_schemas_StatePersistable_Boolean"
        }, {
          "type" : "object",
          "properties" : {
            "column" : {
              "$ref" : "#/components/schemas/net.corda.core.node.services.vault.Column_Object_Object"
            },
            "predicate" : {
              "$ref" : "#/components/schemas/net.corda.core.node.services.vault.ColumnPredicate_Object"
            },
            "groupByColumns" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/net.corda.core.node.services.vault.Column_Object_Object"
              }
            },
            "orderBy" : {
              "type" : "string",
              "enum" : [ "ASC", "DESC" ]
            }
          }
        } ]
      },
      "net.corda.core.node.services.vault.CriteriaExpression_BinaryLogical" : {
        "required" : [ "left", "operator", "right" ],
        "type" : "object",
        "allOf" : [ {
          "$ref" : "#/components/schemas/net.corda.core.node.services.vault.CriteriaExpression_Object_Boolean"
        }, {
          "type" : "object",
          "properties" : {
            "left" : {
              "$ref" : "#/components/schemas/net.corda.core.node.services.vault.CriteriaExpression_Object_Boolean"
            },
            "right" : {
              "$ref" : "#/components/schemas/net.corda.core.node.services.vault.CriteriaExpression_Object_Boolean"
            },
            "operator" : {
              "type" : "string",
              "enum" : [ "AND", "OR" ]
            }
          }
        }, {
          "$ref" : "#/components/schemas/net.corda.core.node.services.vault.CriteriaExpression"
        }, {
          "$ref" : "#/components/schemas/net.corda.core.node.services.vault.CriteriaExpression_net_corda_core_schemas_StatePersistable_Boolean"
        } ]
      },
      "net.corda.core.node.services.vault.CriteriaExpression_ColumnPredicateExpression" : {
        "required" : [ "column", "predicate" ],
        "type" : "object",
        "allOf" : [ {
          "$ref" : "#/components/schemas/net.corda.core.node.services.vault.CriteriaExpression"
        }, {
          "type" : "object",
          "properties" : {
            "column" : {
              "{\n  \"openapi\" : \"3.0.1\",\n  \"info\" : {\n    \"title\" : \"\",\n    \"description\" : \"\",\n    \"contact\" : { },\n    \"version\" : \"1.0.0\"\n  },\n  \"servers\" : [ {\n    \"url\" : \"http://localhost:8080/api/rest\"\n  } ],\n  \"paths\" : {\n    \"/network/nodes\" : {\n      \"get\" : {\n        \"tags\" : [ \"network\" ],\n        \"description\" : \"\",\n        \"operationId\" : \"network_nodes\",\n        \"parameters\" : [ {\n          \"name\" : \"host-and-port\",\n          \"in\" : \"query\",\n          \"schema\" : {\n            \"type\" : \"string\"\n          }\n        }, {\n          \"name\" : \"x500-name\",\n          \"in\" : \"query\",\n          \"schema\" : {\n            \"type\" : \"string\"\n          }\n        } ],\n        \"responses\" : {\n          \"200\" : {\n            \"description\" : \"\",\n            \"content\" : {\n              \"application/json\" : {\n                \"schema\" : {\n                  \"type\" : \"array\",\n                  \"items\" : {\n                    \"$ref\" : \"#/components/schemas/io.bluebank.braid.corda.services.SimpleNodeInfo\"\n                  }\n                }\n              }\n            }\n          },\n          \"400\" : {\n            \"description\" : \"the server failed to parse the request\",\n            \"content\" : {\n              \"application/json\" : {\n                \"schema\" : {\n                  \"$ref\" : \"#/components/schemas/InvocationError\"\n                }\n              }\n            }\n          },\n          \"422\" : {\n            \"description\" : \"the request could not be processed\",\n            \"content\" : {\n              \"application/json\" : {\n                \"schema\" : {\n                  \"$ref\" : \"#/components/schemas/InvocationError\"\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/network/nodes/self\" : {\n      \"get\" : {\n        \"tags\" : [ \"network\" ],\n        \"description\" : \"\",\n        \"operationId\" : \"network_nodes_self\",\n        \"parameters\" : [ ],\n        \"responses\" : {\n          \"200\" : {\n            \"description\" : \"\",\n            \"content\" : {\n              \"application/json\" : {\n                \"schema\" : {\n                  \"$ref\" : \"#/components/schemas/io.bluebank.braid.corda.services.SimpleNodeInfo\"\n                }\n              }\n            }\n          },\n          \"400\" : {\n            \"description\" : \"the server failed to parse the request\",\n            \"content\" : {\n              \"application/json\" : {\n                \"schema\" : {\n                  \"$ref\" : \"#/components/schemas/InvocationError\"\n                }\n              }\n            }\n          },\n          \"422\" : {\n            \"description\" : \"the request could not be processed\",\n            \"content\" : {\n              \"application/json\" : {\n                \"schema\" : {\n                  \"$ref\" : \"#/components/schemas/InvocationError\"\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/network/notaries\" : {\n      \"get\" : {\n        \"tags\" : [ \"network\" ],\n        \"description\" : \"\",\n        \"operationId\" : \"network_notaries\",\n        \"parameters\" : [ {\n          \"name\" : \"x500-name\",\n          \"in\" : \"query\",\n          \"schema\" : {\n            \"type\" : \"string\"\n          }\n        } ],\n        \"responses\" : {\n          \"200\" : {\n            \"description\" : \"\",\n            \"content\" : {\n              \"application/json\" : {\n                \"schema\" : {\n                  \"type\" : \"array\",\n                  \"items\" : {\n                    \"$ref\" : \"#/components/schemas/net.corda.core.identity.Party\"\n                  }\n                }\n              }\n            }\n          },\n          \"400\" : {\n            \"description\" : \"the server failed to parse the request\",\n            \"content\" : {\n              \"application/json\" : {\n                \"schema\" : {\n                  \"$ref\" : \"#/components/schemas/InvocationError\"\n                }\n              }\n            }\n          },\n          \"422\" : {\n            \"description\" : \"the request could not be processed\",\n            \"content\" : {\n              \"application/json\" : {\n                \"schema\" : {\n                  \"$ref\" : \"#/components/schemas/InvocationError\"\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/vault/vaultQuery\" : {\n      \"get\" : {\n        \"tags\" : [ \"vault\" ],\n        \"description\" : \"\",\n        \"operationId\" : \"vault_vaultQuery\",\n        \"parameters\" : [ {\n          \"name\" : \"contract-state-type\",\n          \"in\" : \"query\",\n          \"schema\" : {\n            \"type\" : \"string\",\n            \"description\" : \"Java class name\",\n            \"example\" : \"java.lang.Object\"\n          }\n        } ],\n        \"responses\" : {\n          \"200\" : {\n            \"description\" : \"\",\n            \"content\" : {\n              \"application/json\" : {\n                \"schema\" : {\n                  \"$ref\" : \"#/components/schemas/net.corda.core.node.services.Vault_Page_net_corda_core_contracts_ContractState\"\n                }\n              }\n            }\n          },\n          \"400\" : {\n            \"description\" : \"the server failed to parse the request\",\n            \"content\" : {\n              \"application/json\" : {\n                \"schema\" : {\n                  \"$ref\" : \"#/components/schemas/InvocationError\"\n                }\n              }\n            }\n          },\n          \"422\" : {\n            \"description\" : \"the request could not be processed\",\n            \"content\" : {\n              \"application/json\" : {\n                \"schema\" : {\n                  \"$ref\" : \"#/components/schemas/InvocationError\"\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/vault/vaultQueryBy\" : {\n      \"post\" : {\n        \"tags\" : [ \"vault\" ],\n        \"description\" : \"\",\n        \"operationId\" : \"vault_vaultQueryBy\",\n        \"parameters\" : [ ],\n        \"requestBody\" : {\n          \"description\" : \"vault\",\n          \"content\" : {\n            \"application/json\" : {\n              \"schema\" : {\n                \"$ref\" : \"#/components/schemas/io.bluebank.braid.corda.services.vault.VaultQuery\"\n              }\n            }\n          },\n          \"required\" : true\n        },\n        \"responses\" : {\n          \"200\" : {\n            \"description\" : \"\",\n            \"content\" : {\n              \"application/json\" : {\n                \"schema\" : {\n                  \"$ref\" : \"#/components/schemas/net.corda.core.node.services.Vault_Page_net_corda_core_contracts_ContractState\"\n                }\n              }\n            }\n          },\n          \"400\" : {\n            \"description\" : \"the server failed to parse the request\",\n            \"content\" : {\n              \"application/json\" : {\n                \"schema\" : {\n                  \"$ref\" : \"#/components/schemas/InvocationError\"\n                }\n              }\n            }\n          },\n          \"422\" : {\n            \"description\" : \"the request could not be processed\",\n            \"content\" : {\n              \"application/json\" : {\n                \"schema\" : {\n                  \"$ref\" : \"#/components/schemas/InvocationError\"\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/cordapps\" : {\n      \"get\" : {\n        \"tags\" : [ \"cordapps\" ],\n        \"description\" : \"\",\n        \"operationId\" : \"cordapps\",\n        \"parameters\" : [ ],\n        \"responses\" : {\n          \"200\" : {\n            \"description\" : \"\",\n            \"content\" : {\n              \"application/json\" : {\n                \"schema\" : {\n                  \"type\" : \"array\",\n                  \"items\" : {\n                    \"type\" : \"string\"\n                  }\n                }\n              }\n            }\n          },\n          \"400\" : {\n            \"description\" : \"the server failed to parse the request\",\n            \"content\" : {\n              \"application/json\" : {\n                \"schema\" : {\n                  \"$ref\" : \"#/components/schemas/InvocationError\"\n                }\n              }\n            }\n          },\n          \"422\" : {\n            \"description\" : \"the request could not be processed\",\n            \"content\" : {\n              \"application/json\" : {\n                \"schema\" : {\n                  \"$ref\" : \"#/components/schemas/InvocationError\"\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/cordapps/{cordapp}/flows\" : {\n      \"get\" : {\n        \"tags\" : [ \"cordapps\" ],\n        \"description\" : \"\",\n        \"operationId\" : \"cordapps_:cordapp_flows\",\n        \"parameters\" : [ {\n          \"name\" : \"cordapp\",\n          \"in\" : \"path\",\n          \"required\" : true,\n          \"schema\" : {\n            \"type\" : \"string\"\n          }\n        } ],\n        \"responses\" : {\n          \"200\" : {\n            \"description\" : \"\",\n            \"content\" : {\n              \"application/json\" : {\n                \"schema\" : {\n                  \"type\" : \"array\",\n                  \"items\" : {\n                    \"type\" : \"string\"\n                  }\n                }\n              }\n            }\n          },\n          \"400\" : {\n            \"description\" : \"the server failed to parse the request\",\n            \"content\" : {\n              \"application/json\" : {\n                \"schema\" : {\n                  \"$ref\" : \"#/components/schemas/InvocationError\"\n                }\n              }\n            }\n          },\n          \"422\" : {\n            \"description\" : \"the request could not be processed\",\n            \"content\" : {\n              \"application/json\" : {\n                \"schema\" : {\n                  \"$ref\" : \"#/components/schemas/InvocationError\"\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/cordapps/corda-core/flows/net.corda.core.flows.ContractUpgradeFlow$Authorise\" : {\n      \"post\" : {\n        \"tags\" : [ \"cordapps\" ],\n        \"description\" : \"\",\n        \"operationId\" : \"cordapps_corda_core_flows_net.corda.core.flows.ContractUpgradeFlow$Authorise\",\n        \"parameters\" : [ ],\n        \"requestBody\" : {\n          \"description\" : \"payload\",\n          \"content\" : {\n            \"application/json\" : {\n              \"schema\" : {\n                \"$ref\" : \"#/components/schemas/generated.net.corda.core.flows.ContractUpgradeFlow_AuthorisePayload\"\n              }\n            }\n          },\n          \"required\" : true\n        },\n        \"responses\" : {\n          \"200\" : {\n            \"description\" : \"empty response\"\n          },\n          \"400\" : {\n            \"description\" : \"the server failed to parse the request\",\n            \"content\" : {\n              \"application/json\" : {\n                \"schema\" : {\n                  \"$ref\" : \"#/components/schemas/InvocationError\"\n                }\n              }\n            }\n          },\n          \"422\" : {\n            \"description\" : \"the request could not be processed\",\n            \"content\" : {\n              \"application/json\" : {\n                \"schema\" : {\n                  \"$ref\" : \"#/components/schemas/InvocationError\"\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/cordapps/corda-core/flows/net.corda.core.flows.ContractUpgradeFlow$Deauthorise\" : {\n      \"post\" : {\n        \"tags\" : [ \"cordapps\" ],\n        \"description\" : \"\",\n        \"operationId\" : \"cordapps_corda_core_flows_net.corda.core.flows.ContractUpgradeFlow$Deauthorise\",\n        \"parameters\" : [ ],\n        \"requestBody\" : {\n          \"description\" : \"payload\",\n          \"content\" : {\n            \"application/json\" : {\n              \"schema\" : {\n                \"$ref\" : \"#/components/schemas/generated.net.corda.core.flows.ContractUpgradeFlow_DeauthorisePayload\"\n              }\n            }\n          },\n          \"required\" : true\n        },\n        \"responses\" : {\n          \"200\" : {\n            \"description\" : \"empty response\"\n          },\n          \"400\" : {\n            \"description\" : \"the server failed to parse the request\",\n            \"content\" : {\n              \"application/json\" : {\n                \"schema\" : {\n                  \"$ref\" : \"#/components/schemas/InvocationError\"\n                }\n              }\n            }\n          },\n          \"422\" : {\n            \"description\" : \"the request could not be processed\",\n            \"content\" : {\n              \"application/json\" : {\n                \"schema\" : {\n                  \"$ref\" : \"#/components/schemas/InvocationError\"\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/cordapps/corda-finance-workflows/flows/net.corda.finance.flows.CashExitFlow\" : {\n      \"post\" : {\n        \"tags\" : [ \"cordapps\" ],\n        \"description\" : \"\",\n        \"operationId\" : \"cordapps_corda_finance_workflows_flows_net.corda.finance.flows.CashExitFlow\",\n        \"parameters\" : [ ],\n        \"requestBody\" : {\n          \"description\" : \"payload\",\n          \"content\" : {\n            \"application/json\" : {\n              \"schema\" : {\n                \"$ref\" : \"#/components/schemas/generated.net.corda.finance.flows.CashExitFlowPayload\"\n              }\n            }\n          },\n          \"required\" : true\n        },\n        \"responses\" : {\n          \"200\" : {\n            \"description\" : \"\",\n            \"content\" : {\n              \"application/json\" : {\n                \"schema\" : {\n                  \"$ref\" : \"#/components/schemas/net.corda.finance.flows.AbstractCashFlow_Result\"\n                }\n              }\n            }\n          },\n          \"400\" : {\n            \"description\" : \"the server failed to parse the request\",\n            \"content\" : {\n              \"application/json\" : {\n                \"schema\" : {\n                  \"$ref\" : \"#/components/schemas/InvocationError\"\n                }\n              }\n            }\n          },\n          \"422\" : {\n            \"description\" : \"the request could not be processed\",\n            \"content\" : {\n              \"application/json\" : {\n                \"schema\" : {\n                  \"$ref\" : \"#/components/schemas/InvocationError\"\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/cordapps/corda-finance-workflows/flows/net.corda.finance.flows.CashIssueAndPaymentFlow\" : {\n      \"post\" : {\n        \"tags\" : [ \"cordapps\" ],\n        \"description\" : \"\",\n        \"operationId\" : \"cordapps_corda_finance_workflows_flows_net.corda.finance.flows.CashIssueAndPaymentFlow\",\n        \"parameters\" : [ ],\n        \"requestBody\" : {\n          \"description\" : \"payload\",\n          \"content\" : {\n            \"application/json\" : {\n              \"schema\" : {\n                \"$ref\" : \"#/components/schemas/generated.net.corda.finance.flows.CashIssueAndPaymentFlowPayload\"\n              }\n            }\n          },\n          \"required\" : true\n        },\n        \"responses\" : {\n          \"200\" : {\n            \"description\" : \"\",\n            \"content\" : {\n              \"application/json\" : {\n                \"schema\" : {\n                  \"$ref\" : \"#/components/schemas/net.corda.finance.flows.AbstractCashFlow_Result\"\n                }\n              }\n            }\n          },\n          \"400\" : {\n            \"description\" : \"the server failed to parse the request\",\n            \"content\" : {\n              \"application/json\" : {\n                \"schema\" : {\n                  \"$ref\" : \"#/components/schemas/InvocationError\"\n                }\n              }\n            }\n          },\n          \"422\" : {\n            \"description\" : \"the request could not be processed\",\n            \"content\" : {\n              \"application/json\" : {\n                \"schema\" : {\n                  \"$ref\" : \"#/components/schemas/InvocationError\"\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/cordapps/corda-finance-workflows/flows/net.corda.finance.flows.CashIssueFlow\" : {\n      \"post\" : {\n        \"tags\" : [ \"cordapps\" ],\n        \"description\" : \"\",\n        \"operationId\" : \"cordapps_corda_finance_workflows_flows_net.corda.finance.flows.CashIssueFlow\",\n        \"parameters\" : [ ],\n        \"requestBody\" : {\n          \"description\" : \"payload\",\n          \"content\" : {\n            \"application/json\" : {\n              \"schema\" : {\n                \"$ref\" : \"#/components/schemas/generated.net.corda.finance.flows.CashIssueFlowPayload\"\n              }\n            }\n          },\n          \"required\" : true\n        },\n        \"responses\" : {\n          \"200\" : {\n            \"description\" : \"\",\n            \"content\" : {\n              \"application/json\" : {\n                \"schema\" : {\n                  \"$ref\" : \"#/components/schemas/net.corda.finance.flows.AbstractCashFlow_Result\"\n                }\n              }\n            }\n          },\n          \"400\" : {\n            \"description\" : \"the server failed to parse the request\",\n            \"content\" : {\n              \"application/json\" : {\n                \"schema\" : {\n                  \"$ref\" : \"#/components/schemas/InvocationError\"\n                }\n              }\n            }\n          },\n          \"422\" : {\n            \"description\" : \"the request could not be processed\",\n            \"content\" : {\n              \"application/json\" : {\n                \"schema\" : {\n                  \"$ref\" : \"#/components/schemas/InvocationError\"\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/cordapps/corda-finance-workflows/flows/net.corda.finance.flows.CashPaymentFlow\" : {\n      \"post\" : {\n        \"tags\" : [ \"cordapps\" ],\n        \"description\" : \"\",\n        \"operationId\" : \"cordapps_corda_finance_workflows_flows_net.corda.finance.flows.CashPaymentFlow\",\n        \"parameters\" : [ ],\n        \"requestBody\" : {\n          \"description\" : \"payload\",\n          \"content\" : {\n            \"application/json\" : {\n              \"schema\" : {\n                \"$ref\" : \"#/components/schemas/generated.net.corda.finance.flows.CashPaymentFlowPayload\"\n              }\n            }\n          },\n          \"required\" : true\n        },\n        \"responses\" : {\n          \"200\" : {\n            \"description\" : \"\",\n            \"content\" : {\n              \"application/json\" : {\n                \"schema\" : {\n                  \"$ref\" : \"#/components/schemas/net.corda.finance.flows.AbstractCashFlow_Result\"\n                }\n              }\n            }\n          },\n          \"400\" : {\n            \"description\" : \"the server failed to parse the request\",\n            \"content\" : {\n              \"application/json\" : {\n                \"schema\" : {\n                  \"$ref\" : \"#/components/schemas/InvocationError\"\n                }\n              }\n            }\n          },\n          \"422\" : {\n            \"description\" : \"the request could not be processed\",\n            \"content\" : {\n              \"application/json\" : {\n                \"schema\" : {\n                  \"$ref\" : \"#/components/schemas/InvocationError\"\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/cordapps/corda-finance-workflows/flows/net.corda.finance.internal.CashConfigDataFlow\" : {\n      \"post\" : {\n        \"tags\" : [ \"cordapps\" ],\n        \"description\" : \"\",\n        \"operationId\" : \"cordapps_corda_finance_workflows_flows_net.corda.finance.internal.CashConfigDataFlow\",\n        \"parameters\" : [ ],\n        \"requestBody\" : {\n          \"description\" : \"payload\",\n          \"content\" : {\n            \"application/json\" : {\n              \"schema\" : {\n                \"$ref\" : \"#/components/schemas/generated.net.corda.finance.internal.CashConfigDataFlowPayload\"\n              }\n            }\n          },\n          \"required\" : true\n        },\n        \"responses\" : {\n          \"200\" : {\n            \"description\" : \"\",\n            \"content\" : {\n              \"application/json\" : {\n                \"schema\" : {\n                  \"$ref\" : \"#/components/schemas/net.corda.finance.internal.CashConfiguration\"\n                }\n              }\n            }\n          },\n          \"400\" : {\n            \"description\" : \"the server failed to parse the request\",\n            \"content\" : {\n              \"application/json\" : {\n                \"schema\" : {\n                  \"$ref\" : \"#/components/schemas/InvocationError\"\n                }\n              }\n            }\n          },\n          \"422\" : {\n            \"description\" : \"the request could not be processed\",\n            \"content\" : {\n              \"application/json\" : {\n                \"schema\" : {\n                  \"$ref\" : \"#/components/schemas/InvocationError\"\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/cordapps/obligation/flows/net.corda.examples.obligation.flows.IssueObligation$Initiator\" : {\n      \"post\" : {\n        \"tags\" : [ \"cordapps\" ],\n        \"description\" : \"\",\n        \"operationId\" : \"cordapps_obligation_flows_net.corda.examples.obligation.flows.IssueObligation$Initiator\",\n        \"parameters\" : [ ],\n        \"requestBody\" : {\n          \"description\" : \"payload\",\n          \"content\" : {\n            \"application/json\" : {\n              \"schema\" : {\n                \"$ref\" : \"#/components/schemas/generated.net.corda.examples.obligation.flows.IssueObligation_InitiatorPayload\"\n              }\n            }\n          },\n          \"required\" : true\n        },\n        \"responses\" : {\n          \"200\" : {\n            \"description\" : \"\",\n            \"content\" : {\n              \"application/json\" : {\n                \"schema\" : {\n                  \"$ref\" : \"#/components/schemas/net.corda.core.transactions.SignedTransaction\"\n                }\n              }\n            }\n          },\n          \"400\" : {\n            \"description\" : \"the server failed to parse the request\",\n            \"content\" : {\n              \"application/json\" : {\n                \"schema\" : {\n                  \"$ref\" : \"#/components/schemas/InvocationError\"\n                }\n              }\n            }\n          },\n          \"422\" : {\n            \"description\" : \"the request could not be processed\",\n            \"content\" : {\n              \"application/json\" : {\n                \"schema\" : {\n                  \"$ref\" : \"#/components/schemas/InvocationError\"\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/cordapps/obligation/flows/net.corda.examples.obligation.flows.SettleObligation$Initiator\" : {\n      \"post\" : {\n        \"tags\" : [ \"cordapps\" ],\n        \"description\" : \"\",\n        \"operationId\" : \"cordapps_obligation_flows_net.corda.examples.obligation.flows.SettleObligation$Initiator\",\n        \"parameters\" : [ ],\n        \"requestBody\" : {\n          \"description\" : \"payload\",\n          \"content\" : {\n            \"application/json\" : {\n              \"schema\" : {\n                \"$ref\" : \"#/components/schemas/generated.net.corda.examples.obligation.flows.SettleObligation_InitiatorPayload\"\n              }\n            }\n          },\n          \"required\" : true\n        },\n        \"responses\" : {\n          \"200\" : {\n            \"description\" : \"\",\n            \"content\" : {\n              \"application/json\" : {\n                \"schema\" : {\n                  \"$ref\" : \"#/components/schemas/net.corda.core.transactions.SignedTransaction\"\n                }\n              }\n            }\n          },\n          \"400\" : {\n            \"description\" : \"the server failed to parse the request\",\n            \"content\" : {\n              \"application/json\" : {\n                \"schema\" : {\n                  \"$ref\" : \"#/components/schemas/InvocationError\"\n                }\n              }\n            }\n          },\n          \"422\" : {\n            \"description\" : \"the request could not be processed\",\n            \"content\" : {\n              \"application/json\" : {\n                \"schema\" : {\n                  \"$ref\" : \"#/components/schemas/InvocationError\"\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/cordapps/obligation/flows/net.corda.examples.obligation.flows.TransferObligation$Initiator\" : {\n      \"post\" : {\n        \"tags\" : [ \"cordapps\" ],\n        \"description\" : \"\",\n        \"operationId\" : \"cordapps_obligation_flows_net.corda.examples.obligation.flows.TransferObligation$Initiator\",\n        \"parameters\" : [ ],\n        \"requestBody\" : {\n          \"description\" : \"payload\",\n          \"content\" : {\n            \"application/json\" : {\n              \"schema\" : {\n                \"$ref\" : \"#/components/schemas/generated.net.corda.examples.obligation.flows.TransferObligation_InitiatorPayload\"\n              }\n            }\n          },\n          \"required\" : true\n        },\n        \"responses\" : {\n          \"200\" : {\n            \"description\" : \"\",\n            \"content\" : {\n              \"application/json\" : {\n                \"schema\" : {\n                  \"$ref\" : \"#/components/schemas/net.corda.core.transactions.SignedTransaction\"\n                }\n              }\n            }\n          },\n          \"400\" : {\n            \"description\" : \"the server failed to parse the request\",\n            \"content\" : {\n              \"application/json\" : {\n                \"schema\" : {\n                  \"$ref\" : \"#/components/schemas/InvocationError\"\n                }\n              }\n            }\n          },\n          \"422\" : {\n            \"description\" : \"the request could not be processed\",\n            \"content\" : {\n              \"application/json\" : {\n                \"schema\" : {\n                  \"$ref\" : \"#/components/schemas/InvocationError\"\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  \"components\" : {\n    \"schemas\" : {\n      \"InvocationError\" : {\n        \"required\" : [ \"message\", \"type\" ],\n        \"type\" : \"object\",\n        \"properties\" : {\n          \"message\" : {\n            \"type\" : \"string\",\n            \"description\" : \"the error message\"\n          },\n          \"type\" : {\n            \"type\" : \"string\",\n            \"description\" : \"the type of error\"\n          }\n        }\n      },\n      \"io.bluebank.braid.corda.services.SimpleNodeInfo\" : {\n        \"required\" : [ \"addresses\", \"legalIdentities\" ],\n        \"type\" : \"object\",\n        \"properties\" : {\n          \"addresses\" : {\n            \"type\" : \"array\",\n            \"items\" : {\n              \"$ref\" : \"#/components/schemas/net.corda.core.utilities.NetworkHostAndPort\"\n            }\n          },\n          \"legalIdentities\" : {\n            \"type\" : \"array\",\n            \"items\" : {\n              \"$ref\" : \"#/components/schemas/net.corda.core.identity.Party\"\n            }\n          }\n        }\n      },\n      \"net.corda.core.identity.AbstractParty\" : {\n        \"required\" : [ \"owningKey\" ],\n        \"type\" : \"object\",\n        \"properties\" : {\n          \"owningKey\" : {\n            \"type\" : \"string\",\n            \"description\" : \"Base 58 Encoded Public Key\",\n            \"example\" : \"GfHq2tTVk9z4eXgyUuofmR16H6j7srXt8BCyidKdrZL5JEwFqHgDSuiinbTE\"\n          }\n        }\n      },\n      \"net.corda.core.identity.Party\" : {\n        \"required\" : [ \"name\", \"owningKey\" ],\n        \"type\" : \"object\",\n        \"properties\" : {\n          \"name\" : {\n            \"type\" : \"string\",\n            \"description\" : \"CordaX500Name encoded Party\",\n            \"example\" : \"O=Bank A, L=London, C=GB\"\n          },\n          \"owningKey\" : {\n            \"type\" : \"string\",\n            \"description\" : \"Base 58 Encoded Public Key\",\n            \"example\" : \"GfHq2tTVk9z4eXgyUuofmR16H6j7srXt8BCyidKdrZL5JEwFqHgDSuiinbTE\"\n          }\n        }\n      },\n      \"net.corda.core.utilities.NetworkHostAndPort\" : {\n        \"required\" : [ \"host\", \"port\" ],\n        \"type\" : \"object\",\n        \"properties\" : {\n          \"host\" : {\n            \"type\" : \"string\"\n          },\n          \"port\" : {\n            \"type\" : \"integer\",\n            \"format\" : \"int32\"\n          }\n        }\n      },\n      \"io.bluebank.braid.corda.serialisation.mixin.ContractStateMixin\" : {\n        \"type\" : \"object\"\n      },\n      \"net.corda.core.contracts.AttachmentConstraint\" : {\n        \"type\" : \"object\"\n      },\n      \"net.corda.core.contracts.ContractState\" : {\n        \"type\" : \"object\"\n      },\n      \"net.corda.core.contracts.StateAndRef_net_corda_core_contracts_ContractState\" : {\n        \"type\" : \"object\",\n        \"properties\" : {\n          \"state\" : {\n            \"$ref\" : \"#/components/schemas/net.corda.core.contracts.TransactionState_net_corda_core_contracts_ContractState\"\n          },\n          \"ref\" : {\n            \"$ref\" : \"#/components/schemas/net.corda.core.contracts.StateRef\"\n          }\n        }\n      },\n      \"net.corda.core.contracts.StateRef\" : {\n        \"required\" : [ \"index\", \"txhash\" ],\n        \"type\" : \"object\",\n        \"properties\" : {\n          \"txhash\" : {\n            \"type\" : \"string\",\n            \"description\" : \"Base 58 Encoded Secure Hash\",\n            \"example\" : \"GfHq2tTVk9z4eXgyUuofmR16H6j7srXt8BCyidKdrZL5JEwFqHgDSuiinbTE\"\n          },\n          \"index\" : {\n            \"type\" : \"integer\",\n            \"format\" : \"int32\"\n          }\n        }\n      },\n      \"net.corda.core.contracts.TransactionState_net_corda_core_contracts_ContractState\" : {\n        \"required\" : [ \"contract\" ],\n        \"type\" : \"object\",\n        \"properties\" : {\n          \"data\" : {\n            \"$ref\" : \"#/components/schemas/net.corda.core.contracts.ContractState\"\n          },\n          \"contract\" : {\n            \"type\" : \"string\"\n          },\n          \"notary\" : {\n            \"$ref\" : \"#/components/schemas/net.corda.core.identity.Party\"\n          },\n          \"encumbrance\" : {\n            \"type\" : \"integer\",\n            \"format\" : \"int32\"\n          },\n          \"constraint\" : {\n            \"$ref\" : \"#/components/schemas/net.corda.core.contracts.AttachmentConstraint\"\n          }\n        }\n      },\n      \"net.corda.core.node.services.Vault_ConstraintInfo\" : {\n        \"type\" : \"object\",\n        \"properties\" : {\n          \"constraint\" : {\n            \"$ref\" : \"#/components/schemas/net.corda.core.contracts.AttachmentConstraint\"\n          }\n        }\n      },\n      \"net.corda.core.node.services.Vault_Page_net_corda_core_contracts_ContractState\" : {\n        \"required\" : [ \"otherResults\", \"stateTypes\", \"states\", \"statesMetadata\", \"totalStatesAvailable\" ],\n        \"type\" : \"object\",\n        \"properties\" : {\n          \"states\" : {\n            \"type\" : \"array\",\n            \"items\" : {\n              \"$ref\" : \"#/components/schemas/net.corda.core.contracts.StateAndRef_net_corda_core_contracts_ContractState\"\n            }\n          },\n          \"statesMetadata\" : {\n            \"type\" : \"array\",\n            \"items\" : {\n              \"$ref\" : \"#/components/schemas/net.corda.core.node.services.Vault_StateMetadata\"\n            }\n          },\n          \"totalStatesAvailable\" : {\n            \"type\" : \"integer\",\n            \"format\" : \"int64\"\n          },\n          \"stateTypes\" : {\n            \"type\" : \"string\",\n            \"enum\" : [ \"UNCONSUMED\", \"CONSUMED\", \"ALL\" ]\n          },\n          \"otherResults\" : {\n            \"type\" : \"array\",\n            \"items\" : {\n              \"type\" : \"object\"\n            }\n          }\n        }\n      },\n      \"net.corda.core.node.services.Vault_StateMetadata\" : {\n        \"required\" : [ \"contractStateClassName\", \"recordedTime\", \"status\" ],\n        \"type\" : \"object\",\n        \"properties\" : {\n          \"ref\" : {\n            \"$ref\" : \"#/components/schemas/net.corda.core.contracts.StateRef\"\n          },\n          \"contractStateClassName\" : {\n            \"type\" : \"string\"\n          },\n          \"recordedTime\" : {\n            \"type\" : \"string\",\n            \"description\" : \"JSR310 encoded time representation of Instant\"\n          },\n          \"consumedTime\" : {\n            \"type\" : \"string\",\n            \"description\" : \"JSR310 encoded time representation of Instant\"\n          },\n          \"status\" : {\n            \"type\" : \"string\",\n            \"enum\" : [ \"UNCONSUMED\", \"CONSUMED\", \"ALL\" ]\n          },\n          \"notary\" : {\n            \"$ref\" : \"#/components/schemas/net.corda.core.identity.AbstractParty\"\n          },\n          \"lockId\" : {\n            \"type\" : \"string\"\n          },\n          \"lockUpdateTime\" : {\n            \"type\" : \"string\",\n            \"description\" : \"JSR310 encoded time representation of Instant\"\n          },\n          \"relevancyStatus\" : {\n            \"type\" : \"string\",\n            \"enum\" : [ \"RELEVANT\", \"NOT_RELEVANT\", \"ALL\" ]\n          },\n          \"constraintInfo\" : {\n            \"$ref\" : \"#/components/schemas/net.corda.core.node.services.Vault_ConstraintInfo\"\n          }\n        }\n      },\n      \"io.bluebank.braid.corda.serialisation.mixin.PageSpecificationMixin\" : {\n        \"type\" : \"object\"\n      },\n      \"io.bluebank.braid.corda.services.vault.VaultQuery\" : {\n        \"required\" : [ \"contractStateType\" ],\n        \"type\" : \"object\",\n        \"properties\" : {\n          \"criteria\" : {\n            \"$ref\" : \"#/components/schemas/net.corda.core.node.services.vault.QueryCriteria\"\n          },\n          \"paging\" : {\n            \"$ref\" : \"#/components/schemas/net.corda.core.node.services.vault.PageSpecification\"\n          },\n          \"sorting\" : {\n            \"$ref\" : \"#/components/schemas/net.corda.core.node.services.vault.Sort\"\n          },\n          \"contractStateType\" : {\n            \"type\" : \"string\",\n            \"description\" : \"Java class name\",\n            \"example\" : \"java.lang.Object\"\n          }\n        }\n      },\n      \"net.corda.core.node.services.vault.BaseSort\" : {\n        \"type\" : \"object\"\n      },\n      \"net.corda.core.node.services.vault.ColumnPredicate\" : {\n        \"type\" : \"object\",\n        \"discriminator\" : {\n          \"propertyName\" : \"@class\",\n          \"mapping\" : {\n            \".ColumnPredicate$AggregateFunction\" : \"#/components/schemas/net.corda.core.node.services.vault.ColumnPredicate_AggregateFunction\",\n            \".ColumnPredicate$Between\" : \"#/components/schemas/net.corda.core.node.services.vault.ColumnPredicate_Between\",\n            \".ColumnPredicate$BinaryComparison\" : \"#/components/schemas/net.corda.core.node.services.vault.ColumnPredicate_BinaryComparison\",\n            \".ColumnPredicate$CollectionExpression\" : \"#/components/schemas/net.corda.core.node.services.vault.ColumnPredicate_CollectionExpression\",\n            \".ColumnPredicate$EqualityComparison\" : \"#/components/schemas/net.corda.core.node.services.vault.ColumnPredicate_EqualityComparison\",\n            \".ColumnPredicate$NullExpression\" : \"#/components/schemas/net.corda.core.node.services.vault.ColumnPredicate_NullExpression\",\n            \".ColumnPredicate$Likeness\" : \"#/components/schemas/net.corda.core.node.services.vault.ColumnPredicate_Likeness\"\n          }\n        }\n      },\n      \"net.corda.core.node.services.vault.ColumnPredicate_AggregateFunction\" : {\n        \"required\" : [ \"type\" ],\n        \"type\" : \"object\",\n        \"allOf\" : [ {\n          \"$ref\" : \"#/components/schemas/net.corda.core.node.services.vault.ColumnPredicate_Instant\"\n        }, {\n          \"type\" : \"object\",\n          \"properties\" : {\n            \"type\" : {\n              \"type\" : \"string\",\n              \"enum\" : [ \"COUNT\", \"AVG\", \"MIN\", \"MAX\", \"SUM\" ]\n            }\n          }\n        }, {\n          \"$ref\" : \"#/components/schemas/net.corda.core.node.services.vault.ColumnPredicate_Object\"\n        }, {\n          \"$ref\" : \"#/components/schemas/net.corda.core.node.services.vault.ColumnPredicate_Long\"\n        } ]\n      },\n      \"net.corda.core.node.services.vault.ColumnPredicate_Between\" : {\n        \"required\" : [ \"rightFromLiteral\", \"rightToLiteral\" ],\n        \"type\" : \"object\",\n        \"allOf\" : [ {\n          \"$ref\" : \"#/components/schemas/net.corda.core.node.services.vault.ColumnPredicate\"\n        }, {\n          \"type\" : \"object\",\n          \"properties\" : {\n            \"rightToLiteral\" : {\n              \"type\" : \"object\"\n            }\n          }\n        }, {\n          \"$ref\" : \"#/components/schemas/net.corda.core.node.services.vault.ColumnPredicate_Instant\"\n        }, {\n          \"$ref\" : \"#/components/schemas/net.corda.core.node.services.vault.ColumnPredicate_Object\"\n        }, {\n          \"$ref\" : \"#/components/schemas/net.corda.core.node.services.vault.ColumnPredicate_Long\"\n        } ]\n      },\n      \"net.corda.core.node.services.vault.ColumnPredicate_BinaryComparison\" : {\n        \"required\" : [ \"operator\", \"rightLiteral\" ],\n        \"type\" : \"object\",\n        \"allOf\" : [ {\n          \"$ref\" : \"#/components/schemas/net.corda.core.node.services.vault.ColumnPredicate\"\n        }, {\n          \"type\" : \"object\",\n          \"properties\" : {\n            \"operator\" : {\n              \"type\" : \"string\",\n              \"enum\" : [ \"LESS_THAN\", \"LESS_THAN_OR_EQUAL\", \"GREATER_THAN\", \"GREATER_THAN_OR_EQUAL\" ]\n            },\n            \"rightLiteral\" : {\n              \"type\" : \"object\"\n            }\n          }\n        }, {\n          \"$ref\" : \"#/components/schemas/net.corda.core.node.services.vault.ColumnPredicate_Instant\"\n        }, {\n          \"$ref\" : \"#/components/schemas/net.corda.core.node.services.vault.ColumnPredicate_Object\"\n        }, {\n          \"$ref\" : \"#/components/schemas/net.corda.core.node.services.vault.ColumnPredicate_Long\"\n        } ]\n      },\n      \"net.corda.core.node.services.vault.ColumnPredicate_CollectionExpression\" : {\n        \"required\" : [ \"operator\", \"rightLiteral\" ],\n        \"type\" : \"object\",\n        \"allOf\" : [ {\n          \"$ref\" : \"#/components/schemas/net.corda.core.node.services.vault.ColumnPredicate\"\n        }, {\n          \"type\" : \"object\",\n          \"properties\" : {\n            \"operator\" : {\n              \"type\" : \"string\",\n              \"enum\" : [ \"IN\", \"NOT_IN\", \"IN_IGNORE_CASE\", \"NOT_IN_IGNORE_CASE\" ]\n            },\n            \"rightLiteral\" : {\n              \"type\" : \"array\",\n              \"items\" : {\n                \"type\" : \"object\"\n              }\n            }\n          }\n        }, {\n          \"$ref\" : \"#/components/schemas/net.corda.core.node.services.vault.ColumnPredicate_Instant\"\n        }, {\n          \"$ref\" : \"#/components/schemas/net.corda.core.node.services.vault.ColumnPredicate_Object\"\n        }, {\n          \"$ref\" : \"#/components/schemas/net.corda.core.node.services.vault.ColumnPredicate_Long\"\n        } ]\n      },\n      \"net.corda.core.node.services.vault.ColumnPredicate_EqualityComparison\" : {\n        \"required\" : [ \"operator\", \"rightLiteral\" ],\n        \"type\" : \"object\",\n        \"allOf\" : [ {\n          \"$ref\" : \"#/components/schemas/net.corda.core.node.services.vault.ColumnPredicate\"\n        }, {\n          \"type\" : \"object\",\n          \"properties\" : {\n            \"operator\" : {\n              \"type\" : \"string\",\n              \"enum\" : [ \"EQUAL\", \"NOT_EQUAL\", \"EQUAL_IGNORE_CASE\", \"NOT_EQUAL_IGNORE_CASE\" ]\n            },\n            \"rightLiteral\" : {\n              \"type\" : \"object\"\n            }\n          }\n        }, {\n          \"$ref\" : \"#/components/schemas/net.corda.core.node.services.vault.ColumnPredicate_Instant\"\n        }, {\n          \"$ref\" : \"#/components/schemas/net.corda.core.node.services.vault.ColumnPredicate_Object\"\n        }, {\n          \"$ref\" : \"#/components/schemas/net.corda.core.node.services.vault.ColumnPredicate_Long\"\n        } ]\n      },\n      \"net.corda.core.node.services.vault.ColumnPredicate_Instant\" : {\n        \"type\" : \"object\",\n        \"discriminator\" : {\n          \"propertyName\" : \"@class\",\n          \"mapping\" : {\n            \".ColumnPredicate$AggregateFunction\" : \"#/components/schemas/net.corda.core.node.services.vault.ColumnPredicate_AggregateFunction\",\n            \".ColumnPredicate$Between\" : \"#/components/schemas/net.corda.core.node.services.vault.ColumnPredicate_Between\",\n            \".ColumnPredicate$BinaryComparison\" : \"#/components/schemas/net.corda.core.node.services.vault.ColumnPredicate_BinaryComparison\",\n            \".ColumnPredicate$CollectionExpression\" : \"#/components/schemas/net.corda.core.node.services.vault.ColumnPredicate_CollectionExpression\",\n            \".ColumnPredicate$EqualityComparison\" : \"#/components/schemas/net.corda.core.node.services.vault.ColumnPredicate_EqualityComparison\",\n            \".ColumnPredicate$NullExpression\" : \"#/components/schemas/net.corda.core.node.services.vault.ColumnPredicate_NullExpression\",\n            \".ColumnPredicate$Likeness\" : \"#/components/schemas/net.corda.core.node.services.vault.ColumnPredicate_Likeness\"\n          }\n        }\n      },\n      \"net.corda.core.node.services.vault.ColumnPredicate_Likeness\" : {\n        \"required\" : [ \"operator\", \"rightLiteral\" ],\n        \"type\" : \"object\",\n        \"allOf\" : [ {\n          \"$ref\" : \"#/components/schemas/net.corda.core.node.services.vault.ColumnPredicate\"\n        }, {\n          \"type\" : \"object\",\n          \"properties\" : {\n            \"operator\" : {\n              \"type\" : \"string\",\n              \"enum\" : [ \"LIKE\", \"NOT_LIKE\", \"LIKE_IGNORE_CASE\", \"NOT_LIKE_IGNORE_CASE\" ]\n            },\n            \"rightLiteral\" : {\n              \"type\" : \"string\"\n            }\n          }\n        }, {\n          \"$ref\" : \"#/components/schemas/net.corda.core.node.services.vault.ColumnPredicate_Instant\"\n        }, {\n          \"$ref\" : \"#/components/schemas/net.corda.core.node.services.vault.ColumnPredicate_Object\"\n        }, {\n          \"$ref\" : \"#/components/schemas/net.corda.core.node.services.vault.ColumnPredicate_Long\"\n        } ]\n      },\n      \"net.corda.core.node.services.vault.ColumnPredicate_Long\" : {\n        \"type\" : \"object\",\n        \"discriminator\" : {\n          \"propertyName\" : \"@class\",\n          \"mapping\" : {\n            \".ColumnPredicate$AggregateFunction\" : \"#/components/schemas/net.corda.core.node.services.vault.ColumnPredicate_AggregateFunction\",\n            \".ColumnPredicate$Between\" : \"#/components/schemas/net.corda.core.node.services.vault.ColumnPredicate_Between\",\n            \".ColumnPredicate$BinaryComparison\" : \"#/components/schemas/net.corda.core.node.services.vault.ColumnPredicate_BinaryComparison\",\n            \".ColumnPredicate$CollectionExpression\" : \"#/components/schemas/net.corda.core.node.services.vault.ColumnPredicate_CollectionExpression\",\n            \".ColumnPredicate$EqualityComparison\" : \"#/components/schemas/net.corda.core.node.services.vault.ColumnPredicate_EqualityComparison\",\n            \".ColumnPredicate$NullExpression\" : \"#/components/schemas/net.corda.core.node.services.vault.ColumnPredicate_NullExpression\",\n            \".ColumnPredicate$Likeness\" : \"#/components/schemas/net.corda.core.node.services.vault.ColumnPredicate_Likeness\"\n          }\n        }\n      },\n      \"net.corda.core.node.services.vault.ColumnPredicate_NullExpression\" : {\n        \"required\" : [ \"operator\" ],\n        \"type\" : \"object\",\n        \"allOf\" : [ {\n          \"$ref\" : \"#/components/schemas/net.corda.core.node.services.vault.ColumnPredicate\"\n        }, {\n          \"type\" : \"object\",\n          \"properties\" : {\n            \"operator\" : {\n              \"type\" : \"string\",\n              \"enum\" : [ \"IS_NULL\", \"NOT_NULL\" ]\n            }\n          }\n        }, {\n          \"$ref\" : \"#/components/schemas/net.corda.core.node.services.vault.ColumnPredicate_Instant\"\n        }, {\n          \"$ref\" : \"#/components/schemas/net.corda.core.node.services.vault.ColumnPredicate_Object\"\n        }, {\n          \"$ref\" : \"#/components/schemas/net.corda.core.node.services.vault.ColumnPredicate_Long\"\n        } ]\n      },\n      \"net.corda.core.node.services.vault.ColumnPredicate_Object\" : {\n        \"type\" : \"object\",\n        \"discriminator\" : {\n          \"propertyName\" : \"@class\",\n          \"mapping\" : {\n            \".ColumnPredicate$AggregateFunction\" : \"#/components/schemas/net.corda.core.node.services.vault.ColumnPredicate_AggregateFunction\",\n            \".ColumnPredicate$Between\" : \"#/components/schemas/net.corda.core.node.services.vault.ColumnPredicate_Between\",\n            \".ColumnPredicate$BinaryComparison\" : \"#/components/schemas/net.corda.core.node.services.vault.ColumnPredicate_BinaryComparison\",\n            \".ColumnPredicate$CollectionExpression\" : \"#/components/schemas/net.corda.core.node.services.vault.ColumnPredicate_CollectionExpression\",\n            \".ColumnPredicate$EqualityComparison\" : \"#/components/schemas/net.corda.core.node.services.vault.ColumnPredicate_EqualityComparison\",\n            \".ColumnPredicate$NullExpression\" : \"#/components/schemas/net.corda.core.node.services.vault.ColumnPredicate_NullExpression\",\n            \".ColumnPredicate$Likeness\" : \"#/components/schemas/net.corda.core.node.services.vault.ColumnPredicate_Likeness\"\n          }\n        }\n      },\n      \"net.corda.core.node.services.vault.Column_Object_Object\" : {\n        \"required\" : [ \"declaringClass\", \"name\" ],\n        \"type\" : \"object\",\n        \"properties\" : {\n          \"name\" : {\n            \"type\" : \"string\"\n          },\n          \"declaringClass\" : {\n            \"type\" : \"string\",\n            \"description\" : \"Java class name\",\n            \"example\" : \"java.lang.Object\"\n          }\n        }\n      },\n      \"net.corda.core.node.services.vault.CriteriaExpression\" : {\n        \"type\" : \"object\",\n        \"discriminator\" : {\n          \"propertyName\" : \"@class\",\n          \"mapping\" : {\n            \".CriteriaExpression$AggregateFunctionExpression\" : \"#/components/schemas/net.corda.core.node.services.vault.CriteriaExpression_AggregateFunctionExpression\",\n            \".CriteriaExpression$BinaryLogical\" : \"#/components/schemas/net.corda.core.node.services.vault.CriteriaExpression_BinaryLogical\",\n            \".CriteriaExpression$ColumnPredicateExpression\" : \"#/components/schemas/net.corda.core.node.services.vault.CriteriaExpression_ColumnPredicateExpression\",\n            \".CriteriaExpression$Not\" : \"#/components/schemas/net.corda.core.node.services.vault.CriteriaExpression_Not\"\n          }\n        }\n      },\n      \"net.corda.core.node.services.vault.CriteriaExpression_AggregateFunctionExpression\" : {\n        \"required\" : [ \"column\", \"predicate\" ],\n        \"type\" : \"object\",\n        \"allOf\" : [ {\n          \"$ref\" : \"#/components/schemas/net.corda.core.node.services.vault.CriteriaExpression_net_corda_core_schemas_StatePersistable_Boolean\"\n        }, {\n          \"type\" : \"object\",\n          \"properties\" : {\n            \"column\" : {\n              \"$ref\" : \"#/components/schemas/net.corda.core.node.services.vault.Column_Object_Object\"\n            },\n            \"predicate\" : {\n              \"$ref\" : \"#/components/schemas/net.corda.core.node.services.vault.ColumnPredicate_Object\"\n            },\n            \"groupByColumns\" : {\n              \"type\" : \"array\",\n              \"items\" : {\n                \"$ref\" : \"#/components/schemas/net.corda.core.node.services.vault.Column_Object_Object\"\n              }\n            },\n            \"orderBy\" : {\n              \"type\" : \"string\",\n              \"enum\" : [ \"ASC\", \"DESC\" ]\n            }\n          }\n        } ]\n      },\n      \"net.corda.core.node.services.vault.CriteriaExpression_BinaryLogical\" : {\n        \"required\" : [ \"left\", \"operator\", \"right\" ],\n        \"type\" : \"object\",\n        \"allOf\" : [ {\n          \"$ref\" : \"#/components/schemas/net.corda.core.node.services.vault.CriteriaExpression_Object_Boolean\"\n        }, {\n          \"type\" : \"object\",\n          \"properties\" : {\n            \"left\" : {\n              \"$ref\" : \"#/components/schemas/net.corda.core.node.services.vault.CriteriaExpression_Object_Boolean\"\n            },\n            \"right\" : {\n              \"$ref\" : \"#/components/schemas/net.corda.core.node.services.vault.CriteriaExpression_Object_Boolean\"\n            },\n            \"operator\" : {\n              \"type\" : \"string\",\n              \"enum\" : [ \"AND\", \"OR\" ]\n            }\n          }\n        }, {\n          \"$ref\" : \"#/components/schemas/net.corda.core.node.services.vault.CriteriaExpression\"\n        }, {\n          \"$ref\" : \"#/components/schemas/net.corda.core.node.services.vault.CriteriaExpression_net_corda_core_schemas_StatePersistable_Boolean\"\n        } ]\n      },\n      \"net.corda.core.node.services.vault.CriteriaExpression_ColumnPredicateExpression\" : {\n        \"required\" : [ \"column\", \"predicate\" ],\n        \"type\" : \"object\",\n        \"allOf\" : [ {\n          \"$ref\" : \"#/components/schemas/net.corda.core.node.services.vault.CriteriaExpression\"\n        }, {\n          \"type\" : \"object\",\n          \"properties\" : {\n            \"column\" : {\n              \"$ref\" : \"#/components/schemas/net.corda.core.node.services.vault.Column_Object_Object\"\n            },\n            \"predicate\" : {\n              \"$ref\" : \"#/components/schemas/net.corda.core.node.services.vault.ColumnPredicate_Object\"\n            }\n          }\n        }, {\n          \"$ref\" : \"#/components/schemas/net.corda.core.node.services.vault.CriteriaExpression_Object_Boolean\"\n        }, {\n          \"$ref\" : \"#/components/schemas/net.corda.core.node.services.vault.CriteriaExpression_net_corda_core_schemas_StatePersistable_Boolean\"\n        } ]\n      },\n      \"net.corda.core.node.services.vault.CriteriaExpression_Not\" : {\n        \"required\" : [ \"expression\" ],\n        \"type\" : \"object\",\n        \"allOf\" : [ {\n          \"$ref\" : \"#/components/schemas/net.corda.core.node.services.vault.CriteriaExpression\"\n        }, {\n          \"type\" : \"object\",\n          \"properties\" : {\n            \"expression\" : {\n              \"$ref\" : \"#/components/schemas/net.corda.core.node.services.vault.CriteriaExpression_Object_Boolean\"\n            }\n          }\n        }, {\n          \"$ref\" : \"#/components/schemas/net.corda.core.node.services.vault.CriteriaExpression_net_corda_core_schemas_StatePersistable_Boolean\"\n        } ]\n      },\n      \"net.corda.core.node.services.vault.CriteriaExpression_Object_Boolean\" : {\n        \"type\" : \"object\",\n        \"discriminator\" : {\n          \"propertyName\" : \"@class\",\n          \"mapping\" : {\n            \".CriteriaExpression$AggregateFunctionExpression\" : \"#/components/schemas/net.corda.core.node.services.vault.CriteriaExpression_AggregateFunctionExpression\",\n            \".CriteriaExpression$BinaryLogical\" : \"#/components/schemas/net.corda.core.node.services.vault.CriteriaExpression_BinaryLogical\",\n            \".CriteriaExpression$ColumnPredicateExpression\" : \"#/components/schemas/net.corda.core.node.services.vault.CriteriaExpression_ColumnPredicateExpression\",\n            \".CriteriaExpression$Not\" : \"#/components/schemas/net.corda.core.node.services.vault.CriteriaExpression_Not\"\n          }\n        }\n      },\n      \"net.corda.core.node.services.vault.CriteriaExpression_net_corda_core_schemas_StatePersistable_Boolean\" : {\n        \"type\" : \"object\",\n        \"discriminator\" : {\n          \"propertyName\" : \"@class\",\n          \"mapping\" : {\n            \".CriteriaExpression$AggregateFunctionExpression\" : \"#/components/schemas/net.corda.core.node.services.vault.CriteriaExpression_AggregateFunctionExpression\",\n            \".CriteriaExpression$BinaryLogical\" : \"#/components/schemas/net.corda.core.node.services.vault.CriteriaExpression_BinaryLogical\",\n            \".CriteriaExpression$ColumnPredicateExpression\" : \"#/components/schemas/net.corda.core.node.services.vault.CriteriaExpression_ColumnPredicateExpression\",\n            \".CriteriaExpression$Not\" : \"#/components/schemas/net.corda.core.node.services.vault.CriteriaExpression_Not\"\n          }\n        }\n      },\n      \"net.corda.core.node.services.vault.PageSpecification\" : {\n        \"required\" : [ \"pageNumber\", \"pageSize\" ],\n        \"type\" : \"object\",\n        \"properties\" : {\n          \"pageNumber\" : {\n            \"type\" : \"integer\",\n            \"format\" : \"int32\"\n          },\n          \"pageSize\" : {\n            \"type\" : \"integer\",\n            \"format\" : \"int32\"\n          }\n        }\n      },\n      \"net.corda.core.node.services.vault.QueryCriteria\" : {\n        \"type\" : \"object\",\n        \"discriminator\" : {\n          \"propertyName\" : \"@class\",\n          \"mapping\" : {\n            \".QueryCriteria$VaultQueryCriteria\" : \"#/components/schemas/net.corda.core.node.services.vault.QueryCriteria_VaultQueryCriteria\",\n            \".QueryCriteria$VaultCustomQueryCriteria\" : \"#/components/schemas/net.corda.core.node.services.vault.QueryCriteria_VaultCustomQueryCriteria\",\n            \".QueryCriteria$CommonQueryCriteria\" : \"#/components/schemas/net.corda.core.node.services.vault.QueryCriteria_CommonQueryCriteria\",\n            \".QueryCriteria$LinearStateQueryCriteria\" : \"#/components/schemas/net.corda.core.node.services.vault.QueryCriteria_LinearStateQueryCriteria\",\n            \".QueryCriteria$FungibleAssetQueryCriteria\" : \"#/components/schemas/net.corda.core.node.services.vault.QueryCriteria_FungibleAssetQueryCriteria\",\n            \".QueryCriteria$AndComposition\" : \"#/components/schemas/net.corda.core.node.services.vault.QueryCriteria_AndComposition\",\n            \".QueryCriteria$OrComposition\" : \"#/components/schemas/net.corda.core.node.services.vault.QueryCriteria_OrComposition\"\n          }\n        }\n      },\n      \"net.corda.core.node.services.vault.QueryCriteria_AndComposition\" : {\n        \"required\" : [ \"a\", \"b\" ],\n        \"type\" : \"object\",\n        \"allOf\" : [ {\n          \"$ref\" : \"#/components/schemas/net.corda.core.node.services.vault.QueryCriteria\"\n        }, {\n          \"type\" : \"object\",\n          \"properties\" : {\n            \"a\" : {\n              \"$ref\" : \"#/components/schemas/net.corda.core.node.services.vault.QueryCriteria\"\n            },\n            \"b\" : {\n              \"$ref\" : \"#/components/schemas/net.corda.core.node.services.vault.QueryCriteria\"\n            }\n          }\n        } ]\n      },\n      \"net.corda.core.node.services.vault.QueryCriteria_CommonQueryCriteria\" : {\n        \"required\" : [ \"constraintTypes\", \"constraints\", \"relevancyStatus\", \"status\" ],\n        \"type\" : \"object\",\n        \"properties\" : {\n          \"relevancyStatus\" : {\n            \"type\" : \"string\",\n            \"enum\" : [ \"RELEVANT\", \"NOT_RELEVANT\", \"ALL\" ]\n          },\n          \"constraintTypes\" : {\n            \"uniqueItems\" : true,\n            \"type\" : \"array\",\n            \"items\" : {\n              \"type\" : \"string\",\n              \"enum\" : [ \"ALWAYS_ACCEPT\", \"HASH\", \"CZ_WHITELISTED\", \"SIGNATURE\" ]\n            }\n          },\n          \"constraints\" : {\n            \"uniqueItems\" : true,\n            \"type\" : \"array\",\n            \"items\" : {\n              \"$ref\" : \"#/components/schemas/net.corda.core.node.services.Vault_ConstraintInfo\"\n            }\n          },\n          \"participants\" : {\n            \"type\" : \"array\",\n            \"items\" : {\n              \"$ref\" : \"#/components/schemas/net.corda.core.identity.AbstractParty\"\n            }\n          },\n          \"contractStateTypes\" : {\n            \"uniqueItems\" : true,\n            \"type\" : \"array\",\n            \"items\" : {\n              \"type\" : \"string\",\n              \"description\" : \"Java class name\",\n              \"example\" : \"java.lang.Object\"\n            }\n          },\n          \"status\" : {\n            \"type\" : \"string\",\n            \"enum\" : [ \"UNCONSUMED\", \"CONSUMED\", \"ALL\" ]\n          }\n        }\n      },\n      \"net.corda.core.node.services.vault.QueryCriteria_FungibleAssetQueryCriteria\" : {\n        \"required\" : [ \"constraintTypes\", \"constraints\", \"relevancyStatus\", \"status\" ],\n        \"type\" : \"object\",\n        \"allOf\" : [ {\n          \"$ref\" : \"#/components/schemas/net.corda.core.node.services.vault.QueryCriteria\"\n        }, {\n          \"type\" : \"object\",\n          \"properties\" : {\n            \"participants\" : {\n              \"type\" : \"array\",\n              \"items\" : {\n                \"$ref\" : \"#/components/schemas/net.corda.core.identity.AbstractParty\"\n              }\n            },\n            \"owner\" : {\n              \"type\" : \"array\",\n              \"items\" : {\n                \"$ref\" : \"#/components/schemas/net.corda.core.identity.AbstractParty\"\n              }\n            },\n            \"quantity\" : {\n              \"$ref\" : \"#/components/schemas/net.corda.core.node.services.vault.ColumnPredicate_Long\"\n            },\n            \"issuer\" : {\n              \"type\" : \"array\",\n              \"items\" : {\n                \"$ref\" : \"#/components/schemas/net.corda.core.identity.AbstractParty\"\n              }\n            },\n            \"issuerRef\" : {\n              \"type\" : \"array\",\n              \"items\" : {\n                \"type\" : \"string\",\n                \"description\" : \"Hex encoded Byte Array\",\n                \"example\" : \"736F6D654279746573\"\n              }\n            },\n            \"status\" : {\n              \"type\" : \"string\",\n              \"enum\" : [ \"UNCONSUMED\", \"CONSUMED\", \"ALL\" ]\n            },\n            \"contractStateTypes\" : {\n              \"uniqueItems\" : true,\n              \"type\" : \"array\",\n              \"items\" : {\n                \"type\" : \"string\",\n                \"description\" : \"Java class name\",\n                \"example\" : \"java.lang.Object\"\n              }\n            },\n            \"relevancyStatus\" : {\n              \"type\" : \"string\",\n              \"enum\" : [ \"RELEVANT\", \"NOT_RELEVANT\", \"ALL\" ]\n            },\n            \"constraintTypes\" : {\n              \"uniqueItems\" : true,\n              \"type\" : \"array\",\n              \"items\" : {\n                \"type\" : \"string\",\n                \"enum\" : [ \"ALWAYS_ACCEPT\", \"HASH\", \"CZ_WHITELISTED\", \"SIGNATURE\" ]\n              }\n            },\n            \"constraints\" : {\n              \"uniqueItems\" : true,\n              \"type\" : \"array\",\n              \"items\" : {\n                \"$ref\" : \"#/components/schemas/net.corda.core.node.services.Vault_ConstraintInfo\"\n              }\n            }\n          }\n        } ]\n      },\n      \"net.corda.core.node.services.vault.QueryCriteria_FungibleStateQueryCriteria\" : {\n        \"required\" : [ \"constraintTypes\", \"constraints\", \"relevancyStatus\", \"status\" ],\n        \"type\" : \"object\",\n        \"allOf\" : [ {\n          \"$ref\" : \"#/components/schemas/net.corda.core.node.services.vault.QueryCriteria\"\n        }, {\n          \"type\" : \"object\",\n          \"properties\" : {\n            \"participants\" : {\n              \"type\" : \"array\",\n              \"items\" : {\n                \"$ref\" : \"#/components/schemas/net.corda.core.identity.AbstractParty\"\n              }\n            },\n            \"quantity\" : {\n              \"$ref\" : \"#/components/schemas/net.corda.core.node.services.vault.ColumnPredicate_Long\"\n            },\n            \"status\" : {\n              \"type\" : \"string\",\n              \"enum\" : [ \"UNCONSUMED\", \"CONSUMED\", \"ALL\" ]\n            },\n            \"contractStateTypes\" : {\n              \"uniqueItems\" : true,\n              \"type\" : \"array\",\n              \"items\" : {\n                \"type\" : \"string\",\n                \"description\" : \"Java class name\",\n                \"example\" : \"java.lang.Object\"\n              }\n            },\n            \"relevancyStatus\" : {\n              \"type\" : \"string\",\n              \"enum\" : [ \"RELEVANT\", \"NOT_RELEVANT\", \"ALL\" ]\n            },\n            \"constraintTypes\" : {\n              \"uniqueItems\" : true,\n              \"type\" : \"array\",\n              \"items\" : {\n                \"type\" : \"string\",\n                \"enum\" : [ \"ALWAYS_ACCEPT\", \"HASH\", \"CZ_WHITELISTED\", \"SIGNATURE\" ]\n              }\n            },\n            \"constraints\" : {\n              \"uniqueItems\" : true,\n              \"type\" : \"array\",\n              \"items\" : {\n                \"$ref\" : \"#/components/schemas/net.corda.core.node.services.Vault_ConstraintInfo\"\n              }\n            }\n          }\n        } ]\n      },\n      \"net.corda.core.node.services.vault.QueryCriteria_LinearStateQueryCriteria\" : {\n        \"required\" : [ \"constraintTypes\", \"constraints\", \"relevancyStatus\", \"status\" ],\n        \"type\" : \"object\",\n        \"allOf\" : [ {\n          \"$ref\" : \"#/components/schemas/net.corda.core.node.services.vault.QueryCriteria\"\n        }, {\n          \"type\" : \"object\",\n          \"properties\" : {\n            \"participants\" : {\n              \"type\" : \"array\",\n              \"items\" : {\n                \"$ref\" : \"#/components/schemas/net.corda.core.identity.AbstractParty\"\n              }\n            },\n            \"uuid\" : {\n              \"type\" : \"array\",\n              \"items\" : {\n                \"type\" : \"string\",\n                \"format\" : \"uuid\"\n              }\n            },\n            \"externalId\" : {\n              \"type\" : \"array\",\n              \"items\" : {\n                \"type\" : \"string\"\n              }\n            },\n            \"status\" : {\n              \"type\" : \"string\",\n              \"enum\" : [ \"UNCONSUMED\", \"CONSUMED\", \"ALL\" ]\n            },\n            \"contractStateTypes\" : {\n              \"uniqueItems\" : true,\n              \"type\" : \"array\",\n              \"items\" : {\n                \"type\" : \"string\",\n                \"description\" : \"Java class name\",\n                \"example\" : \"java.lang.Object\"\n              }\n            },\n            \"relevancyStatus\" : {\n              \"type\" : \"string\",\n              \"enum\" : [ \"RELEVANT\", \"NOT_RELEVANT\", \"ALL\" ]\n            },\n            \"constraintTypes\" : {\n              \"uniqueItems\" : true,\n              \"type\" : \"array\",\n              \"items\" : {\n                \"type\" : \"string\",\n                \"enum\" : [ \"ALWAYS_ACCEPT\", \"HASH\", \"CZ_WHITELISTED\", \"SIGNATURE\" ]\n              }\n            },\n            \"constraints\" : {\n              \"uniqueItems\" : true,\n              \"type\" : \"array\",\n              \"items\" : {\n                \"$ref\" : \"#/components/schemas/net.corda.core.node.services.Vault_ConstraintInfo\"\n              }\n            }\n          }\n        } ]\n      },\n      \"net.corda.core.node.services.vault.QueryCriteria_OrComposition\" : {\n        \"required\" : [ \"a\", \"b\" ],\n        \"type\" : \"object\",\n        \"allOf\" : [ {\n          \"$ref\" : \"#/components/schemas/net.corda.core.node.services.vault.QueryCriteria\"\n        }, {\n          \"type\" : \"object\",\n          \"properties\" : {\n            \"a\" : {\n              \"$ref\" : \"#/components/schemas/net.corda.core.node.services.vault.QueryCriteria\"\n            },\n            \"b\" : {\n              \"$ref\" : \"#/components/schemas/net.corda.core.node.services.vault.QueryCriteria\"\n            }\n          }\n        } ]\n      },\n      \"net.corda.core.node.services.vault.QueryCriteria_SoftLockingCondition\" : {\n        \"required\" : [ \"lockIds\", \"type\" ],\n        \"type\" : \"object\",\n        \"properties\" : {\n          \"type\" : {\n            \"type\" : \"string\",\n            \"enum\" : [ \"UNLOCKED_ONLY\", \"LOCKED_ONLY\", \"SPECIFIED\", \"UNLOCKED_AND_SPECIFIED\" ]\n          },\n          \"lockIds\" : {\n            \"type\" : \"array\",\n            \"items\" : {\n              \"type\" : \"string\",\n              \"format\" : \"uuid\"\n            }\n          }\n        }\n      },\n      \"net.corda.core.node.services.vault.QueryCriteria_TimeCondition\" : {\n        \"required\" : [ \"type\" ],\n        \"type\" : \"object\",\n        \"properties\" : {\n          \"type\" : {\n            \"type\" : \"string\",\n            \"enum\" : [ \"RECORDED\", \"CONSUMED\" ]\n          },\n          \"predicate\" : {\n            \"$ref\" : \"#/components/schemas/net.corda.core.node.services.vault.ColumnPredicate_Instant\"\n          }\n        }\n      },\n      \"net.corda.core.node.services.vault.QueryCriteria_VaultCustomQueryCriteria\" : {\n        \"required\" : [ \"constraintTypes\", \"constraints\", \"expression\", \"relevancyStatus\", \"status\" ],\n        \"type\" : \"object\",\n        \"allOf\" : [ {\n          \"$ref\" : \"#/components/schemas/net.corda.core.node.services.vault.QueryCriteria\"\n        }, {\n          \"type\" : \"object\",\n          \"properties\" : {\n            \"expression\" : {\n              \"$ref\" : \"#/components/schemas/net.corda.core.node.services.vault.CriteriaExpression_net_corda_core_schemas_StatePersistable_Boolean\"\n            },\n            \"status\" : {\n              \"type\" : \"string\",\n              \"enum\" : [ \"UNCONSUMED\", \"CONSUMED\", \"ALL\" ]\n            },\n            \"contractStateTypes\" : {\n              \"uniqueItems\" : true,\n              \"type\" : \"array\",\n              \"items\" : {\n                \"type\" : \"string\",\n                \"description\" : \"Java class name\",\n                \"example\" : \"java.lang.Object\"\n              }\n            },\n            \"relevancyStatus\" : {\n              \"type\" : \"string\",\n              \"enum\" : [ \"RELEVANT\", \"NOT_RELEVANT\", \"ALL\" ]\n            },\n            \"constraintTypes\" : {\n              \"uniqueItems\" : true,\n              \"type\" : \"array\",\n              \"items\" : {\n                \"type\" : \"string\",\n                \"enum\" : [ \"ALWAYS_ACCEPT\", \"HASH\", \"CZ_WHITELISTED\", \"SIGNATURE\" ]\n              }\n            },\n            \"constraints\" : {\n              \"uniqueItems\" : true,\n              \"type\" : \"array\",\n              \"items\" : {\n                \"$ref\" : \"#/components/schemas/net.corda.core.node.services.Vault_ConstraintInfo\"\n              }\n            },\n            \"participants\" : {\n              \"type\" : \"array\",\n              \"items\" : {\n                \"$ref\" : \"#/components/schemas/net.corda.core.identity.AbstractParty\"\n              }\n            }\n          }\n        } ]\n      },\n      \"net.corda.core.node.services.vault.QueryCriteria_VaultQueryCriteria\" : {\n        \"required\" : [ \"constraintTypes\", \"constraints\", \"relevancyStatus\", \"status\" ],\n        \"type\" : \"object\",\n        \"allOf\" : [ {\n          \"$ref\" : \"#/components/schemas/net.corda.core.node.services.vault.QueryCriteria\"\n        }, {\n          \"type\" : \"object\",\n          \"properties\" : {\n            \"status\" : {\n              \"type\" : \"string\",\n              \"enum\" : [ \"UNCONSUMED\", \"CONSUMED\", \"ALL\" ]\n            },\n            \"contractStateTypes\" : {\n              \"uniqueItems\" : true,\n              \"type\" : \"array\",\n              \"items\" : {\n                \"type\" : \"string\",\n                \"description\" : \"Java class name\",\n                \"example\" : \"java.lang.Object\"\n              }\n            },\n            \"stateRefs\" : {\n              \"type\" : \"array\",\n              \"items\" : {\n                \"$ref\" : \"#/components/schemas/net.corda.core.contracts.StateRef\"\n              }\n            },\n            \"notary\" : {\n              \"type\" : \"array\",\n              \"items\" : {\n                \"$ref\" : \"#/components/schemas/net.corda.core.identity.AbstractParty\"\n              }\n            },\n            \"softLockingCondition\" : {\n              \"$ref\" : \"#/components/schemas/net.corda.core.node.services.vault.QueryCriteria_SoftLockingCondition\"\n            },\n            \"timeCondition\" : {\n              \"$ref\" : \"#/components/schemas/net.corda.core.node.services.vault.QueryCriteria_TimeCondition\"\n            },\n            \"relevancyStatus\" : {\n              \"type\" : \"string\",\n              \"enum\" : [ \"RELEVANT\", \"NOT_RELEVANT\", \"ALL\" ]\n            },\n            \"constraintTypes\" : {\n              \"uniqueItems\" : true,\n              \"type\" : \"array\",\n              \"items\" : {\n                \"type\" : \"string\",\n                \"enum\" : [ \"ALWAYS_ACCEPT\", \"HASH\", \"CZ_WHITELISTED\", \"SIGNATURE\" ]\n              }\n            },\n            \"constraints\" : {\n              \"uniqueItems\" : true,\n              \"type\" : \"array\",\n              \"items\" : {\n                \"$ref\" : \"#/components/schemas/net.corda.core.node.services.Vault_ConstraintInfo\"\n              }\n            },\n            \"participants\" : {\n              \"type\" : \"array\",\n              \"items\" : {\n                \"$ref\" : \"#/components/schemas/net.corda.core.identity.AbstractParty\"\n              }\n            }\n          }\n        } ]\n      },\n      \"net.corda.core.node.services.vault.Sort\" : {\n        \"required\" : [ \"columns\" ],\n        \"type\" : \"object\",\n        \"properties\" : {\n          \"columns\" : {\n            \"type\" : \"array\",\n            \"items\" : {\n              \"$ref\" : \"#/components/schemas/net.corda.core.node.services.vault.Sort_SortColumn\"\n            }\n          }\n        }\n      },\n      \"net.corda.core.node.services.vault.SortAttribute\" : {\n        \"type\" : \"object\"\n      },\n      \"net.corda.core.node.services.vault.Sort_SortColumn\" : {\n        \"required\" : [ \"direction\" ],\n        \"type\" : \"object\",\n        \"properties\" : {\n          \"sortAttribute\" : {\n            \"$ref\" : \"#/components/schemas/net.corda.core.node.services.vault.SortAttribute\"\n          },\n          \"direction\" : {\n            \"type\" : \"string\",\n            \"enum\" : [ \"ASC\", \"DESC\" ]\n          }\n        }\n      },\n      \"generated.net.corda.core.flows.ContractUpgradeFlow_AuthorisePayload\" : {\n        \"type\" : \"object\",\n        \"properties\" : {\n          \"stateAndRef\" : {\n            \"$ref\" : \"#/components/schemas/net.corda.core.contracts.StateAndRef_Object\"\n          },\n          \"upgradedContractClass\" : {\n            \"type\" : \"string\",\n            \"description\" : \"Java class name\",\n            \"example\" : \"java.lang.Object\"\n          }\n        }\n      },\n      \"net.corda.core.contracts.StateAndRef_Object\" : {\n        \"type\" : \"object\",\n        \"properties\" : {\n          \"state\" : {\n            \"$ref\" : \"#/components/schemas/net.corda.core.contracts.TransactionState_Object\"\n          },\n          \"ref\" : {\n            \"$ref\" : \"#/components/schemas/net.corda.core.contracts.StateRef\"\n          }\n        }\n      },\n      \"net.corda.core.contracts.TransactionState_Object\" : {\n        \"required\" : [ \"contract\", \"data\" ],\n        \"type\" : \"object\",\n        \"properties\" : {\n          \"data\" : {\n            \"type\" : \"object\"\n          },\n          \"contract\" : {\n            \"type\" : \"string\"\n          },\n          \"notary\" : {\n            \"$ref\" : \"#/components/schemas/net.corda.core.identity.Party\"\n          },\n          \"encumbrance\" : {\n            \"type\" : \"integer\",\n            \"format\" : \"int32\"\n          },\n          \"constraint\" : {\n            \"$ref\" : \"#/components/schemas/net.corda.core.contracts.AttachmentConstraint\"\n          }\n        }\n      },\n      \"generated.net.corda.core.flows.ContractUpgradeFlow_DeauthorisePayload\" : {\n        \"type\" : \"object\",\n        \"properties\" : {\n          \"stateRef\" : {\n            \"$ref\" : \"#/components/schemas/net.corda.core.contracts.StateRef\"\n          }\n        }\n      },\n      \"net.corda.client.jackson.JacksonSupport_SignedTransactionMixin\" : {\n        \"required\" : [ \"signatures\", \"transaction\" ],\n        \"type\" : \"object\",\n        \"properties\" : {\n          \"transaction\" : {\n            \"$ref\" : \"#/components/schemas/net.corda.core.transactions.CoreTransaction\"\n          },\n          \"signatures\" : {\n            \"type\" : \"array\",\n            \"items\" : {\n              \"type\" : \"string\",\n              \"description\" : \"Hex encoded Byte Array\",\n              \"example\" : \"736F6D654279746573\"\n            }\n          }\n        }\n      },\n      \"net.corda.core.transactions.BaseTransaction\" : {\n        \"required\" : [ \"id\", \"inputs\", \"outputStates\", \"outputs\", \"references\" ],\n        \"type\" : \"object\",\n        \"properties\" : {\n          \"inputs\" : {\n            \"type\" : \"array\",\n            \"items\" : {\n              \"type\" : \"object\"\n            }\n          },\n          \"references\" : {\n            \"type\" : \"array\",\n            \"items\" : {\n              \"type\" : \"object\"\n            }\n          },\n          \"notary\" : {\n            \"$ref\" : \"#/components/schemas/net.corda.core.identity.Party\"\n          },\n          \"outputs\" : {\n            \"type\" : \"array\",\n            \"items\" : {\n              \"$ref\" : \"#/components/schemas/net.corda.core.contracts.TransactionState_net_corda_core_contracts_ContractState\"\n            }\n          },\n          \"outputStates\" : {\n            \"type\" : \"array\",\n            \"items\" : {\n              \"$ref\" : \"#/components/schemas/net.corda.core.contracts.ContractState\"\n            }\n          },\n          \"id\" : {\n            \"type\" : \"string\",\n            \"description\" : \"Base 58 Encoded Secure Hash\",\n            \"example\" : \"GfHq2tTVk9z4eXgyUuofmR16H6j7srXt8BCyidKdrZL5JEwFqHgDSuiinbTE\"\n          }\n        }\n      },\n      \"net.corda.core.transactions.CoreTransaction\" : {\n        \"required\" : [ \"id\", \"inputs\", \"outputStates\", \"outputs\", \"references\" ],\n        \"type\" : \"object\",\n        \"properties\" : {\n          \"inputs\" : {\n            \"type\" : \"array\",\n            \"items\" : {\n              \"$ref\" : \"#/components/schemas/net.corda.core.contracts.StateRef\"\n            }\n          },\n          \"references\" : {\n            \"type\" : \"array\",\n            \"items\" : {\n              \"$ref\" : \"#/components/schemas/net.corda.core.contracts.StateRef\"\n            }\n          },\n          \"networkParametersHash\" : {\n            \"type\" : \"string\",\n            \"description\" : \"Base 58 Encoded Secure Hash\",\n            \"example\" : \"GfHq2tTVk9z4eXgyUuofmR16H6j7srXt8BCyidKdrZL5JEwFqHgDSuiinbTE\"\n          },\n          \"notary\" : {\n            \"$ref\" : \"#/components/schemas/net.corda.core.identity.Party\"\n          },\n          \"outputs\" : {\n            \"type\" : \"array\",\n            \"items\" : {\n              \"$ref\" : \"#/components/schemas/net.corda.core.contracts.TransactionState_net_corda_core_contracts_ContractState\"\n            }\n          },\n          \"outputStates\" : {\n            \"type\" : \"array\",\n            \"items\" : {\n              \"$ref\" : \"#/components/schemas/net.corda.core.contracts.ContractState\"\n            }\n          },\n          \"id\" : {\n            \"type\" : \"string\",\n            \"description\" : \"Base 58 Encoded Secure Hash\",\n            \"example\" : \"GfHq2tTVk9z4eXgyUuofmR16H6j7srXt8BCyidKdrZL5JEwFqHgDSuiinbTE\"\n          }\n        }\n      },\n      \"net.corda.core.transactions.SignedTransaction\" : {\n        \"required\" : [ \"missingSigners\", \"notaryChangeTransaction\", \"references\", \"signatures\" ],\n        \"type\" : \"object\",\n        \"properties\" : {\n          \"signatures\" : {\n            \"type\" : \"array\",\n            \"items\" : {\n              \"type\" : \"string\",\n              \"description\" : \"Hex encoded Byte Array\",\n              \"example\" : \"736F6D654279746573\"\n            }\n          },\n          \"coreTransaction\" : {\n            \"$ref\" : \"#/components/schemas/net.corda.core.transactions.CoreTransaction\"\n          },\n          \"references\" : {\n            \"type\" : \"array\",\n            \"items\" : {\n              \"$ref\" : \"#/components/schemas/net.corda.core.contracts.StateRef\"\n            }\n          },\n          \"networkParametersHash\" : {\n            \"type\" : \"string\",\n            \"description\" : \"Base 58 Encoded Secure Hash\",\n            \"example\" : \"GfHq2tTVk9z4eXgyUuofmR16H6j7srXt8BCyidKdrZL5JEwFqHgDSuiinbTE\"\n          },\n          \"notaryChangeTransaction\" : {\n            \"type\" : \"boolean\"\n          },\n          \"missingSigners\" : {\n            \"uniqueItems\" : true,\n            \"type\" : \"array\",\n            \"items\" : {\n              \"type\" : \"string\",\n              \"description\" : \"Base 58 Encoded Public Key\",\n              \"example\" : \"GfHq2tTVk9z4eXgyUuofmR16H6j7srXt8BCyidKdrZL5JEwFqHgDSuiinbTE\"\n            }\n          }\n        }\n      },\n      \"net.corda.finance.flows.AbstractCashFlow_Result\" : {\n        \"type\" : \"object\",\n        \"properties\" : {\n          \"stx\" : {\n            \"$ref\" : \"#/components/schemas/net.corda.core.transactions.SignedTransaction\"\n          },\n          \"recipient\" : {\n            \"$ref\" : \"#/components/schemas/net.corda.core.identity.AbstractParty\"\n          }\n        }\n      },\n      \"AmountCurrency\" : {\n        \"required\" : [ \"displayTokenSize\", \"quantity\", \"token\" ],\n        \"type\" : \"object\",\n        \"properties\" : {\n          \"quantity\" : {\n            \"type\" : \"integer\",\n            \"description\" : \"total amount in minor units\",\n            \"format\" : \"int32\",\n            \"example\" : 100\n          },\n          \"displayTokenSize\" : {\n            \"type\" : \"number\",\n            \"example\" : 0.01\n          },\n          \"token\" : {\n            \"type\" : \"string\",\n            \"example\" : \"GBP\"\n          }\n        }\n      },\n      \"generated.net.corda.finance.flows.CashExitFlowPayload\" : {\n        \"type\" : \"object\",\n        \"properties\" : {\n          \"amount\" : {\n            \"$ref\" : \"#/components/schemas/AmountCurrency\"\n          },\n          \"issuerRef\" : {\n            \"type\" : \"string\",\n            \"description\" : \"Hex encoded Byte Array\",\n            \"example\" : \"736F6D654279746573\"\n          }\n        }\n      },\n      \"generated.net.corda.finance.flows.CashIssueAndPaymentFlowPayload\" : {\n        \"type\" : \"object\",\n        \"properties\" : {\n          \"amount\" : {\n            \"$ref\" : \"#/components/schemas/AmountCurrency\"\n          },\n          \"issueRef\" : {\n            \"type\" : \"string\",\n            \"description\" : \"Hex encoded Byte Array\",\n            \"example\" : \"736F6D654279746573\"\n          },\n          \"recipient\" : {\n            \"$ref\" : \"#/components/schemas/net.corda.core.identity.Party\"\n          },\n          \"anonymous\" : {\n            \"type\" : \"boolean\"\n          },\n          \"notary\" : {\n            \"$ref\" : \"#/components/schemas/net.corda.core.identity.Party\"\n          }\n        }\n      },\n      \"generated.net.corda.finance.flows.CashIssueFlowPayload\" : {\n        \"type\" : \"object\",\n        \"properties\" : {\n          \"amount\" : {\n            \"$ref\" : \"#/components/schemas/AmountCurrency\"\n          },\n          \"issuerBankPartyRef\" : {\n            \"type\" : \"string\",\n            \"description\" : \"Hex encoded Byte Array\",\n            \"example\" : \"736F6D654279746573\"\n          },\n          \"notary\" : {\n            \"$ref\" : \"#/components/schemas/net.corda.core.identity.Party\"\n          }\n        }\n      },\n      \"generated.net.corda.finance.flows.CashPaymentFlowPayload\" : {\n        \"type\" : \"object\",\n        \"properties\" : {\n          \"amount\" : {\n            \"$ref\" : \"#/components/schemas/AmountCurrency\"\n          },\n          \"recipient\" : {\n            \"$ref\" : \"#/components/schemas/net.corda.core.identity.Party\"\n          },\n          \"anonymous\" : {\n            \"type\" : \"boolean\"\n          },\n          \"issuerConstraint\" : {\n            \"uniqueItems\" : true,\n            \"type\" : \"array\",\n            \"items\" : {\n              \"$ref\" : \"#/components/schemas/net.corda.core.identity.Party\"\n            }\n          },\n          \"notary\" : {\n            \"$ref\" : \"#/components/schemas/net.corda.core.identity.Party\"\n          }\n        }\n      },\n      \"net.corda.finance.internal.CashConfiguration\" : {\n        \"required\" : [ \"issuableCurrencies\", \"supportedCurrencies\" ],\n        \"type\" : \"object\",\n        \"properties\" : {\n          \"issuableCurrencies\" : {\n            \"type\" : \"array\",\n            \"items\" : {\n              \"type\" : \"string\",\n              \"description\" : \"3 digit ISO 4217 code of the currency\",\n              \"example\" : \"GBP\"\n            }\n          },\n          \"supportedCurrencies\" : {\n            \"type\" : \"array\",\n            \"items\" : {\n              \"type\" : \"string\",\n              \"description\" : \"3 digit ISO 4217 code of the currency\",\n              \"example\" : \"GBP\"\n            }\n          }\n        }\n      },\n      \"generated.net.corda.finance.internal.CashConfigDataFlowPayload\" : {\n        \"type\" : \"object\"\n      },\n      \"generated.net.corda.examples.obligation.flows.IssueObligation_InitiatorPayload\" : {\n        \"type\" : \"object\",\n        \"properties\" : {\n          \"amount\" : {\n            \"$ref\" : \"#/components/schemas/AmountCurrency\"\n          },\n          \"lender\" : {\n            \"$ref\" : \"#/components/schemas/net.corda.core.identity.Party\"\n          },\n          \"anonymous\" : {\n            \"type\" : \"boolean\"\n          }\n        }\n      },\n      \"generated.net.corda.examples.obligation.flows.SettleObligation_InitiatorPayload\" : {\n        \"type\" : \"object\",\n        \"properties\" : {\n          \"linearId\" : {\n            \"$ref\" : \"#/components/schemas/net.corda.core.contracts.UniqueIdentifier\"\n          },\n          \"amount\" : {\n            \"$ref\" : \"#/components/schemas/AmountCurrency\"\n          },\n          \"anonymous\" : {\n            \"type\" : \"boolean\"\n          }\n        }\n      },\n      \"net.corda.core.contracts.UniqueIdentifier\" : {\n        \"required\" : [ \"id\" ],\n        \"type\" : \"object\",\n        \"properties\" : {\n          \"externalId\" : {\n            \"type\" : \"string\"\n          },\n          \"id\" : {\n            \"type\" : \"string\",\n            \"format\" : \"uuid\"\n          }\n        }\n      },\n      \"generated.net.corda.examples.obligation.flows.TransferObligation_InitiatorPayload\" : {\n        \"type\" : \"object\",\n        \"properties\" : {\n          \"linearId\" : {\n            \"$ref\" : \"#/components/schemas/net.corda.core.contracts.UniqueIdentifier\"\n          },\n          \"newLender\" : {\n            \"$ref\" : \"#/components/schemas/net.corda.core.identity.Party\"\n          },\n          \"anonymous\" : {\n            \"type\" : \"boolean\"\n          }\n        }\n      },\n      \"net.corda.core.context.Actor\" : {\n        \"required\" : [ \"owningLegalIdentity\" ],\n        \"type\" : \"object\",\n        \"properties\" : {\n          \"id\" : {\n            \"$ref\" : \"#/components/schemas/net.corda.core.context.Actor_Id\"\n          },\n          \"serviceId\" : {\n            \"$ref\" : \"#/components/schemas/net.corda.core.context.AuthServiceId\"\n          },\n          \"owningLegalIdentity\" : {\n            \"type\" : \"string\",\n            \"description\" : \"CordaX500Name encoded Party\",\n            \"example\" : \"O=Bank A, L=London, C=GB\"\n          }\n        }\n      },\n      \"net.corda.core.context.Actor_Id\" : {\n        \"required\" : [ \"value\" ],\n        \"type\" : \"object\",\n        \"properties\" : {\n          \"value\" : {\n            \"type\" : \"string\"\n          }\n        }\n      },\n      \"net.corda.core.context.AuthServiceId\" : {\n        \"required\" : [ \"value\" ],\n        \"type\" : \"object\",\n        \"properties\" : {\n          \"value\" : {\n            \"type\" : \"string\"\n          }\n        }\n      },\n      \"net.corda.core.context.InvocationContext\" : {\n        \"type\" : \"object\",\n        \"properties\" : {\n          \"origin\" : {\n            \"$ref\" : \"#/components/schemas/net.corda.core.context.InvocationOrigin\"\n          },\n          \"trace\" : {\n            \"$ref\" : \"#/components/schemas/net.corda.core.context.Trace\"\n          },\n          \"actor\" : {\n            \"$ref\" : \"#/components/schemas/net.corda.core.context.Actor\"\n          },\n          \"externalTrace\" : {\n            \"$ref\" : \"#/components/schemas/net.corda.core.context.Trace\"\n          },\n          \"impersonatedActor\" : {\n            \"$ref\" : \"#/components/schemas/net.corda.core.context.Actor\"\n          }\n        }\n      },\n      \"net.corda.core.context.InvocationOrigin\" : {\n        \"type\" : \"object\"\n      },\n      \"net.corda.core.context.Trace\" : {\n        \"type\" : \"object\",\n        \"properties\" : {\n          \"invocationId\" : {\n            \"$ref\" : \"#/components/schemas/net.corda.core.context.Trace_InvocationId\"\n          },\n          \"sessionId\" : {\n            \"$ref\" : \"#/components/schemas/net.corda.core.context.Trace_SessionId\"\n          }\n        }\n      },\n      \"net.corda.core.context.Trace_InvocationId\" : {\n        \"required\" : [ \"timestamp\", \"value\" ],\n        \"type\" : \"object\",\n        \"properties\" : {\n          \"value\" : {\n            \"type\" : \"string\"\n          },\n          \"timestamp\" : {\n            \"type\" : \"string\",\n            \"description\" : \"JSR310 encoded time representation of Instant\"\n          },\n          \"entityType\" : {\n            \"type\" : \"string\"\n          }\n        }\n      },\n      \"net.corda.core.context.Trace_SessionId\" : {\n        \"required\" : [ \"timestamp\", \"value\" ],\n        \"type\" : \"object\",\n        \"properties\" : {\n          \"value\" : {\n            \"type\" : \"string\"\n          },\n          \"timestamp\" : {\n            \"type\" : \"string\",\n            \"description\" : \"JSR310 encoded time representation of Instant\"\n          },\n          \"entityType\" : {\n            \"type\" : \"string\"\n          }\n        }\n      },\n      \"net.corda.core.utilities.Id\" : {\n        \"required\" : [ \"timestamp\", \"value\" ],\n        \"type\" : \"object\",\n        \"properties\" : {\n          \"value\" : {\n            \"type\" : \"object\"\n          },\n          \"entityType\" : {\n            \"type\" : \"string\"\n          },\n          \"timestamp\" : {\n            \"type\" : \"string\",\n            \"description\" : \"JSR310 encoded time representation of Instant\"\n          }\n        }\n      },\n      \"net.corda.core.context.InvocationOrigin_Peer\" : {\n        \"required\" : [ \"party\" ],\n        \"type\" : \"object\",\n        \"properties\" : {\n          \"party\" : {\n            \"type\" : \"string\",\n            \"description\" : \"CordaX500Name encoded Party\",\n            \"example\" : \"O=Bank A, L=London, C=GB\"\n          }\n        }\n      },\n      \"net.corda.core.context.InvocationOrigin_RPC\" : {\n        \"type\" : \"object\",\n        \"properties\" : {\n          \"actor\" : {\n            \"$ref\" : \"#/components/schemas/net.corda.core.context.Actor\"\n          }\n        }\n      },\n      \"net.corda.core.context.InvocationOrigin_Scheduled\" : {\n        \"type\" : \"object\",\n        \"properties\" : {\n          \"scheduledState\" : {\n            \"$ref\" : \"#/components/schemas/net.corda.core.contracts.ScheduledStateRef\"\n          }\n        }\n      },\n      \"net.corda.core.contracts.ScheduledStateRef\" : {\n        \"required\" : [ \"scheduledAt\" ],\n        \"type\" : \"object\",\n        \"properties\" : {\n          \"ref\" : {\n            \"$ref\" : \"#/components/schemas/net.corda.core.contracts.StateRef\"\n          },\n          \"scheduledAt\" : {\n            \"type\" : \"string\",\n            \"description\" : \"JSR310 encoded time representation of Instant\"\n          }\n        }\n      },\n      \"net.corda.core.context.InvocationOrigin_Service\" : {\n        \"required\" : [ \"owningLegalIdentity\", \"serviceClassName\" ],\n        \"type\" : \"object\",\n        \"properties\" : {\n          \"serviceClassName\" : {\n            \"type\" : \"string\"\n          },\n          \"owningLegalIdentity\" : {\n            \"type\" : \"string\",\n            \"description\" : \"CordaX500Name encoded Party\",\n            \"example\" : \"O=Bank A, L=London, C=GB\"\n          }\n        }\n      },\n      \"net.corda.core.context.InvocationOrigin_Shell\" : {\n        \"type\" : \"object\"\n      },\n      \"net.corda.core.contracts.AmountTransfer\" : {\n        \"required\" : [ \"destination\", \"quantityDelta\", \"source\", \"token\" ],\n        \"type\" : \"object\",\n        \"properties\" : {\n          \"quantityDelta\" : {\n            \"type\" : \"integer\",\n            \"format\" : \"int64\"\n          },\n          \"destination\" : {\n            \"type\" : \"object\"\n          }\n        }\n      },\n      \"net.corda.core.contracts.LinearPointer\" : {\n        \"required\" : [ \"type\" ],\n        \"type\" : \"object\",\n        \"properties\" : {\n          \"pointer\" : {\n            \"$ref\" : \"#/components/schemas/net.corda.core.contracts.UniqueIdentifier\"\n          },\n          \"type\" : {\n            \"type\" : \"string\",\n            \"description\" : \"Java class name\",\n            \"example\" : \"java.lang.Object\"\n          }\n        }\n      },\n      \"net.corda.core.contracts.StatePointer\" : {\n        \"required\" : [ \"pointer\", \"type\" ],\n        \"type\" : \"object\",\n        \"properties\" : {\n          \"type\" : {\n            \"type\" : \"string\",\n            \"description\" : \"Java class name\",\n            \"example\" : \"java.lang.Object\"\n          },\n          \"pointer\" : {\n            \"type\" : \"object\"\n          }\n        }\n      },\n      \"net.corda.core.contracts.StaticPointer\" : {\n        \"required\" : [ \"type\" ],\n        \"type\" : \"object\",\n        \"properties\" : {\n          \"pointer\" : {\n            \"$ref\" : \"#/components/schemas/net.corda.core.contracts.StateRef\"\n          },\n          \"type\" : {\n            \"type\" : \"string\",\n            \"description\" : \"Java class name\",\n            \"example\" : \"java.lang.Object\"\n          }\n        }\n      },\n      \"net.corda.core.contracts.TransactionState\" : {\n        \"required\" : [ \"contract\" ],\n        \"type\" : \"object\",\n        \"properties\" : {\n          \"data\" : {\n            \"$ref\" : \"#/components/schemas/net.corda.core.contracts.ContractState\"\n          },\n          \"contract\" : {\n            \"type\" : \"string\"\n          },\n          \"notary\" : {\n            \"$ref\" : \"#/components/schemas/net.corda.core.identity.Party\"\n          },\n          \"encumbrance\" : {\n            \"type\" : \"integer\",\n            \"format\" : \"int32\"\n          },\n          \"constraint\" : {\n            \"$ref\" : \"#/components/schemas/net.corda.core.contracts.AttachmentConstraint\"\n          }\n        }\n      },\n      \"net.corda.core.flows.AbstractStateReplacementFlow_Proposal\" : {\n        \"required\" : [ \"modification\" ],\n        \"type\" : \"object\",\n        \"properties\" : {\n          \"stateRef\" : {\n            \"$ref\" : \"#/components/schemas/net.corda.core.contracts.StateRef\"\n          },\n          \"modification\" : {\n            \"type\" : \"object\"\n          }\n        }\n      },\n      \"net.corda.core.flows.FlowInfo\" : {\n        \"required\" : [ \"appName\", \"flowVersion\" ],\n        \"type\" : \"object\",\n        \"properties\" : {\n          \"flowVersion\" : {\n            \"type\" : \"integer\",\n            \"format\" : \"int32\"\n          },\n          \"appName\" : {\n            \"type\" : \"string\"\n          }\n        }\n      },\n      \"net.corda.core.flows.NotarisationPayload\" : {\n        \"required\" : [ \"transaction\" ],\n        \"type\" : \"object\",\n        \"properties\" : {\n          \"transaction\" : {\n            \"type\" : \"object\"\n          },\n          \"requestSignature\" : {\n            \"$ref\" : \"#/components/schemas/net.corda.core.flows.NotarisationRequestSignature\"\n          },\n          \"signedTransaction\" : {\n            \"$ref\" : \"#/components/schemas/net.corda.core.transactions.SignedTransaction\"\n          },\n          \"coreTransaction\" : {\n            \"$ref\" : \"#/components/schemas/net.corda.core.transactions.CoreTransaction\"\n          }\n        }\n      },\n      \"net.corda.core.flows.NotarisationRequestSignature\" : {\n        \"required\" : [ \"digitalSignature\", \"platformVersion\" ],\n        \"type\" : \"object\",\n        \"properties\" : {\n          \"digitalSignature\" : {\n            \"type\" : \"string\",\n            \"description\" : \"Hex encoded Byte Array\",\n            \"example\" : \"736F6D654279746573\"\n          },\n          \"platformVersion\" : {\n            \"type\" : \"integer\",\n            \"format\" : \"int32\"\n          }\n        }\n      },\n      \"net.corda.core.flows.NotarisationRequest\" : {\n        \"required\" : [ \"statesToConsume\", \"transactionId\" ],\n        \"type\" : \"object\",\n        \"properties\" : {\n          \"statesToConsume\" : {\n            \"type\" : \"array\",\n            \"items\" : {\n              \"$ref\" : \"#/components/schemas/net.corda.core.contracts.StateRef\"\n            }\n          },\n          \"transactionId\" : {\n            \"type\" : \"string\",\n            \"description\" : \"Base 58 Encoded Secure Hash\",\n            \"example\" : \"GfHq2tTVk9z4eXgyUuofmR16H6j7srXt8BCyidKdrZL5JEwFqHgDSuiinbTE\"\n          }\n        }\n      },\n      \"net.corda.core.flows.NotarisationResponse\" : {\n        \"required\" : [ \"signatures\" ],\n        \"type\" : \"object\",\n        \"properties\" : {\n          \"signatures\" : {\n            \"type\" : \"array\",\n            \"items\" : {\n              \"type\" : \"string\",\n              \"description\" : \"Hex encoded Byte Array\",\n              \"example\" : \"736F6D654279746573\"\n            }\n          }\n        }\n      },\n      \"net.corda.core.flows.NotaryError\" : {\n        \"type\" : \"object\"\n      },\n      \"net.corda.core.flows.NotaryError_Conflict\" : {\n        \"required\" : [ \"consumedStates\", \"txId\" ],\n        \"type\" : \"object\",\n        \"properties\" : {\n          \"txId\" : {\n            \"type\" : \"string\",\n            \"description\" : \"Base 58 Encoded Secure Hash\",\n            \"example\" : \"GfHq2tTVk9z4eXgyUuofmR16H6j7srXt8BCyidKdrZL5JEwFqHgDSuiinbTE\"\n          },\n          \"consumedStates\" : {\n            \"type\" : \"object\",\n            \"additionalProperties\" : {\n              \"$ref\" : \"#/components/schemas/net.corda.core.flows.StateConsumptionDetails\"\n            }\n          }\n        }\n      },\n      \"net.corda.core.flows.StateConsumptionDetails\" : {\n        \"required\" : [ \"hashOfTransactionId\", \"type\" ],\n        \"type\" : \"object\",\n        \"properties\" : {\n          \"hashOfTransactionId\" : {\n            \"type\" : \"string\",\n            \"description\" : \"Base 58 Encoded Secure Hash\",\n            \"example\" : \"GfHq2tTVk9z4eXgyUuofmR16H6j7srXt8BCyidKdrZL5JEwFqHgDSuiinbTE\"\n          },\n          \"type\" : {\n            \"type\" : \"string\",\n            \"enum\" : [ \"INPUT_STATE\", \"REFERENCE_INPUT_STATE\" ]\n          }\n        }\n      },\n      \"net.corda.core.flows.NotaryError_General\" : {\n        \"type\" : \"object\",\n        \"properties\" : {\n          \"cause\" : {\n            \"$ref\" : \"#/components/schemas/InvocationError\"\n          }\n        }\n      },\n      \"net.corda.core.flows.NotaryError_RequestSignatureInvalid\" : {\n        \"type\" : \"object\",\n        \"properties\" : {\n          \"cause\" : {\n            \"$ref\" : \"#/components/schemas/InvocationError\"\n          }\n        }\n      },\n      \"io.bluebank.braid.corda.serialisation.mixin.TimeWindowMixin\" : {\n        \"type\" : \"object\"\n      },\n      \"net.corda.core.contracts.TimeWindow\" : {\n        \"type\" : \"object\",\n        \"properties\" : {\n          \"untilTime\" : {\n            \"type\" : \"string\",\n            \"description\" : \"JSR310 encoded time representation of Instant\"\n          },\n          \"midpoint\" : {\n            \"type\" : \"string\",\n            \"description\" : \"JSR310 encoded time representation of Instant\"\n          },\n          \"fromTime\" : {\n            \"type\" : \"string\",\n            \"description\" : \"JSR310 encoded time representation of Instant\"\n          }\n        }\n      },\n      \"net.corda.core.flows.NotaryError_TimeWindowInvalid\" : {\n        \"required\" : [ \"currentTime\" ],\n        \"type\" : \"object\",\n        \"properties\" : {\n          \"currentTime\" : {\n            \"type\" : \"string\",\n            \"description\" : \"JSR310 encoded time representation of Instant\"\n          },\n          \"txTimeWindow\" : {\n            \"$ref\" : \"#/components/schemas/net.corda.core.contracts.TimeWindow\"\n          }\n        }\n      },\n      \"net.corda.core.flows.NotaryError_TransactionInvalid\" : {\n        \"type\" : \"object\",\n        \"properties\" : {\n          \"cause\" : {\n            \"$ref\" : \"#/components/schemas/InvocationError\"\n          }\n        }\n      },\n      \"net.corda.core.flows.NotaryError_WrongNotary\" : {\n        \"type\" : \"object\"\n      },\n      \"net.corda.core.flows.WaitTimeUpdate\" : {\n        \"required\" : [ \"waitTime\" ],\n        \"type\" : \"object\",\n        \"properties\" : {\n          \"waitTime\" : {\n            \"type\" : \"string\",\n            \"description\" : \"JSR310 encoded time representation of Duration\"\n          }\n        }\n      },\n      \"net.corda.core.identity.PartyAndCertificate\" : {\n        \"required\" : [ \"certPath\", \"certificate\", \"name\", \"owningKey\" ],\n        \"type\" : \"object\",\n        \"properties\" : {\n          \"certPath\" : {\n            \"type\" : \"string\",\n            \"description\" : \"X509 encoded certificate PKI path\",\n            \"format\" : \"byte\"\n          },\n          \"certificate\" : {\n            \"type\" : \"string\",\n            \"description\" : \"X509 encoded certificate\",\n            \"format\" : \"byte\"\n          },\n          \"party\" : {\n            \"$ref\" : \"#/components/schemas/net.corda.core.identity.Party\"\n          },\n          \"name\" : {\n            \"type\" : \"string\",\n            \"description\" : \"CordaX500Name encoded Party\",\n            \"example\" : \"O=Bank A, L=London, C=GB\"\n          },\n          \"owningKey\" : {\n            \"type\" : \"string\",\n            \"description\" : \"Base 58 Encoded Public Key\",\n            \"example\" : \"GfHq2tTVk9z4eXgyUuofmR16H6j7srXt8BCyidKdrZL5JEwFqHgDSuiinbTE\"\n          }\n        }\n      },\n      \"net.corda.core.node.NodeInfo\" : {\n        \"required\" : [ \"addresses\", \"legalIdentities\", \"legalIdentitiesAndCerts\", \"platformVersion\", \"serial\" ],\n        \"type\" : \"object\",\n        \"properties\" : {\n          \"addresses\" : {\n            \"type\" : \"array\",\n            \"items\" : {\n              \"$ref\" : \"#/components/schemas/net.corda.core.utilities.NetworkHostAndPort\"\n            }\n          },\n          \"legalIdentitiesAndCerts\" : {\n            \"type\" : \"array\",\n            \"items\" : {\n              \"$ref\" : \"#/components/schemas/net.corda.core.identity.PartyAndCertificate\"\n            }\n          },\n          \"platformVersion\" : {\n            \"type\" : \"integer\",\n            \"format\" : \"int32\"\n          },\n          \"serial\" : {\n            \"type\" : \"integer\",\n            \"format\" : \"int64\"\n          },\n          \"legalIdentities\" : {\n            \"type\" : \"array\",\n            \"items\" : {\n              \"$ref\" : \"#/components/schemas/net.corda.core.identity.Party\"\n            }\n          }\n        }\n      },\n      \"net.corda.core.node.services.NetworkMapCache_MapChange\" : {\n        \"type\" : \"object\",\n        \"properties\" : {\n          \"node\" : {\n            \"$ref\" : \"#/components/schemas/net.corda.core.node.NodeInfo\"\n          }\n        }\n      },\n      \"net.corda.core.node.services.NetworkMapCache_MapChange_Added\" : {\n        \"type\" : \"object\",\n        \"properties\" : {\n          \"node\" : {\n            \"$ref\" : \"#/components/schemas/net.corda.core.node.NodeInfo\"\n          }\n        }\n      },\n      \"net.corda.core.node.services.NetworkMapCache_MapChange_Modified\" : {\n        \"type\" : \"object\",\n        \"properties\" : {\n          \"node\" : {\n            \"$ref\" : \"#/components/schemas/net.corda.core.node.NodeInfo\"\n          },\n          \"previousNode\" : {\n            \"$ref\" : \"#/components/schemas/net.corda.core.node.NodeInfo\"\n          }\n        }\n      },\n      \"net.corda.core.node.services.NetworkMapCache_MapChange_Removed\" : {\n        \"type\" : \"object\",\n        \"properties\" : {\n          \"node\" : {\n            \"$ref\" : \"#/components/schemas/net.corda.core.node.NodeInfo\"\n          }\n        }\n      },\n      \"net.corda.core.node.services.Vault\" : {\n        \"required\" : [ \"states\" ],\n        \"type\" : \"object\",\n        \"properties\" : {\n          \"states\" : {\n            \"type\" : \"object\"\n          }\n        }\n      },\n      \"net.corda.core.node.services.Vault_Page\" : {\n        \"required\" : [ \"otherResults\", \"stateTypes\", \"states\", \"statesMetadata\", \"totalStatesAvailable\" ],\n        \"type\" : \"object\",\n        \"properties\" : {\n          \"states\" : {\n            \"type\" : \"array\",\n            \"items\" : {\n              \"$ref\" : \"#/components/schemas/net.corda.core.contracts.StateAndRef_net_corda_core_contracts_ContractState\"\n            }\n          },\n          \"statesMetadata\" : {\n            \"type\" : \"array\",\n            \"items\" : {\n              \"$ref\" : \"#/components/schemas/net.corda.core.node.services.Vault_StateMetadata\"\n            }\n          },\n          \"totalStatesAvailable\" : {\n            \"type\" : \"integer\",\n            \"format\" : \"int64\"\n          },\n          \"stateTypes\" : {\n            \"type\" : \"string\",\n            \"enum\" : [ \"UNCONSUMED\", \"CONSUMED\", \"ALL\" ]\n          },\n          \"otherResults\" : {\n            \"type\" : \"array\",\n            \"items\" : {\n              \"type\" : \"object\"\n            }\n          }\n        }\n      },\n      \"net.corda.core.node.services.Vault_Update\" : {\n        \"required\" : [ \"consumed\", \"empty\", \"produced\", \"references\", \"type\" ],\n        \"type\" : \"object\",\n        \"properties\" : {\n          \"consumed\" : {\n            \"uniqueItems\" : true,\n            \"type\" : \"array\",\n            \"items\" : {\n              \"$ref\" : \"#/components/schemas/net.corda.core.contracts.StateAndRef_net_corda_core_contracts_ContractState\"\n            }\n          },\n          \"produced\" : {\n            \"uniqueItems\" : true,\n            \"type\" : \"array\",\n            \"items\" : {\n              \"$ref\" : \"#/components/schemas/net.corda.core.contracts.StateAndRef_net_corda_core_contracts_ContractState\"\n            }\n          },\n          \"flowId\" : {\n            \"type\" : \"string\",\n            \"format\" : \"uuid\"\n          },\n          \"type\" : {\n            \"type\" : \"string\",\n            \"enum\" : [ \"GENERAL\", \"NOTARY_CHANGE\", \"CONTRACT_UPGRADE\" ]\n          },\n          \"references\" : {\n            \"uniqueItems\" : true,\n            \"type\" : \"array\",\n            \"items\" : {\n              \"$ref\" : \"#/components/schemas/net.corda.core.contracts.StateAndRef_net_corda_core_contracts_ContractState\"\n            }\n          },\n          \"empty\" : {\n            \"type\" : \"boolean\"\n          }\n        }\n      },\n      \"net.corda.core.node.services.vault.AttachmentQueryCriteria\" : {\n        \"type\" : \"object\"\n      },\n      \"net.corda.core.node.services.vault.AttachmentQueryCriteria_AndComposition\" : {\n        \"type\" : \"object\",\n        \"properties\" : {\n          \"a\" : {\n            \"$ref\" : \"#/components/schemas/net.corda.core.node.services.vault.AttachmentQueryCriteria\"\n          },\n          \"b\" : {\n            \"$ref\" : \"#/components/schemas/net.corda.core.node.services.vault.AttachmentQueryCriteria\"\n          }\n        }\n      },\n      \"net.corda.core.node.services.vault.AttachmentQueryCriteria_AttachmentsQueryCriteria\" : {\n        \"type\" : \"object\",\n        \"properties\" : {\n          \"uploaderCondition\" : {\n            \"$ref\" : \"#/components/schemas/net.corda.core.node.services.vault.ColumnPredicate_String\"\n          },\n          \"filenameCondition\" : {\n            \"$ref\" : \"#/components/schemas/net.corda.core.node.services.vault.ColumnPredicate_String\"\n          },\n          \"uploadDateCondition\" : {\n            \"$ref\" : \"#/components/schemas/net.corda.core.node.services.vault.ColumnPredicate_Instant\"\n          },\n          \"contractClassNamesCondition\" : {\n            \"$ref\" : \"#/components/schemas/net.corda.core.node.services.vault.ColumnPredicate_List_String\"\n          },\n          \"signersCondition\" : {\n            \"$ref\" : \"#/components/schemas/net.corda.core.node.services.vault.ColumnPredicate_List_PublicKey\"\n          },\n          \"isSignedCondition\" : {\n            \"$ref\" : \"#/components/schemas/net.corda.core.node.services.vault.ColumnPredicate_Boolean\"\n          },\n          \"versionCondition\" : {\n            \"$ref\" : \"#/components/schemas/net.corda.core.node.services.vault.ColumnPredicate_Integer\"\n          }\n        }\n      },\n      \"net.corda.core.node.services.vault.ColumnPredicate_Boolean\" : {\n        \"type\" : \"object\"\n      },\n      \"net.corda.core.node.services.vault.ColumnPredicate_Integer\" : {\n        \"type\" : \"object\"\n      },\n      \"net.corda.core.node.services.vault.ColumnPredicate_List_PublicKey\" : {\n        \"type\" : \"object\"\n      },\n      \"net.corda.core.node.services.vault.ColumnPredicate_List_String\" : {\n        \"type\" : \"object\"\n      },\n      \"net.corda.core.node.services.vault.ColumnPredicate_String\" : {\n        \"type\" : \"object\"\n      },\n      \"net.corda.core.node.services.vault.AttachmentQueryCriteria_OrComposition\" : {\n        \"type\" : \"object\",\n        \"properties\" : {\n          \"a\" : {\n            \"$ref\" : \"#/components/schemas/net.corda.core.node.services.vault.AttachmentQueryCriteria\"\n          },\n          \"b\" : {\n            \"$ref\" : \"#/components/schemas/net.corda.core.node.services.vault.AttachmentQueryCriteria\"\n          }\n        }\n      },\n      \"net.corda.core.node.services.vault.AttachmentSort\" : {\n        \"required\" : [ \"columns\" ],\n        \"type\" : \"object\",\n        \"properties\" : {\n          \"columns\" : {\n            \"type\" : \"array\",\n            \"items\" : {\n              \"$ref\" : \"#/components/schemas/net.corda.core.node.services.vault.AttachmentSort_AttachmentSortColumn\"\n            }\n          }\n        }\n      },\n      \"net.corda.core.node.services.vault.AttachmentSort_AttachmentSortColumn\" : {\n        \"required\" : [ \"direction\", \"sortAttribute\" ],\n        \"type\" : \"object\",\n        \"properties\" : {\n          \"sortAttribute\" : {\n            \"type\" : \"string\",\n            \"enum\" : [ \"INSERTION_DATE\", \"UPLOADER\", \"FILENAME\", \"VERSION\" ]\n          },\n          \"direction\" : {\n            \"type\" : \"string\",\n            \"enum\" : [ \"ASC\", \"DESC\" ]\n          }\n        }\n      },\n      \"net.corda.core.node.services.vault.Builder\" : {\n        \"type\" : \"object\"\n      },\n      \"net.corda.core.node.services.vault.Column\" : {\n        \"required\" : [ \"declaringClass\", \"name\" ],\n        \"type\" : \"object\",\n        \"properties\" : {\n          \"name\" : {\n            \"type\" : \"string\"\n          },\n          \"declaringClass\" : {\n            \"type\" : \"string\",\n            \"description\" : \"Java class name\",\n            \"example\" : \"java.lang.Object\"\n          }\n        }\n      },\n      \"net.corda.core.node.services.vault.SortAttribute_Custom\" : {\n        \"required\" : [ \"entityStateClass\", \"entityStateColumnName\" ],\n        \"type\" : \"object\",\n        \"properties\" : {\n          \"entityStateClass\" : {\n            \"type\" : \"string\",\n            \"description\" : \"Java class name\",\n            \"example\" : \"java.lang.Object\"\n          },\n          \"entityStateColumnName\" : {\n            \"type\" : \"string\"\n          }\n        }\n      },\n      \"net.corda.core.node.services.vault.SortAttribute_Standard\" : {\n        \"type\" : \"object\",\n        \"properties\" : {\n          \"attribute\" : {\n            \"$ref\" : \"#/components/schemas/net.corda.core.node.services.vault.Sort_Attribute\"\n          }\n        }\n      },\n      \"net.corda.core.node.services.vault.Sort_Attribute\" : {\n        \"type\" : \"object\"\n      },\n      \"net.corda.core.schemas.CommonSchemaV1_FungibleState\" : {\n        \"required\" : [ \"issuerRef\", \"quantity\" ],\n        \"type\" : \"object\",\n        \"properties\" : {\n          \"participants\" : {\n            \"uniqueItems\" : true,\n            \"type\" : \"array\",\n            \"items\" : {\n              \"$ref\" : \"#/components/schemas/net.corda.core.identity.AbstractParty\"\n            }\n          },\n          \"owner\" : {\n            \"$ref\" : \"#/components/schemas/net.corda.core.identity.AbstractParty\"\n          },\n          \"quantity\" : {\n            \"type\" : \"integer\",\n            \"format\" : \"int64\"\n          },\n          \"issuer\" : {\n            \"$ref\" : \"#/components/schemas/net.corda.core.identity.AbstractParty\"\n          },\n          \"issuerRef\" : {\n            \"type\" : \"string\",\n            \"format\" : \"binary\"\n          },\n          \"stateRef\" : {\n            \"$ref\" : \"#/components/schemas/net.corda.core.schemas.PersistentStateRef\"\n          }\n        }\n      },\n      \"net.corda.core.schemas.PersistentState\" : {\n        \"type\" : \"object\",\n        \"properties\" : {\n          \"stateRef\" : {\n            \"$ref\" : \"#/components/schemas/net.corda.core.schemas.PersistentStateRef\"\n          }\n        }\n      },\n      \"net.corda.core.schemas.PersistentStateRef\" : {\n        \"required\" : [ \"index\", \"txId\" ],\n        \"type\" : \"object\",\n        \"properties\" : {\n          \"txId\" : {\n            \"type\" : \"string\"\n          },\n          \"index\" : {\n            \"type\" : \"integer\",\n            \"format\" : \"int32\"\n          }\n        }\n      },\n      \"net.corda.core.schemas.CommonSchemaV1_LinearState\" : {\n        \"required\" : [ \"uuid\" ],\n        \"type\" : \"object\",\n        \"properties\" : {\n          \"participants\" : {\n            \"uniqueItems\" : true,\n            \"type\" : \"array\",\n            \"items\" : {\n              \"$ref\" : \"#/components/schemas/net.corda.core.identity.AbstractParty\"\n            }\n          },\n          \"externalId\" : {\n            \"type\" : \"string\"\n          },\n          \"uuid\" : {\n            \"type\" : \"string\",\n            \"format\" : \"uuid\"\n          },\n          \"stateRef\" : {\n            \"$ref\" : \"#/components/schemas/net.corda.core.schemas.PersistentStateRef\"\n          }\n        }\n      },\n      \"net.corda.core.transactions.ComponentGroup\" : {\n        \"required\" : [ \"components\", \"groupIndex\" ],\n        \"type\" : \"object\",\n        \"properties\" : {\n          \"groupIndex\" : {\n            \"type\" : \"integer\",\n            \"format\" : \"int32\"\n          },\n          \"components\" : {\n            \"type\" : \"array\",\n            \"items\" : {\n              \"type\" : \"string\",\n              \"description\" : \"Hex encoded Byte Array\",\n              \"example\" : \"736F6D654279746573\"\n            }\n          }\n        }\n      },\n      \"net.corda.core.transactions.ContractUpgradeFilteredTransaction_FilteredComponent\" : {\n        \"required\" : [ \"component\", \"nonce\" ],\n        \"type\" : \"object\",\n        \"properties\" : {\n          \"component\" : {\n            \"type\" : \"string\",\n            \"description\" : \"Hex encoded Byte Array\",\n            \"example\" : \"736F6D654279746573\"\n          },\n          \"nonce\" : {\n            \"type\" : \"string\",\n            \"description\" : \"Base 58 Encoded Secure Hash\",\n            \"example\" : \"GfHq2tTVk9z4eXgyUuofmR16H6j7srXt8BCyidKdrZL5JEwFqHgDSuiinbTE\"\n          }\n        }\n      },\n      \"net.corda.finance.contracts.BusinessCalendar\" : {\n        \"required\" : [ \"holidayDates\" ],\n        \"type\" : \"object\",\n        \"properties\" : {\n          \"holidayDates\" : {\n            \"uniqueItems\" : true,\n            \"type\" : \"array\",\n            \"items\" : {\n              \"type\" : \"string\",\n              \"description\" : \"JSR310 encoded time representation of LocalDate\"\n            }\n          }\n        }\n      },\n      \"net.corda.finance.contracts.Commodity\" : {\n        \"required\" : [ \"commodityCode\", \"defaultFractionDigits\", \"displayName\", \"displayTokenSize\" ],\n        \"type\" : \"object\",\n        \"properties\" : {\n          \"commodityCode\" : {\n            \"type\" : \"string\"\n          },\n          \"displayName\" : {\n            \"type\" : \"string\"\n          },\n          \"defaultFractionDigits\" : {\n            \"type\" : \"integer\",\n            \"format\" : \"int32\"\n          },\n          \"displayTokenSize\" : {\n            \"type\" : \"number\"\n          }\n        }\n      },\n      \"net.corda.finance.contracts.Expression\" : {\n        \"required\" : [ \"expr\" ],\n        \"type\" : \"object\",\n        \"properties\" : {\n          \"expr\" : {\n            \"type\" : \"string\"\n          }\n        }\n      },\n      \"net.corda.finance.contracts.FixOf\" : {\n        \"required\" : [ \"forDay\", \"name\" ],\n        \"type\" : \"object\",\n        \"properties\" : {\n          \"name\" : {\n            \"type\" : \"string\"\n          },\n          \"forDay\" : {\n            \"type\" : \"string\",\n            \"description\" : \"JSR310 encoded time representation of LocalDate\"\n          },\n          \"ofTenor\" : {\n            \"$ref\" : \"#/components/schemas/net.corda.finance.contracts.Tenor\"\n          }\n        }\n      },\n      \"net.corda.finance.contracts.Tenor\" : {\n        \"required\" : [ \"name\" ],\n        \"type\" : \"object\",\n        \"properties\" : {\n          \"name\" : {\n            \"type\" : \"string\"\n          }\n        }\n      },\n      \"Issued\" : {\n        \"required\" : [ \"_productType\", \"issuer\", \"product\" ],\n        \"type\" : \"object\",\n        \"properties\" : {\n          \"issuer\" : {\n            \"required\" : [ \"party\", \"reference\" ],\n            \"type\" : \"object\",\n            \"properties\" : {\n              \"party\" : {\n                \"$ref\" : \"#/components/schemas/net.corda.core.identity.AbstractParty\"\n              },\n              \"reference\" : {\n                \"type\" : \"string\",\n                \"description\" : \"Hex encoded Byte Array\",\n                \"example\" : \"736F6D654279746573\"\n              }\n            }\n          },\n          \"product\" : {\n            \"type\" : \"object\"\n          },\n          \"_productType\" : {\n            \"type\" : \"string\",\n            \"example\" : \"java.util.Currency\"\n          }\n        }\n      },\n      \"net.corda.core.contracts.PartyAndReference\" : {\n        \"required\" : [ \"party\", \"reference\" ],\n        \"type\" : \"object\",\n        \"properties\" : {\n          \"party\" : {\n            \"$ref\" : \"#/components/schemas/net.corda.core.identity.AbstractParty\"\n          },\n          \"reference\" : {\n            \"type\" : \"string\",\n            \"description\" : \"Hex encoded Byte Array\",\n            \"example\" : \"736F6D654279746573\"\n          }\n        }\n      },\n      \"net.corda.core.utilities.NonEmptySet_net_corda_core_contracts_Issued_Object\" : {\n        \"uniqueItems\" : true,\n        \"required\" : [ \"empty\", \"size\" ],\n        \"type\" : \"array\",\n        \"properties\" : {\n          \"elements\" : {\n            \"uniqueItems\" : true,\n            \"type\" : \"array\",\n            \"writeOnly\" : true,\n            \"items\" : {\n              \"$ref\" : \"#/components/schemas/Issued\"\n            }\n          },\n          \"empty\" : {\n            \"type\" : \"boolean\"\n          },\n          \"size\" : {\n            \"type\" : \"integer\",\n            \"format\" : \"int32\"\n          }\n        },\n        \"items\" : {\n          \"$ref\" : \"#/components/schemas/Issued\"\n        }\n      },\n      \"net.corda.core.utilities.NonEmptySet_net_corda_core_crypto_SecureHash\" : {\n        \"uniqueItems\" : true,\n        \"required\" : [ \"empty\", \"size\" ],\n        \"type\" : \"array\",\n        \"properties\" : {\n          \"elements\" : {\n            \"uniqueItems\" : true,\n            \"type\" : \"array\",\n            \"writeOnly\" : true,\n            \"items\" : {\n              \"type\" : \"string\",\n              \"description\" : \"Base 58 Encoded Secure Hash\",\n              \"example\" : \"GfHq2tTVk9z4eXgyUuofmR16H6j7srXt8BCyidKdrZL5JEwFqHgDSuiinbTE\"\n            }\n          },\n          \"empty\" : {\n            \"type\" : \"boolean\"\n          },\n          \"size\" : {\n            \"type\" : \"integer\",\n            \"format\" : \"int32\"\n          }\n        },\n        \"items\" : {\n          \"type\" : \"string\",\n          \"description\" : \"Base 58 Encoded Secure Hash\",\n          \"example\" : \"GfHq2tTVk9z4eXgyUuofmR16H6j7srXt8BCyidKdrZL5JEwFqHgDSuiinbTE\"\n        }\n      },\n      \"net.corda.finance.contracts.asset.Obligation_Terms\" : {\n        \"required\" : [ \"acceptableContracts\", \"acceptableIssuedProducts\", \"dueBefore\", \"product\", \"timeTolerance\" ],\n        \"type\" : \"object\",\n        \"properties\" : {\n          \"acceptableContracts\" : {\n            \"uniqueItems\" : true,\n            \"required\" : [ \"empty\", \"size\" ],\n            \"type\" : \"array\",\n            \"properties\" : {\n              \"elements\" : {\n                \"uniqueItems\" : true,\n                \"type\" : \"array\",\n                \"writeOnly\" : true,\n                \"items\" : {\n                  \"type\" : \"string\",\n                  \"description\" : \"Base 58 Encoded Secure Hash\",\n                  \"example\" : \"GfHq2tTVk9z4eXgyUuofmR16H6j7srXt8BCyidKdrZL5JEwFqHgDSuiinbTE\"\n                }\n              },\n              \"empty\" : {\n                \"type\" : \"boolean\"\n              },\n              \"size\" : {\n                \"type\" : \"integer\",\n                \"format\" : \"int32\"\n              }\n            },\n            \"items\" : {\n              \"type\" : \"string\",\n              \"description\" : \"Base 58 Encoded Secure Hash\",\n              \"example\" : \"GfHq2tTVk9z4eXgyUuofmR16H6j7srXt8BCyidKdrZL5JEwFqHgDSuiinbTE\"\n            }\n          },\n          \"acceptableIssuedProducts\" : {\n            \"uniqueItems\" : true,\n            \"required\" : [ \"empty\", \"size\" ],\n            \"type\" : \"array\",\n            \"properties\" : {\n              \"elements\" : {\n                \"uniqueItems\" : true,\n                \"type\" : \"array\",\n                \"writeOnly\" : true,\n                \"items\" : {\n                  \"$ref\" : \"#/components/schemas/Issued\"\n                }\n              },\n              \"empty\" : {\n                \"type\" : \"boolean\"\n              },\n              \"size\" : {\n                \"type\" : \"integer\",\n                \"format\" : \"int32\"\n              }\n            },\n            \"items\" : {\n              \"$ref\" : \"#/components/schemas/Issued\"\n            }\n          },\n          \"dueBefore\" : {\n            \"type\" : \"string\",\n            \"description\" : \"JSR310 encoded time representation of Instant\"\n          },\n          \"timeTolerance\" : {\n            \"type\" : \"string\",\n            \"description\" : \"JSR310 encoded time representation of Duration\"\n          },\n          \"product\" : {\n            \"type\" : \"object\"\n          }\n        }\n      },\n      \"net.corda.finance.flows.AbstractCashFlow_AbstractRequest\" : {\n        \"required\" : [ \"amount\" ],\n        \"type\" : \"object\",\n        \"properties\" : {\n          \"amount\" : {\n            \"$ref\" : \"#/components/schemas/AmountCurrency\"\n          }\n        }\n      },\n      \"net.corda.finance.flows.CashExitFlow_ExitRequest\" : {\n        \"required\" : [ \"amount\", \"issuerRef\" ],\n        \"type\" : \"object\",\n        \"properties\" : {\n          \"amount\" : {\n            \"$ref\" : \"#/components/schemas/AmountCurrency\"\n          },\n          \"issuerRef\" : {\n            \"type\" : \"string\",\n            \"description\" : \"Hex encoded Byte Array\",\n            \"example\" : \"736F6D654279746573\"\n          }\n        }\n      },\n      \"net.corda.finance.flows.CashIssueAndPaymentFlow_IssueAndPaymentRequest\" : {\n        \"required\" : [ \"amount\", \"anonymous\", \"issueRef\" ],\n        \"type\" : \"object\",\n        \"properties\" : {\n          \"amount\" : {\n            \"$ref\" : \"#/components/schemas/AmountCurrency\"\n          },\n          \"issueRef\" : {\n            \"type\" : \"string\",\n            \"description\" : \"Hex encoded Byte Array\",\n            \"example\" : \"736F6D654279746573\"\n          },\n          \"recipient\" : {\n            \"$ref\" : \"#/components/schemas/net.corda.core.identity.Party\"\n          },\n          \"notary\" : {\n            \"$ref\" : \"#/components/schemas/net.corda.core.identity.Party\"\n          },\n          \"anonymous\" : {\n            \"type\" : \"boolean\"\n          }\n        }\n      },\n      \"net.corda.finance.flows.CashIssueFlow_IssueRequest\" : {\n        \"required\" : [ \"amount\", \"issueRef\" ],\n        \"type\" : \"object\",\n        \"properties\" : {\n          \"amount\" : {\n            \"$ref\" : \"#/components/schemas/AmountCurrency\"\n          },\n          \"issueRef\" : {\n            \"type\" : \"string\",\n            \"description\" : \"Hex encoded Byte Array\",\n            \"example\" : \"736F6D654279746573\"\n          },\n          \"notary\" : {\n            \"$ref\" : \"#/components/schemas/net.corda.core.identity.Party\"\n          }\n        }\n      },\n      \"net.corda.finance.flows.CashPaymentFlow_PaymentRequest\" : {\n        \"required\" : [ \"amount\", \"anonymous\", \"issuerConstraint\" ],\n        \"type\" : \"object\",\n        \"properties\" : {\n          \"amount\" : {\n            \"$ref\" : \"#/components/schemas/AmountCurrency\"\n          },\n          \"recipient\" : {\n            \"$ref\" : \"#/components/schemas/net.corda.core.identity.Party\"\n          },\n          \"anonymous\" : {\n            \"type\" : \"boolean\"\n          },\n          \"issuerConstraint\" : {\n            \"uniqueItems\" : true,\n            \"type\" : \"array\",\n            \"items\" : {\n              \"$ref\" : \"#/components/schemas/net.corda.core.identity.Party\"\n            }\n          },\n          \"notary\" : {\n            \"$ref\" : \"#/components/schemas/net.corda.core.identity.Party\"\n          }\n        }\n      },\n      \"net.corda.finance.contracts.DealState\" : {\n        \"type\" : \"object\",\n        \"properties\" : {\n          \"linearId\" : {\n            \"$ref\" : \"#/components/schemas/net.corda.core.contracts.UniqueIdentifier\"\n          }\n        }\n      },\n      \"net.corda.finance.flows.TwoPartyDealFlow_AutoOffer\" : {\n        \"type\" : \"object\",\n        \"properties\" : {\n          \"notary\" : {\n            \"$ref\" : \"#/components/schemas/net.corda.core.identity.Party\"\n          },\n          \"dealBeingOffered\" : {\n            \"$ref\" : \"#/components/schemas/net.corda.finance.contracts.DealState\"\n          }\n        }\n      },\n      \"net.corda.core.identity.AnonymousParty\" : {\n        \"required\" : [ \"owningKey\" ],\n        \"type\" : \"object\",\n        \"properties\" : {\n          \"owningKey\" : {\n            \"type\" : \"string\",\n            \"description\" : \"Base 58 Encoded Public Key\",\n            \"example\" : \"GfHq2tTVk9z4eXgyUuofmR16H6j7srXt8BCyidKdrZL5JEwFqHgDSuiinbTE\"\n          }\n        }\n      },\n      \"net.corda.finance.flows.TwoPartyDealFlow_Handshake\" : {\n        \"required\" : [ \"payload\" ],\n        \"type\" : \"object\",\n        \"properties\" : {\n          \"payload\" : {\n            \"type\" : \"object\"\n          },\n          \"primaryIdentity\" : {\n            \"$ref\" : \"#/components/schemas/net.corda.core.identity.AnonymousParty\"\n          },\n          \"secondaryIdentity\" : {\n            \"$ref\" : \"#/components/schemas/net.corda.core.identity.AnonymousParty\"\n          }\n        }\n      },\n      \"net.corda.finance.flows.TwoPartyTradeFlow_SellerTradeInfo\" : {\n        \"required\" : [ \"price\" ],\n        \"type\" : \"object\",\n        \"properties\" : {\n          \"price\" : {\n            \"$ref\" : \"#/components/schemas/AmountCurrency\"\n          },\n          \"payToIdentity\" : {\n            \"$ref\" : \"#/components/schemas/net.corda.core.identity.PartyAndCertificate\"\n          }\n        }\n      },\n      \"net.corda.core.schemas.MappedSchema\" : {\n        \"required\" : [ \"mappedTypes\", \"name\", \"version\" ],\n        \"type\" : \"object\",\n        \"properties\" : {\n          \"schemaFamily\" : {\n            \"type\" : \"string\",\n            \"description\" : \"Java class name\",\n            \"writeOnly\" : true,\n            \"example\" : \"java.lang.Object\"\n          },\n          \"version\" : {\n            \"type\" : \"integer\",\n            \"format\" : \"int32\"\n          },\n          \"mappedTypes\" : {\n            \"type\" : \"object\"\n          },\n          \"name\" : {\n            \"type\" : \"string\"\n          },\n          \"migrationResource\" : {\n            \"type\" : \"string\"\n          }\n        }\n      },\n      \"net.corda.finance.schemas.CashSchemaV1\" : {\n        \"required\" : [ \"mappedTypes\", \"migrationResource\", \"name\", \"version\" ],\n        \"type\" : \"object\",\n        \"properties\" : {\n          \"name\" : {\n            \"type\" : \"string\"\n          },\n          \"migrationResource\" : {\n            \"type\" : \"string\"\n          },\n          \"version\" : {\n            \"type\" : \"integer\",\n            \"format\" : \"int32\"\n          },\n          \"mappedTypes\" : {\n            \"type\" : \"object\"\n          }\n        }\n      },\n      \"net.corda.finance.schemas.CashSchemaV1_PersistentCashState\" : {\n        \"required\" : [ \"currency\", \"issuerPartyHash\", \"issuerRef\", \"pennies\" ],\n        \"type\" : \"object\",\n        \"properties\" : {\n          \"owner\" : {\n            \"$ref\" : \"#/components/schemas/net.corda.core.identity.AbstractParty\"\n          },\n          \"pennies\" : {\n            \"type\" : \"integer\",\n            \"format\" : \"int64\"\n          },\n          \"currency\" : {\n            \"type\" : \"string\"\n          },\n          \"issuerPartyHash\" : {\n            \"type\" : \"string\"\n          },\n          \"issuerRef\" : {\n            \"type\" : \"string\",\n            \"format\" : \"binary\"\n          },\n          \"stateRef\" : {\n            \"$ref\" : \"#/components/schemas/net.corda.core.schemas.PersistentStateRef\"\n          }\n        }\n      },\n      \"net.corda.finance.schemas.CommercialPaperSchemaV1\" : {\n        \"required\" : [ \"mappedTypes\", \"migrationResource\", \"name\", \"version\" ],\n        \"type\" : \"object\",\n        \"properties\" : {\n          \"name\" : {\n            \"type\" : \"string\"\n          },\n          \"migrationResource\" : {\n            \"type\" : \"string\"\n          },\n          \"version\" : {\n            \"type\" : \"integer\",\n            \"format\" : \"int32\"\n          },\n          \"mappedTypes\" : {\n            \"type\" : \"object\"\n          }\n        }\n      },\n      \"net.corda.finance.schemas.CommercialPaperSchemaV1_PersistentCommercialPaperState\" : {\n        \"required\" : [ \"currency\", \"faceValue\", \"faceValueIssuerPartyHash\", \"faceValueIssuerRef\", \"issuancePartyHash\", \"issuanceRef\", \"maturity\", \"ownerHash\" ],\n        \"type\" : \"object\",\n        \"properties\" : {\n          \"issuancePartyHash\" : {\n            \"type\" : \"string\"\n          },\n          \"issuanceRef\" : {\n            \"type\" : \"string\",\n            \"format\" : \"binary\"\n          },\n          \"ownerHash\" : {\n            \"type\" : \"string\"\n          },\n          \"maturity\" : {\n            \"type\" : \"string\",\n            \"description\" : \"JSR310 encoded time representation of Instant\"\n          },\n          \"faceValue\" : {\n            \"type\" : \"integer\",\n            \"format\" : \"int64\"\n          },\n          \"currency\" : {\n            \"type\" : \"string\"\n          },\n          \"faceValueIssuerPartyHash\" : {\n            \"type\" : \"string\"\n          },\n          \"faceValueIssuerRef\" : {\n            \"type\" : \"string\",\n            \"format\" : \"binary\"\n          },\n          \"stateRef\" : {\n            \"$ref\" : \"#/components/schemas/net.corda.core.schemas.PersistentStateRef\"\n          }\n        }\n      }\n    }\n  }\n}$ref": "#/components/schemas/net.corda.core.node.services.vault.Column_Object_Object"
            },
            "predicate" : {
              "$ref" : "#/components/schemas/net.corda.core.node.services.vault.ColumnPredicate_Object"
            }
          }
        }, {
          "$ref" : "#/components/schemas/net.corda.core.node.services.vault.CriteriaExpression_Object_Boolean"
        }, {
          "$ref" : "#/components/schemas/net.corda.core.node.services.vault.CriteriaExpression_net_corda_core_schemas_StatePersistable_Boolean"
        } ]
      },
      "net.corda.core.node.services.vault.CriteriaExpression_Not" : {
        "required" : [ "expression" ],
        "type" : "object",
        "allOf" : [ {
          "$ref" : "#/components/schemas/net.corda.core.node.services.vault.CriteriaExpression"
        }, {
          "type" : "object",
          "properties" : {
            "expression" : {
              "$ref" : "#/components/schemas/net.corda.core.node.services.vault.CriteriaExpression_Object_Boolean"
            }
          }
        }, {
          "$ref" : "#/components/schemas/net.corda.core.node.services.vault.CriteriaExpression_net_corda_core_schemas_StatePersistable_Boolean"
        } ]
      },
      "net.corda.core.node.services.vault.CriteriaExpression_Object_Boolean" : {
        "type" : "object",
        "discriminator" : {
          "propertyName" : "@class",
          "mapping" : {
            ".CriteriaExpression$AggregateFunctionExpression" : "#/components/schemas/net.corda.core.node.services.vault.CriteriaExpression_AggregateFunctionExpression",
            ".CriteriaExpression$BinaryLogical" : "#/components/schemas/net.corda.core.node.services.vault.CriteriaExpression_BinaryLogical",
            ".CriteriaExpression$ColumnPredicateExpression" : "#/components/schemas/net.corda.core.node.services.vault.CriteriaExpression_ColumnPredicateExpression",
            ".CriteriaExpression$Not" : "#/components/schemas/net.corda.core.node.services.vault.CriteriaExpression_Not"
          }
        }
      },
      "net.corda.core.node.services.vault.CriteriaExpression_net_corda_core_schemas_StatePersistable_Boolean" : {
        "type" : "object",
        "discriminator" : {
          "propertyName" : "@class",
          "mapping" : {
            ".CriteriaExpression$AggregateFunctionExpression" : "#/components/schemas/net.corda.core.node.services.vault.CriteriaExpression_AggregateFunctionExpression",
            ".CriteriaExpression$BinaryLogical" : "#/components/schemas/net.corda.core.node.services.vault.CriteriaExpression_BinaryLogical",
            ".CriteriaExpression$ColumnPredicateExpression" : "#/components/schemas/net.corda.core.node.services.vault.CriteriaExpression_ColumnPredicateExpression",
            ".CriteriaExpression$Not" : "#/components/schemas/net.corda.core.node.services.vault.CriteriaExpression_Not"
          }
        }
      },
      "net.corda.core.node.services.vault.PageSpecification" : {
        "required" : [ "pageNumber", "pageSize" ],
        "type" : "object",
        "properties" : {
          "pageNumber" : {
            "type" : "integer",
            "format" : "int32"
          },
          "pageSize" : {
            "type" : "integer",
            "format" : "int32"
          }
        }
      },
      "net.corda.core.node.services.vault.QueryCriteria" : {
        "type" : "object",
        "discriminator" : {
          "propertyName" : "@class",
          "mapping" : {
            ".QueryCriteria$VaultQueryCriteria" : "#/components/schemas/net.corda.core.node.services.vault.QueryCriteria_VaultQueryCriteria",
            ".QueryCriteria$VaultCustomQueryCriteria" : "#/components/schemas/net.corda.core.node.services.vault.QueryCriteria_VaultCustomQueryCriteria",
            ".QueryCriteria$CommonQueryCriteria" : "#/components/schemas/net.corda.core.node.services.vault.QueryCriteria_CommonQueryCriteria",
            ".QueryCriteria$LinearStateQueryCriteria" : "#/components/schemas/net.corda.core.node.services.vault.QueryCriteria_LinearStateQueryCriteria",
            ".QueryCriteria$FungibleAssetQueryCriteria" : "#/components/schemas/net.corda.core.node.services.vault.QueryCriteria_FungibleAssetQueryCriteria",
            ".QueryCriteria$AndComposition" : "#/components/schemas/net.corda.core.node.services.vault.QueryCriteria_AndComposition",
            ".QueryCriteria$OrComposition" : "#/components/schemas/net.corda.core.node.services.vault.QueryCriteria_OrComposition"
          }
        }
      },
      "net.corda.core.node.services.vault.QueryCriteria_AndComposition" : {
        "required" : [ "a", "b" ],
        "type" : "object",
        "allOf" : [ {
          "$ref" : "#/components/schemas/net.corda.core.node.services.vault.QueryCriteria"
        }, {
          "type" : "object",
          "properties" : {
            "a" : {
              "$ref" : "#/components/schemas/net.corda.core.node.services.vault.QueryCriteria"
            },
            "b" : {
              "$ref" : "#/components/schemas/net.corda.core.node.services.vault.QueryCriteria"
            }
          }
        } ]
      },
      "net.corda.core.node.services.vault.QueryCriteria_CommonQueryCriteria" : {
        "required" : [ "constraintTypes", "constraints", "relevancyStatus", "status" ],
        "type" : "object",
        "properties" : {
          "relevancyStatus" : {
            "type" : "string",
            "enum" : [ "RELEVANT", "NOT_RELEVANT", "ALL" ]
          },
          "constraintTypes" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "type" : "string",
              "enum" : [ "ALWAYS_ACCEPT", "HASH", "CZ_WHITELISTED", "SIGNATURE" ]
            }
          },
          "constraints" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/net.corda.core.node.services.Vault_ConstraintInfo"
            }
          },
          "participants" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/net.corda.core.identity.AbstractParty"
            }
          },
          "contractStateTypes" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "type" : "string",
              "description" : "Java class name",
              "example" : "java.lang.Object"
            }
          },
          "status": {
            "type": "string",
            "enum": [
              "UNCONSUMED",
              "CONSUMED",
              "ALL"
            ]
          }
        }
      },
      "net.corda.core.node.services.vault.QueryCriteria_FungibleAssetQueryCriteria" : {
        "required" : [ "constraintTypes", "constraints", "relevancyStatus", "status" ],
        "type" : "object",
        "allOf" : [ {
          "$ref" : "#/components/schemas/net.corda.core.node.services.vault.QueryCriteria"
        }, {
          "type" : "object",
          "properties" : {
            "participants" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/net.corda.core.identity.AbstractParty"
              }
            },
            "owner" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/net.corda.core.identity.AbstractParty"
              }
            },
            "quantity" : {
              "$ref" : "#/components/schemas/net.corda.core.node.services.vault.ColumnPredicate_Long"
            },
            "issuer" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/net.corda.core.identity.AbstractParty"
              }
            },
            "issuerRef" : {
              "type" : "array",
              "items" : {
                "type" : "string",
                "description" : "Hex encoded Byte Array",
                "example" : "736F6D654279746573"
              }
            },
            "status" : {
              "type" : "string",
              "enum" : [ "UNCONSUMED", "CONSUMED", "ALL" ]
            },
            "contractStateTypes" : {
              "uniqueItems" : true,
              "type" : "array",
              "items" : {
                "type" : "string",
                "description" : "Java class name",
                "example" : "java.lang.Object"
              }
            },
            "relevancyStatus" : {
              "type" : "string",
              "enum" : [ "RELEVANT", "NOT_RELEVANT", "ALL" ]
            },
            "constraintTypes" : {
              "uniqueItems" : true,
              "type" : "array",
              "items" : {
                "type" : "string",
                "enum" : [ "ALWAYS_ACCEPT", "HASH", "CZ_WHITELISTED", "SIGNATURE" ]
              }
            },
            "constraints" : {
              "uniqueItems" : true,
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/net.corda.core.node.services.Vault_ConstraintInfo"
              }
            }
          }
        } ]
      },
      "net.corda.core.node.services.vault.QueryCriteria_FungibleStateQueryCriteria" : {
        "required" : [ "constraintTypes", "constraints", "relevancyStatus", "status" ],
        "type" : "object",
        "allOf" : [ {
          "$ref" : "#/components/schemas/net.corda.core.node.services.vault.QueryCriteria"
        }, {
          "type" : "object",
          "properties" : {
            "participants" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/net.corda.core.identity.AbstractParty"
              }
            },
            "quantity" : {
              "$ref" : "#/components/schemas/net.corda.core.node.services.vault.ColumnPredicate_Long"
            },
            "status" : {
              "type" : "string",
              "enum" : [ "UNCONSUMED", "CONSUMED", "ALL" ]
            },
            "contractStateTypes" : {
              "uniqueItems" : true,
              "type" : "array",
              "items" : {
                "type" : "string",
                "description" : "Java class name",
                "example" : "java.lang.Object"
              }
            },
            "relevancyStatus" : {
              "type" : "string",
              "enum" : [ "RELEVANT", "NOT_RELEVANT", "ALL" ]
            },
            "constraintTypes" : {
              "uniqueItems" : true,
              "type" : "array",
              "items" : {
                "type" : "string",
                "enum" : [ "ALWAYS_ACCEPT", "HASH", "CZ_WHITELISTED", "SIGNATURE" ]
              }
            },
            "constraints" : {
              "uniqueItems" : true,
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/net.corda.core.node.services.Vault_ConstraintInfo"
              }
            }
          }
        } ]
      },
      "net.corda.core.node.services.vault.QueryCriteria_LinearStateQueryCriteria" : {
        "required" : [ "constraintTypes", "constraints", "relevancyStatus", "status" ],
        "type" : "object",
        "allOf" : [ {
          "$ref" : "#/components/schemas/net.corda.core.node.services.vault.QueryCriteria"
        }, {
          "type" : "object",
          "properties" : {
            "participants" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/net.corda.core.identity.AbstractParty"
              }
            },
            "uuid" : {
              "type" : "array",
              "items" : {
                "type" : "string",
                "format" : "uuid"
              }
            },
            "externalId" : {
              "type" : "array",
              "items" : {
                "type" : "string"
              }
            },
            "status" : {
              "type" : "string",
              "enum" : [ "UNCONSUMED", "CONSUMED", "ALL" ]
            },
            "contractStateTypes" : {
              "uniqueItems" : true,
              "type" : "array",
              "items" : {
                "type" : "string",
                "description" : "Java class name",
                "example" : "java.lang.Object"
              }
            },
            "relevancyStatus" : {
              "type" : "string",
              "enum" : [ "RELEVANT", "NOT_RELEVANT", "ALL" ]
            },
            "constraintTypes" : {
              "uniqueItems" : true,
              "type" : "array",
              "items" : {
                "type" : "string",
                "enum" : [ "ALWAYS_ACCEPT", "HASH", "CZ_WHITELISTED", "SIGNATURE" ]
              }
            },
            "constraints" : {
              "uniqueItems" : true,
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/net.corda.core.node.services.Vault_ConstraintInfo"
              }
            }
          }
        } ]
      },
      "net.corda.core.node.services.vault.QueryCriteria_OrComposition" : {
        "required" : [ "a", "b" ],
        "type" : "object",
        "allOf" : [ {
          "$ref" : "#/components/schemas/net.corda.core.node.services.vault.QueryCriteria"
        }, {
          "type" : "object",
          "properties" : {
            "a" : {
              "$ref" : "#/components/schemas/net.corda.core.node.services.vault.QueryCriteria"
            },
            "b" : {
              "$ref" : "#/components/schemas/net.corda.core.node.services.vault.QueryCriteria"
            }
          }
        } ]
      },
      "net.corda.core.node.services.vault.QueryCriteria_SoftLockingCondition" : {
        "required" : [ "lockIds", "type" ],
        "type" : "object",
        "properties" : {
          "type" : {
            "type" : "string",
            "enum" : [ "UNLOCKED_ONLY", "LOCKED_ONLY", "SPECIFIED", "UNLOCKED_AND_SPECIFIED" ]
          },
          "lockIds" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "format" : "uuid"
            }
          }
        }
      },
      "net.corda.core.node.services.vault.QueryCriteria_TimeCondition" : {
        "required" : [ "type" ],
        "type" : "object",
        "properties" : {
          "type" : {
            "type" : "string",
            "enum" : [ "RECORDED", "CONSUMED" ]
          },
          "predicate" : {
            "$ref" : "#/components/schemas/net.corda.core.node.services.vault.ColumnPredicate_Instant"
          }
        }
      },
      "net.corda.core.node.services.vault.QueryCriteria_VaultCustomQueryCriteria" : {
        "required" : [ "constraintTypes", "constraints", "expression", "relevancyStatus", "status" ],
        "type" : "object",
        "allOf" : [ {
          "$ref" : "#/components/schemas/net.corda.core.node.services.vault.QueryCriteria"
        }, {
          "type" : "object",
          "properties" : {
            "expression" : {
              "$ref" : "#/components/schemas/net.corda.core.node.services.vault.CriteriaExpression_net_corda_core_schemas_StatePersistable_Boolean"
            },
            "status" : {
              "type" : "string",
              "enum" : [ "UNCONSUMED", "CONSUMED", "ALL" ]
            },
            "contractStateTypes" : {
              "uniqueItems" : true,
              "type" : "array",
              "items" : {
                "type" : "string",
                "description" : "Java class name",
                "example" : "java.lang.Object"
              }
            },
            "relevancyStatus" : {
              "type" : "string",
              "enum" : [ "RELEVANT", "NOT_RELEVANT", "ALL" ]
            },
            "constraintTypes" : {
              "uniqueItems" : true,
              "type" : "array",
              "items" : {
                "type" : "string",
                "enum" : [ "ALWAYS_ACCEPT", "HASH", "CZ_WHITELISTED", "SIGNATURE" ]
              }
            },
            "constraints" : {
              "uniqueItems" : true,
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/net.corda.core.node.services.Vault_ConstraintInfo"
              }
            },
            "participants" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/net.corda.core.identity.AbstractParty"
              }
            }
          }
        } ]
      },
      "net.corda.core.node.services.vault.QueryCriteria_VaultQueryCriteria" : {
        "required" : [ "constraintTypes", "constraints", "relevancyStatus", "status" ],
        "type" : "object",
        "allOf" : [ {
          "$ref" : "#/components/schemas/net.corda.core.node.services.vault.QueryCriteria"
        }, {
          "type" : "object",
          "properties" : {
            "status" : {
              "type" : "string",
              "enum" : [ "UNCONSUMED", "CONSUMED", "ALL" ]
            },
            "contractStateTypes" : {
              "uniqueItems" : true,
              "type" : "array",
              "items" : {
                "type" : "string",
                "description" : "Java class name",
                "example" : "java.lang.Object"
              }
            },
            "stateRefs" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/net.corda.core.contracts.StateRef"
              }
            },
            "notary" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/net.corda.core.identity.AbstractParty"
              }
            },
            "softLockingCondition" : {
              "$ref" : "#/components/schemas/net.corda.core.node.services.vault.QueryCriteria_SoftLockingCondition"
            },
            "timeCondition" : {
              "$ref" : "#/components/schemas/net.corda.core.node.services.vault.QueryCriteria_TimeCondition"
            },
            "relevancyStatus" : {
              "type" : "string",
              "enum" : [ "RELEVANT", "NOT_RELEVANT", "ALL" ]
            },
            "constraintTypes" : {
              "uniqueItems" : true,
              "type" : "array",
              "items" : {
                "type" : "string",
                "enum" : [ "ALWAYS_ACCEPT", "HASH", "CZ_WHITELISTED", "SIGNATURE" ]
              }
            },
            "constraints" : {
              "uniqueItems" : true,
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/net.corda.core.node.services.Vault_ConstraintInfo"
              }
            },
            "participants" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/net.corda.core.identity.AbstractParty"
              }
            }
          }
        } ]
      },
      "net.corda.core.node.services.vault.Sort" : {
        "required" : [ "columns" ],
        "type" : "object",
        "properties" : {
          "columns" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/net.corda.core.node.services.vault.Sort_SortColumn"
            }
          }
        }
      },
      "net.corda.core.node.services.vault.SortAttribute" : {
        "type" : "object"
      },
      "net.corda.core.node.services.vault.Sort_SortColumn" : {
        "required" : [ "direction" ],
        "type" : "object",
        "properties" : {
          "sortAttribute" : {
            "$ref" : "#/components/schemas/net.corda.core.node.services.vault.SortAttribute"
          },
          "direction" : {
            "type" : "string",
            "enum" : [ "ASC", "DESC" ]
          }
        }
      },
      "generated.net.corda.core.flows.ContractUpgradeFlow_AuthorisePayload" : {
        "type" : "object",
        "properties" : {
          "stateAndRef" : {
            "$ref" : "#/components/schemas/net.corda.core.contracts.StateAndRef_Object"
          },
          "upgradedContractClass" : {
            "type" : "string",
            "description" : "Java class name",
            "example" : "java.lang.Object"
          }
        }
      },
      "net.corda.core.contracts.StateAndRef_Object" : {
        "type" : "object",
        "properties" : {
          "state" : {
            "$ref" : "#/components/schemas/net.corda.core.contracts.TransactionState_Object"
          },
          "ref" : {
            "$ref" : "#/components/schemas/net.corda.core.contracts.StateRef"
          }
        }
      },
      "net.corda.core.contracts.TransactionState_Object" : {
        "required" : [ "contract", "data" ],
        "type" : "object",
        "properties" : {
          "data" : {
            "type" : "object"
          },
          "contract" : {
            "type" : "string"
          },
          "notary" : {
            "$ref" : "#/components/schemas/net.corda.core.identity.Party"
          },
          "encumbrance" : {
            "type" : "integer",
            "format" : "int32"
          },
          "constraint" : {
            "$ref" : "#/components/schemas/net.corda.core.contracts.AttachmentConstraint"
          }
        }
      },
      "generated.net.corda.core.flows.ContractUpgradeFlow_DeauthorisePayload" : {
        "type" : "object",
        "properties" : {
          "stateRef" : {
            "$ref" : "#/components/schemas/net.corda.core.contracts.StateRef"
          }
        }
      },
      "net.corda.client.jackson.JacksonSupport_SignedTransactionMixin" : {
        "required" : [ "signatures", "transaction" ],
        "type" : "object",
        "properties" : {
          "transaction" : {
            "$ref" : "#/components/schemas/net.corda.core.transactions.CoreTransaction"
          },
          "signatures" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "description" : "Hex encoded Byte Array",
              "example" : "736F6D654279746573"
            }
          }
        }
      },
      "net.corda.core.transactions.BaseTransaction" : {
        "required" : [ "id", "inputs", "outputStates", "outputs", "references" ],
        "type" : "object",
        "properties" : {
          "inputs" : {
            "type" : "array",
            "items" : {
              "type" : "object"
            }
          },
          "references" : {
            "type" : "array",
            "items" : {
              "type" : "object"
            }
          },
          "notary" : {
            "$ref" : "#/components/schemas/net.corda.core.identity.Party"
          },
          "outputs" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/net.corda.core.contracts.TransactionState_net_corda_core_contracts_ContractState"
            }
          },
          "outputStates" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/net.corda.core.contracts.ContractState"
            }
          },
          "id" : {
            "type" : "string",
            "description" : "Base 58 Encoded Secure Hash",
            "example" : "GfHq2tTVk9z4eXgyUuofmR16H6j7srXt8BCyidKdrZL5JEwFqHgDSuiinbTE"
          }
        }
      },
      "net.corda.core.transactions.CoreTransaction" : {
        "required" : [ "id", "inputs", "outputStates", "outputs", "references" ],
        "type" : "object",
        "properties" : {
          "inputs" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/net.corda.core.contracts.StateRef"
            }
          },
          "references" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/net.corda.core.contracts.StateRef"
            }
          },
          "networkParametersHash" : {
            "type" : "string",
            "description" : "Base 58 Encoded Secure Hash",
            "example" : "GfHq2tTVk9z4eXgyUuofmR16H6j7srXt8BCyidKdrZL5JEwFqHgDSuiinbTE"
          },
          "notary" : {
            "$ref" : "#/components/schemas/net.corda.core.identity.Party"
          },
          "outputs" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/net.corda.core.contracts.TransactionState_net_corda_core_contracts_ContractState"
            }
          },
          "outputStates" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/net.corda.core.contracts.ContractState"
            }
          },
          "id" : {
            "type" : "string",
            "description" : "Base 58 Encoded Secure Hash",
            "example" : "GfHq2tTVk9z4eXgyUuofmR16H6j7srXt8BCyidKdrZL5JEwFqHgDSuiinbTE"
          }
        }
      },
      "net.corda.core.transactions.SignedTransaction" : {
        "required" : [ "missingSigners", "notaryChangeTransaction", "references", "signatures" ],
        "type" : "object",
        "properties" : {
          "signatures" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "description" : "Hex encoded Byte Array",
              "example" : "736F6D654279746573"
            }
          },
          "coreTransaction" : {
            "$ref" : "#/components/schemas/net.corda.core.transactions.CoreTransaction"
          },
          "references" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/net.corda.core.contracts.StateRef"
            }
          },
          "networkParametersHash" : {
            "type" : "string",
            "description" : "Base 58 Encoded Secure Hash",
            "example" : "GfHq2tTVk9z4eXgyUuofmR16H6j7srXt8BCyidKdrZL5JEwFqHgDSuiinbTE"
          },
          "notaryChangeTransaction" : {
            "type" : "boolean"
          },
          "missingSigners" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "type" : "string",
              "description" : "Base 58 Encoded Public Key",
              "example" : "GfHq2tTVk9z4eXgyUuofmR16H6j7srXt8BCyidKdrZL5JEwFqHgDSuiinbTE"
            }
          }
        }
      },
      "net.corda.finance.flows.AbstractCashFlow_Result" : {
        "type" : "object",
        "properties" : {
          "stx" : {
            "$ref" : "#/components/schemas/net.corda.core.transactions.SignedTransaction"
          },
          "recipient" : {
            "$ref" : "#/components/schemas/net.corda.core.identity.AbstractParty"
          }
        }
      },
      "AmountCurrency" : {
        "required" : [ "displayTokenSize", "quantity", "token" ],
        "type" : "object",
        "properties" : {
          "quantity" : {
            "type" : "integer",
            "description" : "total amount in minor units",
            "format" : "int32",
            "example" : 100
          },
          "displayTokenSize" : {
            "type" : "number",
            "example" : 0.01
          },
          "token" : {
            "type" : "string",
            "example" : "GBP"
          }
        }
      },
      "generated.net.corda.finance.flows.CashExitFlowPayload" : {
        "type" : "object",
        "properties" : {
          "amount" : {
            "$ref" : "#/components/schemas/AmountCurrency"
          },
          "issuerRef" : {
            "type" : "string",
            "description" : "Hex encoded Byte Array",
            "example" : "736F6D654279746573"
          }
        }
      },
      "generated.net.corda.finance.flows.CashIssueAndPaymentFlowPayload" : {
        "type" : "object",
        "properties" : {
          "amount" : {
            "$ref" : "#/components/schemas/AmountCurrency"
          },
          "issueRef" : {
            "type" : "string",
            "description" : "Hex encoded Byte Array",
            "example" : "736F6D654279746573"
          },
          "recipient" : {
            "$ref" : "#/components/schemas/net.corda.core.identity.Party"
          },
          "anonymous" : {
            "type" : "boolean"
          },
          "notary" : {
            "$ref" : "#/components/schemas/net.corda.core.identity.Party"
          }
        }
      },
      "generated.net.corda.finance.flows.CashIssueFlowPayload" : {
        "type" : "object",
        "properties" : {
          "amount" : {
            "$ref" : "#/components/schemas/AmountCurrency"
          },
          "issuerBankPartyRef" : {
            "type" : "string",
            "description" : "Hex encoded Byte Array",
            "example" : "736F6D654279746573"
          },
          "notary" : {
            "$ref" : "#/components/schemas/net.corda.core.identity.Party"
          }
        }
      },
      "generated.net.corda.finance.flows.CashPaymentFlowPayload" : {
        "type" : "object",
        "properties" : {
          "amount" : {
            "$ref" : "#/components/schemas/AmountCurrency"
          },
          "recipient" : {
            "$ref" : "#/components/schemas/net.corda.core.identity.Party"
          },
          "anonymous" : {
            "type" : "boolean"
          },
          "issuerConstraint" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/net.corda.core.identity.Party"
            }
          },
          "notary" : {
            "$ref" : "#/components/schemas/net.corda.core.identity.Party"
          }
        }
      },
      "net.corda.finance.internal.CashConfiguration" : {
        "required" : [ "issuableCurrencies", "supportedCurrencies" ],
        "type" : "object",
        "properties" : {
          "issuableCurrencies" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "description" : "3 digit ISO 4217 code of the currency",
              "example" : "GBP"
            }
          },
          "supportedCurrencies" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "description" : "3 digit ISO 4217 code of the currency",
              "example" : "GBP"
            }
          }
        }
      },
      "generated.net.corda.finance.internal.CashConfigDataFlowPayload" : {
        "type" : "object"
      },
      "generated.net.corda.examples.obligation.flows.IssueObligation_InitiatorPayload": {
        "type": "object",
        "properties": {
          "amount": {
            "$ref": "#/components/schemas/AmountCurrency"
          },
          "lender": {
            "$ref": "#/components/schemas/net.corda.core.identity.Party"
          },
          "anonymous": {
            "type": "boolean"
          }
        }
      },
      "generated.net.corda.examples.obligation.flows.SettleObligation_InitiatorPayload": {
        "type": "object",
        "properties": {
          "linearId": {
            "$ref": "#/components/schemas/net.corda.core.contracts.UniqueIdentifier"
          },
          "amount": {
            "$ref": "#/components/schemas/AmountCurrency"
          },
          "anonymous": {
            "type": "boolean"
          }
        }
      },
      "net.corda.core.contracts.UniqueIdentifier": {
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "externalId": {
            "type": "string"
          },
          "id": {
            "type": "string",
            "format": "uuid"
          }
        }
      },
      "generated.net.corda.examples.obligation.flows.TransferObligation_InitiatorPayload": {
        "type": "object",
        "properties": {
          "linearId": {
            "$ref": "#/components/schemas/net.corda.core.contracts.UniqueIdentifier"
          },
          "newLender": {
            "$ref": "#/components/schemas/net.corda.core.identity.Party"
          },
          "anonymous": {
            "type": "boolean"
          }
        }
      },
      "net.corda.core.context.Actor" : {
        "required" : [ "owningLegalIdentity" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "$ref" : "#/components/schemas/net.corda.core.context.Actor_Id"
          },
          "serviceId" : {
            "$ref" : "#/components/schemas/net.corda.core.context.AuthServiceId"
          },
          "owningLegalIdentity" : {
            "type" : "string",
            "description" : "CordaX500Name encoded Party",
            "example" : "O=Bank A, L=London, C=GB"
          }
        }
      },
      "net.corda.core.context.Actor_Id" : {
        "required" : [ "value" ],
        "type" : "object",
        "properties" : {
          "value" : {
            "type" : "string"
          }
        }
      },
      "net.corda.core.context.AuthServiceId" : {
        "required" : [ "value" ],
        "type" : "object",
        "properties" : {
          "value" : {
            "type" : "string"
          }
        }
      },
      "net.corda.core.context.InvocationContext" : {
        "type" : "object",
        "properties" : {
          "origin" : {
            "$ref" : "#/components/schemas/net.corda.core.context.InvocationOrigin"
          },
          "trace" : {
            "$ref" : "#/components/schemas/net.corda.core.context.Trace"
          },
          "actor" : {
            "$ref" : "#/components/schemas/net.corda.core.context.Actor"
          },
          "externalTrace" : {
            "$ref" : "#/components/schemas/net.corda.core.context.Trace"
          },
          "impersonatedActor" : {
            "$ref" : "#/components/schemas/net.corda.core.context.Actor"
          }
        }
      },
      "net.corda.core.context.InvocationOrigin" : {
        "type" : "object"
      },
      "net.corda.core.context.Trace" : {
        "type" : "object",
        "properties" : {
          "invocationId" : {
            "$ref" : "#/components/schemas/net.corda.core.context.Trace_InvocationId"
          },
          "sessionId" : {
            "$ref" : "#/components/schemas/net.corda.core.context.Trace_SessionId"
          }
        }
      },
      "net.corda.core.context.Trace_InvocationId" : {
        "required" : [ "timestamp", "value" ],
        "type" : "object",
        "properties" : {
          "value" : {
            "type" : "string"
          },
          "timestamp" : {
            "type" : "string",
            "description" : "JSR310 encoded time representation of Instant"
          },
          "entityType" : {
            "type" : "string"
          }
        }
      },
      "net.corda.core.context.Trace_SessionId" : {
        "required" : [ "timestamp", "value" ],
        "type" : "object",
        "properties" : {
          "value" : {
            "type" : "string"
          },
          "timestamp" : {
            "type" : "string",
            "description" : "JSR310 encoded time representation of Instant"
          },
          "entityType" : {
            "type" : "string"
          }
        }
      },
      "net.corda.core.utilities.Id" : {
        "required" : [ "timestamp", "value" ],
        "type" : "object",
        "properties" : {
          "value" : {
            "type" : "object"
          },
          "entityType" : {
            "type" : "string"
          },
          "timestamp" : {
            "type" : "string",
            "description" : "JSR310 encoded time representation of Instant"
          }
        }
      },
      "net.corda.core.context.InvocationOrigin_Peer" : {
        "required" : [ "party" ],
        "type" : "object",
        "properties" : {
          "party" : {
            "type" : "string",
            "description" : "CordaX500Name encoded Party",
            "example" : "O=Bank A, L=London, C=GB"
          }
        }
      },
      "net.corda.core.context.InvocationOrigin_RPC" : {
        "type" : "object",
        "properties" : {
          "actor" : {
            "$ref" : "#/components/schemas/net.corda.core.context.Actor"
          }
        }
      },
      "net.corda.core.context.InvocationOrigin_Scheduled" : {
        "type" : "object",
        "properties" : {
          "scheduledState" : {
            "$ref" : "#/components/schemas/net.corda.core.contracts.ScheduledStateRef"
          }
        }
      },
      "net.corda.core.contracts.ScheduledStateRef" : {
        "required" : [ "scheduledAt" ],
        "type" : "object",
        "properties" : {
          "ref" : {
            "$ref" : "#/components/schemas/net.corda.core.contracts.StateRef"
          },
          "scheduledAt" : {
            "type" : "string",
            "description" : "JSR310 encoded time representation of Instant"
          }
        }
      },
      "net.corda.core.context.InvocationOrigin_Service" : {
        "required" : [ "owningLegalIdentity", "serviceClassName" ],
        "type" : "object",
        "properties" : {
          "serviceClassName" : {
            "type" : "string"
          },
          "owningLegalIdentity" : {
            "type" : "string",
            "description" : "CordaX500Name encoded Party",
            "example" : "O=Bank A, L=London, C=GB"
          }
        }
      },
      "net.corda.core.context.InvocationOrigin_Shell" : {
        "type" : "object"
      },
      "net.corda.core.contracts.AmountTransfer" : {
        "required" : [ "destination", "quantityDelta", "source", "token" ],
        "type" : "object",
        "properties" : {
          "quantityDelta" : {
            "type" : "integer",
            "format" : "int64"
          },
          "destination" : {
            "type" : "object"
          }
        }
      },
      "net.corda.core.contracts.LinearPointer" : {
        "required" : [ "type" ],
        "type" : "object",
        "properties" : {
          "pointer" : {
            "$ref" : "#/components/schemas/net.corda.core.contracts.UniqueIdentifier"
          },
          "type" : {
            "type" : "string",
            "description" : "Java class name",
            "example" : "java.lang.Object"
          }
        }
      },
      "net.corda.core.contracts.StatePointer" : {
        "required" : [ "pointer", "type" ],
        "type" : "object",
        "properties" : {
          "type" : {
            "type" : "string",
            "description" : "Java class name",
            "example" : "java.lang.Object"
          },
          "pointer" : {
            "type" : "object"
          }
        }
      },
      "net.corda.core.contracts.StaticPointer" : {
        "required" : [ "type" ],
        "type" : "object",
        "properties" : {
          "pointer" : {
            "$ref" : "#/components/schemas/net.corda.core.contracts.StateRef"
          },
          "type" : {
            "type" : "string",
            "description" : "Java class name",
            "example" : "java.lang.Object"
          }
        }
      },
      "net.corda.core.contracts.TransactionState" : {
        "required" : [ "contract" ],
        "type" : "object",
        "properties" : {
          "data" : {
            "$ref" : "#/components/schemas/net.corda.core.contracts.ContractState"
          },
          "contract" : {
            "type" : "string"
          },
          "notary" : {
            "$ref" : "#/components/schemas/net.corda.core.identity.Party"
          },
          "encumbrance" : {
            "type" : "integer",
            "format" : "int32"
          },
          "constraint" : {
            "$ref" : "#/components/schemas/net.corda.core.contracts.AttachmentConstraint"
          }
        }
      },
      "net.corda.core.flows.AbstractStateReplacementFlow_Proposal" : {
        "required" : [ "modification" ],
        "type" : "object",
        "properties" : {
          "stateRef" : {
            "$ref" : "#/components/schemas/net.corda.core.contracts.StateRef"
          },
          "modification" : {
            "type" : "object"
          }
        }
      },
      "net.corda.core.flows.FlowInfo" : {
        "required" : [ "appName", "flowVersion" ],
        "type" : "object",
        "properties" : {
          "flowVersion" : {
            "type" : "integer",
            "format" : "int32"
          },
          "appName" : {
            "type" : "string"
          }
        }
      },
      "net.corda.core.flows.NotarisationPayload" : {
        "required" : [ "transaction" ],
        "type" : "object",
        "properties" : {
          "transaction" : {
            "type" : "object"
          },
          "requestSignature" : {
            "$ref" : "#/components/schemas/net.corda.core.flows.NotarisationRequestSignature"
          },
          "signedTransaction": {
            "$ref": "#/components/schemas/net.corda.core.transactions.SignedTransaction"
          },
          "coreTransaction" : {
            "$ref" : "#/components/schemas/net.corda.core.transactions.CoreTransaction"
          }
        }
      },
      "net.corda.core.flows.NotarisationRequestSignature" : {
        "required" : [ "digitalSignature", "platformVersion" ],
        "type" : "object",
        "properties" : {
          "digitalSignature" : {
            "type" : "string",
            "description" : "Hex encoded Byte Array",
            "example" : "736F6D654279746573"
          },
          "platformVersion" : {
            "type" : "integer",
            "format" : "int32"
          }
        }
      },
      "net.corda.core.flows.NotarisationRequest" : {
        "required" : [ "statesToConsume", "transactionId" ],
        "type" : "object",
        "properties" : {
          "statesToConsume" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/net.corda.core.contracts.StateRef"
            }
          },
          "transactionId" : {
            "type" : "string",
            "description" : "Base 58 Encoded Secure Hash",
            "example" : "GfHq2tTVk9z4eXgyUuofmR16H6j7srXt8BCyidKdrZL5JEwFqHgDSuiinbTE"
          }
        }
      },
      "net.corda.core.flows.NotarisationResponse" : {
        "required" : [ "signatures" ],
        "type" : "object",
        "properties" : {
          "signatures" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "description" : "Hex encoded Byte Array",
              "example" : "736F6D654279746573"
            }
          }
        }
      },
      "net.corda.core.flows.NotaryError" : {
        "type" : "object"
      },
      "net.corda.core.flows.NotaryError_Conflict" : {
        "required" : [ "consumedStates", "txId" ],
        "type" : "object",
        "properties" : {
          "txId" : {
            "type" : "string",
            "description" : "Base 58 Encoded Secure Hash",
            "example" : "GfHq2tTVk9z4eXgyUuofmR16H6j7srXt8BCyidKdrZL5JEwFqHgDSuiinbTE"
          },
          "consumedStates" : {
            "type" : "object",
            "additionalProperties" : {
              "$ref" : "#/components/schemas/net.corda.core.flows.StateConsumptionDetails"
            }
          }
        }
      },
      "net.corda.core.flows.StateConsumptionDetails" : {
        "required" : [ "hashOfTransactionId", "type" ],
        "type" : "object",
        "properties" : {
          "hashOfTransactionId" : {
            "type" : "string",
            "description" : "Base 58 Encoded Secure Hash",
            "example" : "GfHq2tTVk9z4eXgyUuofmR16H6j7srXt8BCyidKdrZL5JEwFqHgDSuiinbTE"
          },
          "type" : {
            "type" : "string",
            "enum" : [ "INPUT_STATE", "REFERENCE_INPUT_STATE" ]
          }
        }
      },
      "net.corda.core.flows.NotaryError_General" : {
        "type" : "object",
        "properties" : {
          "cause" : {
            "$ref": "#/components/schemas/InvocationError"
          }
        }
      },
      "net.corda.core.flows.NotaryError_RequestSignatureInvalid" : {
        "type" : "object",
        "properties" : {
          "cause" : {
            "$ref": "#/components/schemas/InvocationError"
          }
        }
      },
      "io.bluebank.braid.corda.serialisation.mixin.TimeWindowMixin" : {
        "type" : "object"
      },
      "net.corda.core.contracts.TimeWindow" : {
        "type" : "object",
        "properties" : {
          "untilTime" : {
            "type" : "string",
            "description" : "JSR310 encoded time representation of Instant"
          },
          "midpoint" : {
            "type" : "string",
            "description" : "JSR310 encoded time representation of Instant"
          },
          "fromTime": {
            "type": "string",
            "description": "JSR310 encoded time representation of Instant"
          }
        }
      },
      "net.corda.core.flows.NotaryError_TimeWindowInvalid" : {
        "required" : [ "currentTime" ],
        "type" : "object",
        "properties" : {
          "currentTime" : {
            "type" : "string",
            "description" : "JSR310 encoded time representation of Instant"
          },
          "txTimeWindow" : {
            "$ref" : "#/components/schemas/net.corda.core.contracts.TimeWindow"
          }
        }
      },
      "net.corda.core.flows.NotaryError_TransactionInvalid" : {
        "type" : "object",
        "properties" : {
          "cause" : {
            "$ref": "#/components/schemas/InvocationError"
          }
        }
      },
      "net.corda.core.flows.NotaryError_WrongNotary" : {
        "type" : "object"
      },
      "net.corda.core.flows.WaitTimeUpdate" : {
        "required" : [ "waitTime" ],
        "type" : "object",
        "properties" : {
          "waitTime" : {
            "type" : "string",
            "description" : "JSR310 encoded time representation of Duration"
          }
        }
      },
      "net.corda.core.identity.PartyAndCertificate" : {
        "required" : [ "certPath", "certificate", "name", "owningKey" ],
        "type" : "object",
        "properties" : {
          "certPath" : {
            "type" : "string",
            "description" : "X509 encoded certificate PKI path",
            "format" : "byte"
          },
          "certificate" : {
            "type" : "string",
            "description" : "X509 encoded certificate",
            "format" : "byte"
          },
          "party" : {
            "$ref" : "#/components/schemas/net.corda.core.identity.Party"
          },
          "name" : {
            "type" : "string",
            "description" : "CordaX500Name encoded Party",
            "example" : "O=Bank A, L=London, C=GB"
          },
          "owningKey" : {
            "type" : "string",
            "description" : "Base 58 Encoded Public Key",
            "example" : "GfHq2tTVk9z4eXgyUuofmR16H6j7srXt8BCyidKdrZL5JEwFqHgDSuiinbTE"
          }
        }
      },
      "net.corda.core.node.NodeInfo" : {
        "required" : [ "addresses", "legalIdentities", "legalIdentitiesAndCerts", "platformVersion", "serial" ],
        "type" : "object",
        "properties" : {
          "addresses" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/net.corda.core.utilities.NetworkHostAndPort"
            }
          },
          "legalIdentitiesAndCerts" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/net.corda.core.identity.PartyAndCertificate"
            }
          },
          "platformVersion" : {
            "type" : "integer",
            "format" : "int32"
          },
          "serial" : {
            "type" : "integer",
            "format" : "int64"
          },
          "legalIdentities" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/net.corda.core.identity.Party"
            }
          }
        }
      },
      "net.corda.core.node.services.NetworkMapCache_MapChange" : {
        "type" : "object",
        "properties" : {
          "node" : {
            "$ref" : "#/components/schemas/net.corda.core.node.NodeInfo"
          }
        }
      },
      "net.corda.core.node.services.NetworkMapCache_MapChange_Added" : {
        "type" : "object",
        "properties" : {
          "node" : {
            "$ref" : "#/components/schemas/net.corda.core.node.NodeInfo"
          }
        }
      },
      "net.corda.core.node.services.NetworkMapCache_MapChange_Modified" : {
        "type" : "object",
        "properties" : {
          "node" : {
            "$ref" : "#/components/schemas/net.corda.core.node.NodeInfo"
          },
          "previousNode" : {
            "$ref" : "#/components/schemas/net.corda.core.node.NodeInfo"
          }
        }
      },
      "net.corda.core.node.services.NetworkMapCache_MapChange_Removed" : {
        "type" : "object",
        "properties" : {
          "node" : {
            "$ref" : "#/components/schemas/net.corda.core.node.NodeInfo"
          }
        }
      },
      "net.corda.core.node.services.Vault" : {
        "required" : [ "states" ],
        "type" : "object",
        "properties" : {
          "states" : {
            "type" : "object"
          }
        }
      },
      "net.corda.core.node.services.Vault_Page" : {
        "required" : [ "otherResults", "stateTypes", "states", "statesMetadata", "totalStatesAvailable" ],
        "type" : "object",
        "properties" : {
          "states" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/net.corda.core.contracts.StateAndRef_net_corda_core_contracts_ContractState"
            }
          },
          "statesMetadata" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/net.corda.core.node.services.Vault_StateMetadata"
            }
          },
          "totalStatesAvailable" : {
            "type" : "integer",
            "format" : "int64"
          },
          "stateTypes" : {
            "type" : "string",
            "enum" : [ "UNCONSUMED", "CONSUMED", "ALL" ]
          },
          "otherResults" : {
            "type" : "array",
            "items" : {
              "type" : "object"
            }
          }
        }
      },
      "net.corda.core.node.services.Vault_Update" : {
        "required" : [ "consumed", "empty", "produced", "references", "type" ],
        "type" : "object",
        "properties" : {
          "consumed" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/net.corda.core.contracts.StateAndRef_net_corda_core_contracts_ContractState"
            }
          },
          "produced" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/net.corda.core.contracts.StateAndRef_net_corda_core_contracts_ContractState"
            }
          },
          "flowId" : {
            "type" : "string",
            "format" : "uuid"
          },
          "type" : {
            "type" : "string",
            "enum" : [ "GENERAL", "NOTARY_CHANGE", "CONTRACT_UPGRADE" ]
          },
          "references" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/net.corda.core.contracts.StateAndRef_net_corda_core_contracts_ContractState"
            }
          },
          "empty" : {
            "type" : "boolean"
          }
        }
      },
      "net.corda.core.node.services.vault.AttachmentQueryCriteria" : {
        "type" : "object"
      },
      "net.corda.core.node.services.vault.AttachmentQueryCriteria_AndComposition" : {
        "type" : "object",
        "properties" : {
          "a" : {
            "$ref" : "#/components/schemas/net.corda.core.node.services.vault.AttachmentQueryCriteria"
          },
          "b" : {
            "$ref" : "#/components/schemas/net.corda.core.node.services.vault.AttachmentQueryCriteria"
          }
        }
      },
      "net.corda.core.node.services.vault.AttachmentQueryCriteria_AttachmentsQueryCriteria" : {
        "type" : "object",
        "properties" : {
          "uploaderCondition" : {
            "$ref" : "#/components/schemas/net.corda.core.node.services.vault.ColumnPredicate_String"
          },
          "filenameCondition" : {
            "$ref" : "#/components/schemas/net.corda.core.node.services.vault.ColumnPredicate_String"
          },
          "uploadDateCondition" : {
            "$ref" : "#/components/schemas/net.corda.core.node.services.vault.ColumnPredicate_Instant"
          },
          "contractClassNamesCondition" : {
            "$ref" : "#/components/schemas/net.corda.core.node.services.vault.ColumnPredicate_List_String"
          },
          "signersCondition" : {
            "$ref" : "#/components/schemas/net.corda.core.node.services.vault.ColumnPredicate_List_PublicKey"
          },
          "isSignedCondition" : {
            "$ref" : "#/components/schemas/net.corda.core.node.services.vault.ColumnPredicate_Boolean"
          },
          "versionCondition" : {
            "$ref" : "#/components/schemas/net.corda.core.node.services.vault.ColumnPredicate_Integer"
          }
        }
      },
      "net.corda.core.node.services.vault.ColumnPredicate_Boolean" : {
        "type" : "object"
      },
      "net.corda.core.node.services.vault.ColumnPredicate_Integer" : {
        "type" : "object"
      },
      "net.corda.core.node.services.vault.ColumnPredicate_List_PublicKey" : {
        "type" : "object"
      },
      "net.corda.core.node.services.vault.ColumnPredicate_List_String" : {
        "type" : "object"
      },
      "net.corda.core.node.services.vault.ColumnPredicate_String" : {
        "type" : "object"
      },
      "net.corda.core.node.services.vault.AttachmentQueryCriteria_OrComposition" : {
        "type" : "object",
        "properties" : {
          "a" : {
            "$ref" : "#/components/schemas/net.corda.core.node.services.vault.AttachmentQueryCriteria"
          },
          "b" : {
            "$ref" : "#/components/schemas/net.corda.core.node.services.vault.AttachmentQueryCriteria"
          }
        }
      },
      "net.corda.core.node.services.vault.AttachmentSort" : {
        "required" : [ "columns" ],
        "type" : "object",
        "properties" : {
          "columns" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/net.corda.core.node.services.vault.AttachmentSort_AttachmentSortColumn"
            }
          }
        }
      },
      "net.corda.core.node.services.vault.AttachmentSort_AttachmentSortColumn" : {
        "required" : [ "direction", "sortAttribute" ],
        "type" : "object",
        "properties" : {
          "sortAttribute" : {
            "type" : "string",
            "enum" : [ "INSERTION_DATE", "UPLOADER", "FILENAME", "VERSION" ]
          },
          "direction" : {
            "type" : "string",
            "enum" : [ "ASC", "DESC" ]
          }
        }
      },
      "net.corda.core.node.services.vault.Builder" : {
        "type" : "object"
      },
      "net.corda.core.node.services.vault.Column" : {
        "required" : [ "declaringClass", "name" ],
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string"
          },
          "declaringClass" : {
            "type" : "string",
            "description" : "Java class name",
            "example" : "java.lang.Object"
          }
        }
      },
      "net.corda.core.node.services.vault.SortAttribute_Custom" : {
        "required" : [ "entityStateClass", "entityStateColumnName" ],
        "type" : "object",
        "properties" : {
          "entityStateClass" : {
            "type" : "string",
            "description" : "Java class name",
            "example" : "java.lang.Object"
          },
          "entityStateColumnName" : {
            "type" : "string"
          }
        }
      },
      "net.corda.core.node.services.vault.SortAttribute_Standard" : {
        "type" : "object",
        "properties" : {
          "attribute" : {
            "$ref" : "#/components/schemas/net.corda.core.node.services.vault.Sort_Attribute"
          }
        }
      },
      "net.corda.core.node.services.vault.Sort_Attribute" : {
        "type" : "object"
      },
      "net.corda.core.schemas.CommonSchemaV1_FungibleState" : {
        "required" : [ "issuerRef", "quantity" ],
        "type" : "object",
        "properties" : {
          "participants" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/net.corda.core.identity.AbstractParty"
            }
          },
          "owner" : {
            "$ref" : "#/components/schemas/net.corda.core.identity.AbstractParty"
          },
          "quantity" : {
            "type" : "integer",
            "format" : "int64"
          },
          "issuer" : {
            "$ref" : "#/components/schemas/net.corda.core.identity.AbstractParty"
          },
          "issuerRef" : {
            "type" : "string",
            "format" : "binary"
          },
          "stateRef" : {
            "$ref" : "#/components/schemas/net.corda.core.schemas.PersistentStateRef"
          }
        }
      },
      "net.corda.core.schemas.PersistentState" : {
        "type" : "object",
        "properties" : {
          "stateRef" : {
            "$ref" : "#/components/schemas/net.corda.core.schemas.PersistentStateRef"
          }
        }
      },
      "net.corda.core.schemas.PersistentStateRef" : {
        "required" : [ "index", "txId" ],
        "type" : "object",
        "properties" : {
          "txId" : {
            "type" : "string"
          },
          "index" : {
            "type" : "integer",
            "format" : "int32"
          }
        }
      },
      "net.corda.core.schemas.CommonSchemaV1_LinearState" : {
        "required" : [ "uuid" ],
        "type" : "object",
        "properties" : {
          "participants" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/net.corda.core.identity.AbstractParty"
            }
          },
          "externalId" : {
            "type" : "string"
          },
          "uuid" : {
            "type" : "string",
            "format" : "uuid"
          },
          "stateRef" : {
            "$ref" : "#/components/schemas/net.corda.core.schemas.PersistentStateRef"
          }
        }
      },
      "net.corda.core.transactions.ComponentGroup" : {
        "required" : [ "components", "groupIndex" ],
        "type" : "object",
        "properties" : {
          "groupIndex" : {
            "type" : "integer",
            "format" : "int32"
          },
          "components" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "description" : "Hex encoded Byte Array",
              "example" : "736F6D654279746573"
            }
          }
        }
      },
      "net.corda.core.transactions.ContractUpgradeFilteredTransaction_FilteredComponent" : {
        "required" : [ "component", "nonce" ],
        "type" : "object",
        "properties" : {
          "component" : {
            "type" : "string",
            "description" : "Hex encoded Byte Array",
            "example" : "736F6D654279746573"
          },
          "nonce" : {
            "type" : "string",
            "description" : "Base 58 Encoded Secure Hash",
            "example" : "GfHq2tTVk9z4eXgyUuofmR16H6j7srXt8BCyidKdrZL5JEwFqHgDSuiinbTE"
          }
        }
      },
      "net.corda.finance.contracts.BusinessCalendar" : {
        "required" : [ "holidayDates" ],
        "type" : "object",
        "properties" : {
          "holidayDates" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "type" : "string",
              "description" : "JSR310 encoded time representation of LocalDate"
            }
          }
        }
      },
      "net.corda.finance.contracts.Commodity" : {
        "required" : [ "commodityCode", "defaultFractionDigits", "displayName", "displayTokenSize" ],
        "type" : "object",
        "properties" : {
          "commodityCode" : {
            "type" : "string"
          },
          "displayName" : {
            "type" : "string"
          },
          "defaultFractionDigits" : {
            "type" : "integer",
            "format" : "int32"
          },
          "displayTokenSize" : {
            "type" : "number"
          }
        }
      },
      "net.corda.finance.contracts.Expression" : {
        "required" : [ "expr" ],
        "type" : "object",
        "properties" : {
          "expr" : {
            "type" : "string"
          }
        }
      },
      "net.corda.finance.contracts.FixOf" : {
        "required" : [ "forDay", "name" ],
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string"
          },
          "forDay" : {
            "type" : "string",
            "description" : "JSR310 encoded time representation of LocalDate"
          },
          "ofTenor" : {
            "$ref" : "#/components/schemas/net.corda.finance.contracts.Tenor"
          }
        }
      },
      "net.corda.finance.contracts.Tenor" : {
        "required" : [ "name" ],
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string"
          }
        }
      },
      "Issued" : {
        "required" : [ "_productType", "issuer", "product" ],
        "type" : "object",
        "properties" : {
          "issuer" : {
            "required" : [ "party", "reference" ],
            "type" : "object",
            "properties" : {
              "party" : {
                "$ref" : "#/components/schemas/net.corda.core.identity.AbstractParty"
              },
              "reference" : {
                "type" : "string",
                "description" : "Hex encoded Byte Array",
                "example" : "736F6D654279746573"
              }
            }
          },
          "product" : {
            "type" : "object"
          },
          "_productType" : {
            "type" : "string",
            "example" : "java.util.Currency"
          }
        }
      },
      "net.corda.core.contracts.PartyAndReference" : {
        "required" : [ "party", "reference" ],
        "type" : "object",
        "properties" : {
          "party" : {
            "$ref" : "#/components/schemas/net.corda.core.identity.AbstractParty"
          },
          "reference" : {
            "type" : "string",
            "description" : "Hex encoded Byte Array",
            "example" : "736F6D654279746573"
          }
        }
      },
      "net.corda.core.utilities.NonEmptySet_net_corda_core_contracts_Issued_Object" : {
        "uniqueItems" : true,
        "required" : [ "empty", "size" ],
        "type" : "array",
        "properties" : {
          "elements" : {
            "uniqueItems" : true,
            "type" : "array",
            "writeOnly" : true,
            "items" : {
              "$ref" : "#/components/schemas/Issued"
            }
          },
          "empty" : {
            "type" : "boolean"
          },
          "size" : {
            "type" : "integer",
            "format" : "int32"
          }
        },
        "items" : {
          "$ref" : "#/components/schemas/Issued"
        }
      },
      "net.corda.core.utilities.NonEmptySet_net_corda_core_crypto_SecureHash" : {
        "uniqueItems" : true,
        "required" : [ "empty", "size" ],
        "type" : "array",
        "properties" : {
          "elements" : {
            "uniqueItems" : true,
            "type" : "array",
            "writeOnly" : true,
            "items" : {
              "type" : "string",
              "description" : "Base 58 Encoded Secure Hash",
              "example" : "GfHq2tTVk9z4eXgyUuofmR16H6j7srXt8BCyidKdrZL5JEwFqHgDSuiinbTE"
            }
          },
          "empty" : {
            "type" : "boolean"
          },
          "size" : {
            "type" : "integer",
            "format" : "int32"
          }
        },
        "items" : {
          "type" : "string",
          "description" : "Base 58 Encoded Secure Hash",
          "example" : "GfHq2tTVk9z4eXgyUuofmR16H6j7srXt8BCyidKdrZL5JEwFqHgDSuiinbTE"
        }
      },
      "net.corda.finance.contracts.asset.Obligation_Terms" : {
        "required" : [ "acceptableContracts", "acceptableIssuedProducts", "dueBefore", "product", "timeTolerance" ],
        "type" : "object",
        "properties" : {
          "acceptableContracts" : {
            "uniqueItems" : true,
            "required" : [ "empty", "size" ],
            "type" : "array",
            "properties" : {
              "elements" : {
                "uniqueItems" : true,
                "type" : "array",
                "writeOnly" : true,
                "items" : {
                  "type" : "string",
                  "description" : "Base 58 Encoded Secure Hash",
                  "example" : "GfHq2tTVk9z4eXgyUuofmR16H6j7srXt8BCyidKdrZL5JEwFqHgDSuiinbTE"
                }
              },
              "empty" : {
                "type" : "boolean"
              },
              "size" : {
                "type" : "integer",
                "format" : "int32"
              }
            },
            "items" : {
              "type" : "string",
              "description" : "Base 58 Encoded Secure Hash",
              "example" : "GfHq2tTVk9z4eXgyUuofmR16H6j7srXt8BCyidKdrZL5JEwFqHgDSuiinbTE"
            }
          },
          "acceptableIssuedProducts" : {
            "uniqueItems" : true,
            "required" : [ "empty", "size" ],
            "type" : "array",
            "properties" : {
              "elements" : {
                "uniqueItems" : true,
                "type" : "array",
                "writeOnly" : true,
                "items" : {
                  "$ref" : "#/components/schemas/Issued"
                }
              },
              "empty" : {
                "type" : "boolean"
              },
              "size" : {
                "type" : "integer",
                "format" : "int32"
              }
            },
            "items" : {
              "$ref" : "#/components/schemas/Issued"
            }
          },
          "dueBefore" : {
            "type" : "string",
            "description" : "JSR310 encoded time representation of Instant"
          },
          "timeTolerance" : {
            "type" : "string",
            "description" : "JSR310 encoded time representation of Duration"
          },
          "product" : {
            "type" : "object"
          }
        }
      },
      "net.corda.finance.flows.AbstractCashFlow_AbstractRequest" : {
        "required" : [ "amount" ],
        "type" : "object",
        "properties" : {
          "amount" : {
            "$ref" : "#/components/schemas/AmountCurrency"
          }
        }
      },
      "net.corda.finance.flows.CashExitFlow_ExitRequest" : {
        "required" : [ "amount", "issuerRef" ],
        "type" : "object",
        "properties" : {
          "amount" : {
            "$ref" : "#/components/schemas/AmountCurrency"
          },
          "issuerRef" : {
            "type" : "string",
            "description" : "Hex encoded Byte Array",
            "example" : "736F6D654279746573"
          }
        }
      },
      "net.corda.finance.flows.CashIssueAndPaymentFlow_IssueAndPaymentRequest" : {
        "required" : [ "amount", "anonymous", "issueRef" ],
        "type" : "object",
        "properties" : {
          "amount" : {
            "$ref" : "#/components/schemas/AmountCurrency"
          },
          "issueRef" : {
            "type" : "string",
            "description" : "Hex encoded Byte Array",
            "example" : "736F6D654279746573"
          },
          "recipient" : {
            "$ref" : "#/components/schemas/net.corda.core.identity.Party"
          },
          "notary" : {
            "$ref" : "#/components/schemas/net.corda.core.identity.Party"
          },
          "anonymous" : {
            "type" : "boolean"
          }
        }
      },
      "net.corda.finance.flows.CashIssueFlow_IssueRequest" : {
        "required" : [ "amount", "issueRef" ],
        "type" : "object",
        "properties" : {
          "amount" : {
            "$ref" : "#/components/schemas/AmountCurrency"
          },
          "issueRef" : {
            "type" : "string",
            "description" : "Hex encoded Byte Array",
            "example" : "736F6D654279746573"
          },
          "notary" : {
            "$ref" : "#/components/schemas/net.corda.core.identity.Party"
          }
        }
      },
      "net.corda.finance.flows.CashPaymentFlow_PaymentRequest" : {
        "required" : [ "amount", "anonymous", "issuerConstraint" ],
        "type" : "object",
        "properties" : {
          "amount" : {
            "$ref" : "#/components/schemas/AmountCurrency"
          },
          "recipient" : {
            "$ref" : "#/components/schemas/net.corda.core.identity.Party"
          },
          "anonymous" : {
            "type" : "boolean"
          },
          "issuerConstraint" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/net.corda.core.identity.Party"
            }
          },
          "notary" : {
            "$ref" : "#/components/schemas/net.corda.core.identity.Party"
          }
        }
      },
      "net.corda.finance.contracts.DealState" : {
        "type" : "object",
        "properties" : {
          "linearId" : {
            "$ref" : "#/components/schemas/net.corda.core.contracts.UniqueIdentifier"
          }
        }
      },
      "net.corda.finance.flows.TwoPartyDealFlow_AutoOffer" : {
        "type" : "object",
        "properties" : {
          "notary" : {
            "$ref" : "#/components/schemas/net.corda.core.identity.Party"
          },
          "dealBeingOffered" : {
            "$ref" : "#/components/schemas/net.corda.finance.contracts.DealState"
          }
        }
      },
      "net.corda.core.identity.AnonymousParty" : {
        "required" : [ "owningKey" ],
        "type" : "object",
        "properties" : {
          "owningKey" : {
            "type" : "string",
            "description" : "Base 58 Encoded Public Key",
            "example" : "GfHq2tTVk9z4eXgyUuofmR16H6j7srXt8BCyidKdrZL5JEwFqHgDSuiinbTE"
          }
        }
      },
      "net.corda.finance.flows.TwoPartyDealFlow_Handshake" : {
        "required" : [ "payload" ],
        "type" : "object",
        "properties" : {
          "payload" : {
            "type" : "object"
          },
          "primaryIdentity" : {
            "$ref" : "#/components/schemas/net.corda.core.identity.AnonymousParty"
          },
          "secondaryIdentity" : {
            "$ref" : "#/components/schemas/net.corda.core.identity.AnonymousParty"
          }
        }
      },
      "net.corda.finance.flows.TwoPartyTradeFlow_SellerTradeInfo" : {
        "required" : [ "price" ],
        "type" : "object",
        "properties" : {
          "price" : {
            "$ref" : "#/components/schemas/AmountCurrency"
          },
          "payToIdentity" : {
            "$ref" : "#/components/schemas/net.corda.core.identity.PartyAndCertificate"
          }
        }
      },
      "net.corda.core.schemas.MappedSchema" : {
        "required" : [ "mappedTypes", "name", "version" ],
        "type" : "object",
        "properties" : {
          "schemaFamily" : {
            "type" : "string",
            "description" : "Java class name",
            "writeOnly" : true,
            "example" : "java.lang.Object"
          },
          "version" : {
            "type" : "integer",
            "format" : "int32"
          },
          "mappedTypes" : {
            "type" : "object"
          },
          "name" : {
            "type" : "string"
          },
          "migrationResource" : {
            "type" : "string"
          }
        }
      },
      "net.corda.finance.schemas.CashSchemaV1" : {
        "required" : [ "mappedTypes", "migrationResource", "name", "version" ],
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string"
          },
          "migrationResource" : {
            "type" : "string"
          },
          "version" : {
            "type" : "integer",
            "format" : "int32"
          },
          "mappedTypes" : {
            "type" : "object"
          }
        }
      },
      "net.corda.finance.schemas.CashSchemaV1_PersistentCashState" : {
        "required" : [ "currency", "issuerPartyHash", "issuerRef", "pennies" ],
        "type" : "object",
        "properties" : {
          "owner" : {
            "$ref" : "#/components/schemas/net.corda.core.identity.AbstractParty"
          },
          "pennies" : {
            "type" : "integer",
            "format" : "int64"
          },
          "currency" : {
            "type" : "string"
          },
          "issuerPartyHash" : {
            "type" : "string"
          },
          "issuerRef" : {
            "type" : "string",
            "format" : "binary"
          },
          "stateRef" : {
            "$ref" : "#/components/schemas/net.corda.core.schemas.PersistentStateRef"
          }
        }
      },
      "net.corda.finance.schemas.CommercialPaperSchemaV1" : {
        "required" : [ "mappedTypes", "migrationResource", "name", "version" ],
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string"
          },
          "migrationResource" : {
            "type" : "string"
          },
          "version" : {
            "type" : "integer",
            "format" : "int32"
          },
          "mappedTypes" : {
            "type" : "object"
          }
        }
      },
      "net.corda.finance.schemas.CommercialPaperSchemaV1_PersistentCommercialPaperState" : {
        "required" : [ "currency", "faceValue", "faceValueIssuerPartyHash", "faceValueIssuerRef", "issuancePartyHash", "issuanceRef", "maturity", "ownerHash" ],
        "type" : "object",
        "properties" : {
          "issuancePartyHash" : {
            "type" : "string"
          },
          "issuanceRef" : {
            "type" : "string",
            "format" : "binary"
          },
          "ownerHash" : {
            "type" : "string"
          },
          "maturity" : {
            "type" : "string",
            "description" : "JSR310 encoded time representation of Instant"
          },
          "faceValue" : {
            "type" : "integer",
            "format" : "int64"
          },
          "currency" : {
            "type" : "string"
          },
          "faceValueIssuerPartyHash" : {
            "type" : "string"
          },
          "faceValueIssuerRef" : {
            "type" : "string",
            "format" : "binary"
          },
          "stateRef" : {
            "$ref" : "#/components/schemas/net.corda.core.schemas.PersistentStateRef"
          }
        }
      }
    }
  }
}