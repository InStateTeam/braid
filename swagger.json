{
  "openapi" : "3.0.1",
  "info" : {
    "title" : "",
    "description" : "",
    "contact" : { },
    "version" : "1.0.0"
  },
  "servers" : [ {
    "url" : "http://localhost:8080/api/rest"
  } ],
  "paths" : {
    "/network/nodes" : {
      "get" : {
        "tags" : [ "network" ],
        "description" : "",
        "operationId" : "network_nodes",
        "parameters" : [ {
          "name" : "host-and-port",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "x500-name",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/io.bluebank.braid.corda.services.SimpleNodeInfo"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "the server failed to parse the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/InvocationError"
                }
              }
            }
          },
          "422" : {
            "description" : "the request could not be processed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/InvocationError"
                }
              }
            }
          }
        }
      }
    },
    "/network/nodes/self" : {
      "get" : {
        "tags" : [ "network" ],
        "description" : "",
        "operationId" : "network_nodes_self",
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/io.bluebank.braid.corda.services.SimpleNodeInfo"
                }
              }
            }
          },
          "400" : {
            "description" : "the server failed to parse the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/InvocationError"
                }
              }
            }
          },
          "422" : {
            "description" : "the request could not be processed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/InvocationError"
                }
              }
            }
          }
        }
      }
    },
    "/network/notaries" : {
      "get" : {
        "tags" : [ "network" ],
        "description" : "",
        "operationId" : "network_notaries",
        "parameters" : [ {
          "name" : "x500-name",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/net.corda.core.identity.Party"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "the server failed to parse the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/InvocationError"
                }
              }
            }
          },
          "422" : {
            "description" : "the request could not be processed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/InvocationError"
                }
              }
            }
          }
        }
      }
    },
    "/vault/vaultQuery" : {
      "get" : {
        "tags" : [ "vault" ],
        "description" : "",
        "operationId" : "vault_vaultQuery",
        "parameters" : [ {
          "name" : "contract-state-type",
          "in" : "query",
          "schema" : {
            "type" : "string",
            "description" : "Java class name",
            "example" : "java.lang.Object"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/net.corda.core.node.services.Vault_Page_net_corda_core_contracts_ContractState"
                }
              }
            }
          },
          "400" : {
            "description" : "the server failed to parse the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/InvocationError"
                }
              }
            }
          },
          "422" : {
            "description" : "the request could not be processed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/InvocationError"
                }
              }
            }
          }
        }
      }
    },
    "/vault/vaultQueryBy" : {
      "post" : {
        "tags" : [ "vault" ],
        "description" : "",
        "operationId" : "vault_vaultQueryBy",
        "parameters" : [ ],
        "requestBody" : {
          "description" : "vault",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/io.bluebank.braid.corda.services.vault.VaultQuery"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/net.corda.core.node.services.Vault_Page_net_corda_core_contracts_ContractState"
                }
              }
            }
          },
          "400" : {
            "description" : "the server failed to parse the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/InvocationError"
                }
              }
            }
          },
          "422" : {
            "description" : "the request could not be processed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/InvocationError"
                }
              }
            }
          }
        }
      }
    },
    "/cordapps" : {
      "get" : {
        "tags" : [ "cordapps" ],
        "description" : "",
        "operationId" : "cordapps",
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "type" : "string"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "the server failed to parse the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/InvocationError"
                }
              }
            }
          },
          "422" : {
            "description" : "the request could not be processed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/InvocationError"
                }
              }
            }
          }
        }
      }
    },
    "/cordapps/{cordapp}/flows" : {
      "get" : {
        "tags" : [ "cordapps" ],
        "description" : "",
        "operationId" : "cordapps_:cordapp_flows",
        "parameters" : [ {
          "name" : "cordapp",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "type" : "string"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "the server failed to parse the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/InvocationError"
                }
              }
            }
          },
          "422" : {
            "description" : "the request could not be processed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/InvocationError"
                }
              }
            }
          }
        }
      }
    },
    "/cordapps/corda-finance-workflows/flows/net.corda.finance.flows.CashExitFlow": {
      "post" : {
        "tags" : [ "cordapps" ],
        "description" : "",
        "operationId": "cordapps_corda_finance_workflows_flows_net.corda.finance.flows.CashExitFlow",
        "parameters" : [ ],
        "requestBody" : {
          "description" : "payload",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref": "#/components/schemas/generated.net.corda.finance.flows.CashExitFlowPayload"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/net.corda.finance.flows.AbstractCashFlow_Result"
                }
              }
            }
          },
          "400" : {
            "description" : "the server failed to parse the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/InvocationError"
                }
              }
            }
          },
          "422" : {
            "description" : "the request could not be processed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/InvocationError"
                }
              }
            }
          }
        }
      }
    },
    "/cordapps/corda-finance-workflows/flows/net.corda.finance.flows.CashIssueAndPaymentFlow": {
      "post" : {
        "tags" : [ "cordapps" ],
        "description" : "",
        "operationId": "cordapps_corda_finance_workflows_flows_net.corda.finance.flows.CashIssueAndPaymentFlow",
        "parameters" : [ ],
        "requestBody" : {
          "description" : "payload",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref": "#/components/schemas/generated.net.corda.finance.flows.CashIssueAndPaymentFlowPayload"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/net.corda.finance.flows.AbstractCashFlow_Result"
                }
              }
            }
          },
          "400" : {
            "description" : "the server failed to parse the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/InvocationError"
                }
              }
            }
          },
          "422" : {
            "description" : "the request could not be processed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/InvocationError"
                }
              }
            }
          }
        }
      }
    },
    "/cordapps/corda-finance-workflows/flows/net.corda.finance.flows.CashIssueFlow": {
      "post" : {
        "tags" : [ "cordapps" ],
        "description" : "",
        "operationId": "cordapps_corda_finance_workflows_flows_net.corda.finance.flows.CashIssueFlow",
        "parameters" : [ ],
        "requestBody" : {
          "description" : "payload",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref": "#/components/schemas/generated.net.corda.finance.flows.CashIssueFlowPayload"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/net.corda.finance.flows.AbstractCashFlow_Result"
                }
              }
            }
          },
          "400" : {
            "description" : "the server failed to parse the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/InvocationError"
                }
              }
            }
          },
          "422" : {
            "description" : "the request could not be processed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/InvocationError"
                }
              }
            }
          }
        }
      }
    },
    "/cordapps/corda-finance-workflows/flows/net.corda.finance.flows.CashPaymentFlow": {
      "post" : {
        "tags" : [ "cordapps" ],
        "description" : "",
        "operationId": "cordapps_corda_finance_workflows_flows_net.corda.finance.flows.CashPaymentFlow",
        "parameters" : [ ],
        "requestBody" : {
          "description" : "payload",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref": "#/components/schemas/generated.net.corda.finance.flows.CashPaymentFlowPayload"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/net.corda.finance.flows.AbstractCashFlow_Result"
                }
              }
            }
          },
          "400" : {
            "description" : "the server failed to parse the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/InvocationError"
                }
              }
            }
          },
          "422" : {
            "description" : "the request could not be processed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/InvocationError"
                }
              }
            }
          }
        }
      }
    },
    "/cordapps/obligation/flows/net.corda.examples.obligation.flows.IssueObligation$Initiator": {
      "post" : {
        "tags" : [ "cordapps" ],
        "description" : "",
        "operationId": "cordapps_obligation_flows_net.corda.examples.obligation.flows.IssueObligation$Initiator",
        "parameters" : [ ],
        "requestBody" : {
          "description" : "payload",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref": "#/components/schemas/generated.net.corda.examples.obligation.flows.IssueObligation_InitiatorPayload"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref": "#/components/schemas/net.corda.core.transactions.SignedTransaction"
                }
              }
            }
          },
          "400" : {
            "description" : "the server failed to parse the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/InvocationError"
                }
              }
            }
          },
          "422" : {
            "description" : "the request could not be processed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/InvocationError"
                }
              }
            }
          }
        }
      }
    },
    "/cordapps/obligation/flows/net.corda.examples.obligation.flows.SettleObligation$Initiator": {
      "post" : {
        "tags" : [ "cordapps" ],
        "description" : "",
        "operationId": "cordapps_obligation_flows_net.corda.examples.obligation.flows.SettleObligation$Initiator",
        "parameters" : [ ],
        "requestBody" : {
          "description" : "payload",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref": "#/components/schemas/generated.net.corda.examples.obligation.flows.SettleObligation_InitiatorPayload"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref": "#/components/schemas/net.corda.core.transactions.SignedTransaction"
                }
              }
            }
          },
          "400" : {
            "description" : "the server failed to parse the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/InvocationError"
                }
              }
            }
          },
          "422" : {
            "description" : "the request could not be processed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/InvocationError"
                }
              }
            }
          }
        }
      }
    },
    "/cordapps/obligation/flows/net.corda.examples.obligation.flows.TransferObligation$Initiator": {
      "post" : {
        "tags" : [ "cordapps" ],
        "description" : "",
        "operationId": "cordapps_obligation_flows_net.corda.examples.obligation.flows.TransferObligation$Initiator",
        "parameters" : [ ],
        "requestBody" : {
          "description" : "payload",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref": "#/components/schemas/generated.net.corda.examples.obligation.flows.TransferObligation_InitiatorPayload"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref": "#/components/schemas/net.corda.core.transactions.SignedTransaction"
                }
              }
            }
          },
          "400" : {
            "description" : "the server failed to parse the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/InvocationError"
                }
              }
            }
          },
          "422" : {
            "description" : "the request could not be processed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/InvocationError"
                }
              }
            }
          }
        }
      }
    }
  },
  "components" : {
    "schemas" : {
      "InvocationError" : {
        "required" : [ "message", "type" ],
        "type" : "object",
        "properties" : {
          "message" : {
            "type" : "string",
            "description" : "the error message"
          },
          "type" : {
            "type" : "string",
            "description" : "the type of error"
          }
        }
      },
      "Amount": {
        "required": [
          "displayTokenSize",
          "quantity",
          "token"
        ],
        "type": "object",
        "properties": {
          "quantity": {
            "type": "integer",
            "description": "total amount in minor units",
            "format": "int32",
            "example": 100
          },
          "displayTokenSize": {
            "type": "number",
            "example": 0.01
          },
          "token": {
            "type": "string",
            "example": "GBP"
          },
          "_tokenType": {
            "type": "string",
            "example": "net.corda.core.contracts.Issued"
          }
        }
      },
      "net.corda.core.contracts.FungibleAsset": {
        "required": [
          "amount",
          "exitKeys",
          "participants"
        ],
        "type" : "object",
        "properties" : {
          "amount": {
            "$ref": "#/components/schemas/Amount"
          },
          "exitKeys": {
            "type" : "array",
            "items" : {
              "type": "string",
              "description": "Base 58 Encoded Public Key",
              "example": "GfHq2tTVk9z4eXgyUuofmR16H6j7srXt8BCyidKdrZL5JEwFqHgDSuiinbTE"
            }
          },
          "participants": {
            "type" : "array",
            "items" : {
              "$ref": "#/components/schemas/net.corda.core.identity.AbstractParty"
            }
          },
          "owner": {
            "$ref": "#/components/schemas/net.corda.core.identity.AbstractParty"
          }
        }
      },
      "net.corda.core.identity.AbstractParty" : {
        "required" : [ "owningKey" ],
        "type" : "object",
        "properties" : {
          "owningKey" : {
            "type" : "string",
            "description" : "Base 58 Encoded Public Key",
            "example" : "GfHq2tTVk9z4eXgyUuofmR16H6j7srXt8BCyidKdrZL5JEwFqHgDSuiinbTE"
          }
        }
      },
      "net.corda.core.contracts.FungibleState": {
        "required": [
          "amount",
          "participants"
        ],
        "type": "object",
        "properties": {
          "amount": {
            "$ref": "#/components/schemas/Amount"
          },
          "participants": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/net.corda.core.identity.AbstractParty"
            }
          }
        }
      },
      "net.corda.core.contracts.LinearState": {
        "required": [
          "participants"
        ],
        "type": "object",
        "properties": {
          "linearId": {
            "$ref": "#/components/schemas/net.corda.core.contracts.UniqueIdentifier"
          },
          "participants": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/net.corda.core.identity.AbstractParty"
            }
          }
        }
      },
      "net.corda.core.contracts.UniqueIdentifier": {
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "externalId": {
            "type": "string"
          },
          "id": {
            "type": "string",
            "format": "uuid"
          }
        }
      },
      "net.corda.core.contracts.OwnableState": {
        "required": [
          "participants"
        ],
        "type": "object",
        "properties": {
          "owner": {
            "$ref": "#/components/schemas/net.corda.core.identity.AbstractParty"
          },
          "participants": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/net.corda.core.identity.AbstractParty"
            }
          }
        }
      },
      "net.corda.core.contracts.SchedulableState": {
        "required": [
          "participants"
        ],
        "type": "object",
        "properties": {
          "participants": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/net.corda.core.identity.AbstractParty"
            }
          }
        }
      },
      "net.corda.core.schemas.QueryableState": {
        "required": [
          "participants"
        ],
        "type": "object",
        "properties": {
          "participants": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/net.corda.core.identity.AbstractParty"
            }
          }
        }
      },
      "AmountCurrency": {
        "required": [
          "displayTokenSize",
          "quantity",
          "token"
        ],
        "type": "object",
        "properties": {
          "quantity": {
            "type": "integer",
            "description": "total amount in minor units",
            "format": "int32",
            "example": 100
          },
          "displayTokenSize": {
            "type": "number",
            "example": 0.01
          },
          "token": {
            "type": "string",
            "example": "GBP"
          }
        }
      },
      "net.corda.examples.obligation.Obligation": {
        "required": [
          "amount",
          "paid",
          "participants"
        ],
        "type": "object",
        "properties": {
          "amount": {
            "$ref": "#/components/schemas/AmountCurrency"
          },
          "lender": {
            "$ref": "#/components/schemas/net.corda.core.identity.AbstractParty"
          },
          "borrower": {
            "$ref": "#/components/schemas/net.corda.core.identity.AbstractParty"
          },
          "paid": {
            "$ref": "#/components/schemas/AmountCurrency"
          },
          "linearId": {
            "$ref": "#/components/schemas/net.corda.core.contracts.UniqueIdentifier"
          },
          "participants": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/net.corda.core.identity.AbstractParty"
            }
          }
        }
      },
      "net.corda.core.contracts.PartyAndReference": {
        "required": [
          "reference"
        ],
        "type": "object",
        "properties": {
          "party": {
            "$ref": "#/components/schemas/net.corda.core.identity.AbstractParty"
          },
          "reference": {
            "$ref": "#/components/schemas/net.corda.core.utilities.OpaqueBytes"
          }
        }
      },
      "net.corda.core.utilities.ByteSequence": {
        "required": [
          "bytes",
          "offset",
          "size"
        ],
        "type": "object",
        "properties": {
          "offset": {
            "type": "integer",
            "format": "int32"
          },
          "size": {
            "type": "integer",
            "format": "int32"
          },
          "bytes": {
            "type": "string",
            "format": "binary"
          }
        }
      },
      "net.corda.core.utilities.OpaqueBytes": {
        "required": [
          "bytes"
        ],
        "type": "object",
        "properties": {
          "bytes": {
            "type": "string",
            "format": "binary"
          }
        }
      },
      "net.corda.finance.contracts.CommercialPaper_State": {
        "required": [
          "faceValue",
          "maturityDate",
          "participants"
        ],
        "type": "object",
        "properties": {
          "issuance": {
            "$ref": "#/components/schemas/net.corda.core.contracts.PartyAndReference"
          },
          "owner": {
            "$ref": "#/components/schemas/net.corda.core.identity.AbstractParty"
          },
          "faceValue": {
            "$ref": "#/components/schemas/Amount"
          },
          "maturityDate": {
            "type": "string",
            "description": "JSR310 encoded time representation of Instant"
          },
          "participants": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/net.corda.core.identity.AbstractParty"
            }
          }
        }
      },
      "net.corda.finance.contracts.DealState": {
        "required": [
          "participants"
        ],
        "type": "object",
        "properties": {
          "linearId": {
            "$ref": "#/components/schemas/net.corda.core.contracts.UniqueIdentifier"
          },
          "participants": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/net.corda.core.identity.AbstractParty"
            }
          }
        }
      },
      "net.corda.core.identity.Party" : {
        "required" : [ "name", "owningKey" ],
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string",
            "description" : "CordaX500Name encoded Party",
            "example" : "O=Bank A, L=London, C=GB"
          },
          "owningKey" : {
            "type" : "string",
            "description" : "Base 58 Encoded Public Key",
            "example" : "GfHq2tTVk9z4eXgyUuofmR16H6j7srXt8BCyidKdrZL5JEwFqHgDSuiinbTE"
          }
        }
      },
      "net.corda.finance.contracts.FixableDealState": {
        "required": [
          "participants"
        ],
        "type": "object",
        "properties": {
          "oracle": {
            "$ref": "#/components/schemas/net.corda.core.identity.Party"
          },
          "linearId": {
            "$ref": "#/components/schemas/net.corda.core.contracts.UniqueIdentifier"
          },
          "participants": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/net.corda.core.identity.AbstractParty"
            }
          }
        }
      },
      "net.corda.finance.contracts.ICommercialPaperState": {
        "required": [
          "participants"
        ],
        "type": "object",
        "properties": {
          "participants": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/net.corda.core.identity.AbstractParty"
            }
          }
        }
      },
      "net.corda.finance.contracts.JavaCommercialPaper_State": {
        "type": "object",
        "properties": {
          "issuance": {
            "$ref": "#/components/schemas/net.corda.core.contracts.PartyAndReference"
          },
          "owner": {
            "$ref": "#/components/schemas/net.corda.core.identity.AbstractParty"
          },
          "faceValue": {
            "$ref": "#/components/schemas/Amount"
          },
          "maturityDate": {
            "type": "string",
            "description": "JSR310 encoded time representation of Instant"
          },
          "participants": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/net.corda.core.identity.AbstractParty"
            }
          }
        }
      },
      "net.corda.finance.contracts.asset.Cash_State": {
        "required": [
          "amount",
          "exitKeys",
          "participants"
        ],
        "type": "object",
        "properties": {
          "amount": {
            "$ref": "#/components/schemas/Amount"
          },
          "owner": {
            "$ref": "#/components/schemas/net.corda.core.identity.AbstractParty"
          },
          "exitKeys": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string",
              "description": "Base 58 Encoded Public Key",
              "example": "GfHq2tTVk9z4eXgyUuofmR16H6j7srXt8BCyidKdrZL5JEwFqHgDSuiinbTE"
            }
          },
          "participants": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/net.corda.core.identity.AbstractParty"
            }
          }
        }
      },
      "Issued": {
        "required": [
          "_productType",
          "issuer",
          "product"
        ],
        "type": "object",
        "properties": {
          "issuer": {
            "required": [
              "reference"
            ],
            "type": "object",
            "properties": {
              "party": {
                "$ref": "#/components/schemas/net.corda.core.identity.AbstractParty"
              },
              "reference": {
                "$ref": "#/components/schemas/net.corda.core.utilities.OpaqueBytes"
              }
            }
          },
          "product": {
            "type": "object"
          },
          "_productType": {
            "type": "string",
            "example": "java.util.Currency"
          }
        }
      },
      "net.corda.core.utilities.NonEmptySet_net_corda_core_contracts_Issued_Object": {
        "uniqueItems": true,
        "required": [
          "empty",
          "size"
        ],
        "type": "array",
        "properties": {
          "elements": {
            "uniqueItems": true,
            "type": "array",
            "writeOnly": true,
            "items": {
              "$ref": "#/components/schemas/Issued"
            }
          },
          "empty": {
            "type": "boolean"
          },
          "size": {
            "type": "integer",
            "format": "int32"
          }
        },
        "items": {
          "$ref": "#/components/schemas/Issued"
        }
      },
      "net.corda.core.utilities.NonEmptySet_net_corda_core_crypto_SecureHash": {
        "uniqueItems": true,
        "required": [
          "empty",
          "size"
        ],
        "type": "array",
        "properties": {
          "elements": {
            "uniqueItems": true,
            "type": "array",
            "writeOnly": true,
            "items": {
              "type": "string",
              "description": "Base 58 Encoded Secure Hash",
              "example": "GfHq2tTVk9z4eXgyUuofmR16H6j7srXt8BCyidKdrZL5JEwFqHgDSuiinbTE"
            }
          },
          "empty": {
            "type": "boolean"
          },
          "size": {
            "type": "integer",
            "format": "int32"
          }
        },
        "items": {
          "type": "string",
          "description": "Base 58 Encoded Secure Hash",
          "example": "GfHq2tTVk9z4eXgyUuofmR16H6j7srXt8BCyidKdrZL5JEwFqHgDSuiinbTE"
        }
      },
      "net.corda.finance.contracts.asset.BilateralNetState_Object": {
        "required": [
          "partyKeys"
        ],
        "type": "object",
        "properties": {
          "partyKeys": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/net.corda.core.identity.AbstractParty"
            }
          },
          "template": {
            "$ref": "#/components/schemas/net.corda.finance.contracts.asset.Obligation_Terms_Object"
          }
        }
      },
      "net.corda.finance.contracts.asset.MultilateralNetState_Object": {
        "type": "object",
        "properties": {
          "template": {
            "$ref": "#/components/schemas/net.corda.finance.contracts.asset.Obligation_Terms_Object"
          }
        }
      },
      "net.corda.finance.contracts.asset.Obligation_State": {
        "required": [
          "amount",
          "dueBefore",
          "exitKeys",
          "lifecycle",
          "participants",
          "quantity"
        ],
        "type": "object",
        "properties": {
          "lifecycle": {
            "type": "string",
            "enum": [
              "NORMAL",
              "DEFAULTED"
            ]
          },
          "obligor": {
            "$ref": "#/components/schemas/net.corda.core.identity.AbstractParty"
          },
          "template": {
            "$ref": "#/components/schemas/net.corda.finance.contracts.asset.Obligation_Terms_Object"
          },
          "quantity": {
            "type": "integer",
            "format": "int64"
          },
          "beneficiary": {
            "$ref": "#/components/schemas/net.corda.core.identity.AbstractParty"
          },
          "amount": {
            "$ref": "#/components/schemas/Amount"
          },
          "exitKeys": {
            "type": "array",
            "items": {
              "type": "string",
              "description": "Base 58 Encoded Public Key",
              "example": "GfHq2tTVk9z4eXgyUuofmR16H6j7srXt8BCyidKdrZL5JEwFqHgDSuiinbTE"
            }
          },
          "dueBefore": {
            "type": "string",
            "description": "JSR310 encoded time representation of Instant"
          },
          "participants": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/net.corda.core.identity.AbstractParty"
            }
          },
          "owner": {
            "$ref": "#/components/schemas/net.corda.core.identity.AbstractParty"
          },
          "bilateralNetState": {
            "$ref": "#/components/schemas/net.corda.finance.contracts.asset.BilateralNetState_Object"
          },
          "multilateralNetState": {
            "$ref": "#/components/schemas/net.corda.finance.contracts.asset.MultilateralNetState_Object"
          }
        }
      },
      "net.corda.finance.contracts.asset.Obligation_Terms_Object": {
        "required": [
          "acceptableContracts",
          "acceptableIssuedProducts",
          "dueBefore",
          "product",
          "timeTolerance"
        ],
        "type": "object",
        "properties": {
          "acceptableContracts": {
            "uniqueItems": true,
            "required": [
              "empty",
              "size"
            ],
            "type": "array",
            "properties": {
              "elements": {
                "uniqueItems": true,
                "type": "array",
                "writeOnly": true,
                "items": {
                  "type": "string",
                  "description": "Base 58 Encoded Secure Hash",
                  "example": "GfHq2tTVk9z4eXgyUuofmR16H6j7srXt8BCyidKdrZL5JEwFqHgDSuiinbTE"
                }
              },
              "empty": {
                "type": "boolean"
              },
              "size": {
                "type": "integer",
                "format": "int32"
              }
            },
            "items": {
              "type": "string",
              "description": "Base 58 Encoded Secure Hash",
              "example": "GfHq2tTVk9z4eXgyUuofmR16H6j7srXt8BCyidKdrZL5JEwFqHgDSuiinbTE"
            }
          },
          "acceptableIssuedProducts": {
            "uniqueItems": true,
            "required": [
              "empty",
              "size"
            ],
            "type": "array",
            "properties": {
              "elements": {
                "uniqueItems": true,
                "type": "array",
                "writeOnly": true,
                "items": {
                  "$ref": "#/components/schemas/Issued"
                }
              },
              "empty": {
                "type": "boolean"
              },
              "size": {
                "type": "integer",
                "format": "int32"
              }
            },
            "items": {
              "$ref": "#/components/schemas/Issued"
            }
          },
          "dueBefore": {
            "type": "string",
            "description": "JSR310 encoded time representation of Instant"
          },
          "timeTolerance": {
            "type": "string",
            "description": "JSR310 encoded time representation of Duration"
          },
          "product": {
            "type": "object"
          }
        }
      },
      "io.bluebank.braid.corda.services.SimpleNodeInfo": {
        "required": [
          "addresses",
          "legalIdentities"
        ],
        "type": "object",
        "properties": {
          "addresses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/net.corda.core.utilities.NetworkHostAndPort"
            }
          },
          "legalIdentities": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/net.corda.core.identity.Party"
            }
          }
        }
      },
      "net.corda.core.utilities.NetworkHostAndPort" : {
        "required" : [ "host", "port" ],
        "type" : "object",
        "properties" : {
          "host" : {
            "type" : "string"
          },
          "port" : {
            "type" : "integer",
            "format" : "int32"
          }
        }
      },
      "net.corda.core.contracts.AttachmentConstraint" : {
        "type" : "object"
      },
      "net.corda.core.contracts.ContractState" : {
        "required" : [ "participants" ],
        "type" : "object",
        "properties" : {
          "participants" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/net.corda.core.identity.AbstractParty"
            }
          }
        }
      },
      "net.corda.core.contracts.StateAndRef_net_corda_core_contracts_ContractState" : {
        "type" : "object",
        "properties" : {
          "state" : {
            "$ref" : "#/components/schemas/net.corda.core.contracts.TransactionState_net_corda_core_contracts_ContractState"
          },
          "ref" : {
            "$ref" : "#/components/schemas/net.corda.core.contracts.StateRef"
          }
        }
      },
      "net.corda.core.contracts.StateRef" : {
        "required" : [ "index", "txhash" ],
        "type" : "object",
        "properties" : {
          "txhash" : {
            "type" : "string",
            "description" : "Base 58 Encoded Secure Hash",
            "example" : "GfHq2tTVk9z4eXgyUuofmR16H6j7srXt8BCyidKdrZL5JEwFqHgDSuiinbTE"
          },
          "index" : {
            "type" : "integer",
            "format" : "int32"
          }
        }
      },
      "net.corda.core.contracts.TransactionState_net_corda_core_contracts_ContractState" : {
        "required" : [ "contract" ],
        "type" : "object",
        "properties" : {
          "data" : {
            "$ref" : "#/components/schemas/net.corda.core.contracts.ContractState"
          },
          "contract" : {
            "type" : "string"
          },
          "notary" : {
            "$ref" : "#/components/schemas/net.corda.core.identity.Party"
          },
          "encumbrance" : {
            "type" : "integer",
            "format" : "int32"
          },
          "constraint" : {
            "$ref" : "#/components/schemas/net.corda.core.contracts.AttachmentConstraint"
          }
        }
      },
      "net.corda.core.node.services.Vault_ConstraintInfo" : {
        "required": [
          "constraint"
        ],
        "type" : "object",
        "properties" : {
          "constraint" : {
            "$ref" : "#/components/schemas/net.corda.core.contracts.AttachmentConstraint"
          }
        }
      },
      "net.corda.core.node.services.Vault_Page_net_corda_core_contracts_ContractState" : {
        "required" : [ "otherResults", "stateTypes", "states", "statesMetadata", "totalStatesAvailable" ],
        "type" : "object",
        "properties" : {
          "states" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/net.corda.core.contracts.StateAndRef_net_corda_core_contracts_ContractState"
            }
          },
          "statesMetadata" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/net.corda.core.node.services.Vault_StateMetadata"
            }
          },
          "totalStatesAvailable" : {
            "type" : "integer",
            "format" : "int64"
          },
          "stateTypes" : {
            "type" : "string",
            "enum" : [ "UNCONSUMED", "CONSUMED", "ALL" ]
          },
          "otherResults" : {
            "type" : "array",
            "items" : {
              "type" : "object"
            }
          }
        }
      },
      "net.corda.core.node.services.Vault_StateMetadata" : {
        "required" : [ "contractStateClassName", "recordedTime", "status" ],
        "type" : "object",
        "properties" : {
          "ref" : {
            "$ref" : "#/components/schemas/net.corda.core.contracts.StateRef"
          },
          "contractStateClassName" : {
            "type" : "string"
          },
          "recordedTime" : {
            "type" : "string",
            "description" : "JSR310 encoded time representation of Instant"
          },
          "consumedTime" : {
            "type" : "string",
            "description" : "JSR310 encoded time representation of Instant"
          },
          "status" : {
            "type" : "string",
            "enum" : [ "UNCONSUMED", "CONSUMED", "ALL" ]
          },
          "notary" : {
            "$ref" : "#/components/schemas/net.corda.core.identity.AbstractParty"
          },
          "lockId" : {
            "type" : "string"
          },
          "lockUpdateTime" : {
            "type" : "string",
            "description" : "JSR310 encoded time representation of Instant"
          },
          "relevancyStatus" : {
            "type" : "string",
            "enum" : [ "RELEVANT", "NOT_RELEVANT", "ALL" ]
          },
          "constraintInfo" : {
            "$ref" : "#/components/schemas/net.corda.core.node.services.Vault_ConstraintInfo"
          }
        }
      },
      "io.bluebank.braid.corda.services.vault.VaultQuery" : {
        "required" : [ "contractStateType" ],
        "type" : "object",
        "properties" : {
          "criteria" : {
            "$ref" : "#/components/schemas/net.corda.core.node.services.vault.QueryCriteria"
          },
          "paging" : {
            "$ref" : "#/components/schemas/net.corda.core.node.services.vault.PageSpecification"
          },
          "sorting" : {
            "$ref" : "#/components/schemas/net.corda.core.node.services.vault.Sort"
          },
          "contractStateType" : {
            "type" : "string",
            "description" : "Java class name",
            "example" : "java.lang.Object"
          }
        }
      },
      "net.corda.core.node.services.vault.BaseSort" : {
        "type" : "object"
      },
      "net.corda.core.node.services.vault.ColumnPredicate" : {
        "type" : "object",
        "discriminator" : {
          "propertyName" : "@class",
          "mapping" : {
            ".ColumnPredicate$AggregateFunction" : "#/components/schemas/net.corda.core.node.services.vault.ColumnPredicate_AggregateFunction",
            ".ColumnPredicate$Between" : "#/components/schemas/net.corda.core.node.services.vault.ColumnPredicate_Between",
            ".ColumnPredicate$BinaryComparison" : "#/components/schemas/net.corda.core.node.services.vault.ColumnPredicate_BinaryComparison",
            ".ColumnPredicate$CollectionExpression" : "#/components/schemas/net.corda.core.node.services.vault.ColumnPredicate_CollectionExpression",
            ".ColumnPredicate$EqualityComparison" : "#/components/schemas/net.corda.core.node.services.vault.ColumnPredicate_EqualityComparison",
            ".ColumnPredicate$NullExpression" : "#/components/schemas/net.corda.core.node.services.vault.ColumnPredicate_NullExpression",
            ".ColumnPredicate$Likeness" : "#/components/schemas/net.corda.core.node.services.vault.ColumnPredicate_Likeness"
          }
        }
      },
      "net.corda.core.node.services.vault.ColumnPredicate_AggregateFunction" : {
        "required" : [ "type" ],
        "type" : "object",
        "allOf" : [ {
          "$ref" : "#/components/schemas/net.corda.core.node.services.vault.ColumnPredicate_Instant"
        }, {
          "type" : "object",
          "properties" : {
            "type" : {
              "type" : "string",
              "enum" : [ "COUNT", "AVG", "MIN", "MAX", "SUM" ]
            }
          }
        }, {
          "$ref" : "#/components/schemas/net.corda.core.node.services.vault.ColumnPredicate_Object"
        }, {
          "$ref" : "#/components/schemas/net.corda.core.node.services.vault.ColumnPredicate_Long"
        } ]
      },
      "net.corda.core.node.services.vault.ColumnPredicate_Between" : {
        "required" : [ "rightFromLiteral", "rightToLiteral" ],
        "type" : "object",
        "allOf" : [ {
          "$ref" : "#/components/schemas/net.corda.core.node.services.vault.ColumnPredicate"
        }, {
          "type" : "object",
          "properties" : {
            "rightToLiteral" : {
              "type" : "object"
            }
          }
        }, {
          "$ref" : "#/components/schemas/net.corda.core.node.services.vault.ColumnPredicate_Instant"
        }, {
          "$ref" : "#/components/schemas/net.corda.core.node.services.vault.ColumnPredicate_Object"
        }, {
          "$ref" : "#/components/schemas/net.corda.core.node.services.vault.ColumnPredicate_Long"
        } ]
      },
      "net.corda.core.node.services.vault.ColumnPredicate_BinaryComparison" : {
        "required" : [ "operator", "rightLiteral" ],
        "type" : "object",
        "allOf" : [ {
          "$ref" : "#/components/schemas/net.corda.core.node.services.vault.ColumnPredicate"
        }, {
          "type" : "object",
          "properties" : {
            "operator" : {
              "type" : "string",
              "enum" : [ "LESS_THAN", "LESS_THAN_OR_EQUAL", "GREATER_THAN", "GREATER_THAN_OR_EQUAL" ]
            },
            "rightLiteral" : {
              "type" : "object"
            }
          }
        }, {
          "$ref" : "#/components/schemas/net.corda.core.node.services.vault.ColumnPredicate_Instant"
        }, {
          "$ref" : "#/components/schemas/net.corda.core.node.services.vault.ColumnPredicate_Object"
        }, {
          "$ref" : "#/components/schemas/net.corda.core.node.services.vault.ColumnPredicate_Long"
        } ]
      },
      "net.corda.core.node.services.vault.ColumnPredicate_CollectionExpression" : {
        "required" : [ "operator", "rightLiteral" ],
        "type" : "object",
        "allOf" : [ {
          "$ref" : "#/components/schemas/net.corda.core.node.services.vault.ColumnPredicate"
        }, {
          "type" : "object",
          "properties" : {
            "operator" : {
              "type" : "string",
              "enum" : [ "IN", "NOT_IN", "IN_IGNORE_CASE", "NOT_IN_IGNORE_CASE" ]
            },
            "rightLiteral" : {
              "type" : "array",
              "items" : {
                "type" : "object"
              }
            }
          }
        }, {
          "$ref" : "#/components/schemas/net.corda.core.node.services.vault.ColumnPredicate_Instant"
        }, {
          "$ref" : "#/components/schemas/net.corda.core.node.services.vault.ColumnPredicate_Object"
        }, {
          "$ref" : "#/components/schemas/net.corda.core.node.services.vault.ColumnPredicate_Long"
        } ]
      },
      "net.corda.core.node.services.vault.ColumnPredicate_EqualityComparison" : {
        "required" : [ "operator", "rightLiteral" ],
        "type" : "object",
        "allOf" : [ {
          "$ref" : "#/components/schemas/net.corda.core.node.services.vault.ColumnPredicate"
        }, {
          "type" : "object",
          "properties" : {
            "operator" : {
              "type" : "string",
              "enum" : [ "EQUAL", "NOT_EQUAL", "EQUAL_IGNORE_CASE", "NOT_EQUAL_IGNORE_CASE" ]
            },
            "rightLiteral" : {
              "type" : "object"
            }
          }
        }, {
          "$ref" : "#/components/schemas/net.corda.core.node.services.vault.ColumnPredicate_Instant"
        }, {
          "$ref" : "#/components/schemas/net.corda.core.node.services.vault.ColumnPredicate_Object"
        }, {
          "$ref" : "#/components/schemas/net.corda.core.node.services.vault.ColumnPredicate_Long"
        } ]
      },
      "net.corda.core.node.services.vault.ColumnPredicate_Instant" : {
        "type" : "object",
        "discriminator" : {
          "propertyName" : "@class",
          "mapping" : {
            ".ColumnPredicate$AggregateFunction" : "#/components/schemas/net.corda.core.node.services.vault.ColumnPredicate_AggregateFunction",
            ".ColumnPredicate$Between" : "#/components/schemas/net.corda.core.node.services.vault.ColumnPredicate_Between",
            ".ColumnPredicate$BinaryComparison" : "#/components/schemas/net.corda.core.node.services.vault.ColumnPredicate_BinaryComparison",
            ".ColumnPredicate$CollectionExpression" : "#/components/schemas/net.corda.core.node.services.vault.ColumnPredicate_CollectionExpression",
            ".ColumnPredicate$EqualityComparison" : "#/components/schemas/net.corda.core.node.services.vault.ColumnPredicate_EqualityComparison",
            ".ColumnPredicate$NullExpression" : "#/components/schemas/net.corda.core.node.services.vault.ColumnPredicate_NullExpression",
            ".ColumnPredicate$Likeness" : "#/components/schemas/net.corda.core.node.services.vault.ColumnPredicate_Likeness"
          }
        }
      },
      "net.corda.core.node.services.vault.ColumnPredicate_Likeness" : {
        "required" : [ "operator", "rightLiteral" ],
        "type" : "object",
        "allOf" : [ {
          "$ref" : "#/components/schemas/net.corda.core.node.services.vault.ColumnPredicate"
        }, {
          "type" : "object",
          "properties" : {
            "operator" : {
              "type" : "string",
              "enum" : [ "LIKE", "NOT_LIKE", "LIKE_IGNORE_CASE", "NOT_LIKE_IGNORE_CASE" ]
            },
            "rightLiteral" : {
              "type" : "string"
            }
          }
        }, {
          "$ref" : "#/components/schemas/net.corda.core.node.services.vault.ColumnPredicate_Instant"
        }, {
          "$ref" : "#/components/schemas/net.corda.core.node.services.vault.ColumnPredicate_Object"
        }, {
          "$ref" : "#/components/schemas/net.corda.core.node.services.vault.ColumnPredicate_Long"
        } ]
      },
      "net.corda.core.node.services.vault.ColumnPredicate_Long" : {
        "type" : "object",
        "discriminator" : {
          "propertyName" : "@class",
          "mapping" : {
            ".ColumnPredicate$AggregateFunction" : "#/components/schemas/net.corda.core.node.services.vault.ColumnPredicate_AggregateFunction",
            ".ColumnPredicate$Between" : "#/components/schemas/net.corda.core.node.services.vault.ColumnPredicate_Between",
            ".ColumnPredicate$BinaryComparison" : "#/components/schemas/net.corda.core.node.services.vault.ColumnPredicate_BinaryComparison",
            ".ColumnPredicate$CollectionExpression" : "#/components/schemas/net.corda.core.node.services.vault.ColumnPredicate_CollectionExpression",
            ".ColumnPredicate$EqualityComparison" : "#/components/schemas/net.corda.core.node.services.vault.ColumnPredicate_EqualityComparison",
            ".ColumnPredicate$NullExpression" : "#/components/schemas/net.corda.core.node.services.vault.ColumnPredicate_NullExpression",
            ".ColumnPredicate$Likeness" : "#/components/schemas/net.corda.core.node.services.vault.ColumnPredicate_Likeness"
          }
        }
      },
      "net.corda.core.node.services.vault.ColumnPredicate_NullExpression" : {
        "required" : [ "operator" ],
        "type" : "object",
        "allOf" : [ {
          "$ref" : "#/components/schemas/net.corda.core.node.services.vault.ColumnPredicate"
        }, {
          "type" : "object",
          "properties" : {
            "operator" : {
              "type" : "string",
              "enum" : [ "IS_NULL", "NOT_NULL" ]
            }
          }
        }, {
          "$ref" : "#/components/schemas/net.corda.core.node.services.vault.ColumnPredicate_Instant"
        }, {
          "$ref" : "#/components/schemas/net.corda.core.node.services.vault.ColumnPredicate_Object"
        }, {
          "$ref" : "#/components/schemas/net.corda.core.node.services.vault.ColumnPredicate_Long"
        } ]
      },
      "net.corda.core.node.services.vault.ColumnPredicate_Object" : {
        "type" : "object",
        "discriminator" : {
          "propertyName" : "@class",
          "mapping" : {
            ".ColumnPredicate$AggregateFunction" : "#/components/schemas/net.corda.core.node.services.vault.ColumnPredicate_AggregateFunction",
            ".ColumnPredicate$Between" : "#/components/schemas/net.corda.core.node.services.vault.ColumnPredicate_Between",
            ".ColumnPredicate$BinaryComparison" : "#/components/schemas/net.corda.core.node.services.vault.ColumnPredicate_BinaryComparison",
            ".ColumnPredicate$CollectionExpression" : "#/components/schemas/net.corda.core.node.services.vault.ColumnPredicate_CollectionExpression",
            ".ColumnPredicate$EqualityComparison" : "#/components/schemas/net.corda.core.node.services.vault.ColumnPredicate_EqualityComparison",
            ".ColumnPredicate$NullExpression" : "#/components/schemas/net.corda.core.node.services.vault.ColumnPredicate_NullExpression",
            ".ColumnPredicate$Likeness" : "#/components/schemas/net.corda.core.node.services.vault.ColumnPredicate_Likeness"
          }
        }
      },
      "net.corda.core.node.services.vault.Column_Object_Object" : {
        "required" : [ "declaringClass", "name" ],
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string"
          },
          "declaringClass" : {
            "type" : "string",
            "description" : "Java class name",
            "example" : "java.lang.Object"
          }
        }
      },
      "net.corda.core.node.services.vault.CriteriaExpression" : {
        "type" : "object",
        "discriminator" : {
          "propertyName" : "@class",
          "mapping" : {
            ".CriteriaExpression$AggregateFunctionExpression" : "#/components/schemas/net.corda.core.node.services.vault.CriteriaExpression_AggregateFunctionExpression",
            ".CriteriaExpression$BinaryLogical" : "#/components/schemas/net.corda.core.node.services.vault.CriteriaExpression_BinaryLogical",
            ".CriteriaExpression$ColumnPredicateExpression" : "#/components/schemas/net.corda.core.node.services.vault.CriteriaExpression_ColumnPredicateExpression",
            ".CriteriaExpression$Not" : "#/components/schemas/net.corda.core.node.services.vault.CriteriaExpression_Not"
          }
        }
      },
      "net.corda.core.node.services.vault.CriteriaExpression_AggregateFunctionExpression" : {
        "required" : [ "column", "predicate" ],
        "type" : "object",
        "allOf" : [ {
          "$ref" : "#/components/schemas/net.corda.core.node.services.vault.CriteriaExpression_net_corda_core_schemas_StatePersistable_Boolean"
        }, {
          "type" : "object",
          "properties" : {
            "column" : {
              "$ref" : "#/components/schemas/net.corda.core.node.services.vault.Column_Object_Object"
            },
            "predicate" : {
              "$ref" : "#/components/schemas/net.corda.core.node.services.vault.ColumnPredicate_Object"
            },
            "groupByColumns" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/net.corda.core.node.services.vault.Column_Object_Object"
              }
            },
            "orderBy" : {
              "type" : "string",
              "enum" : [ "ASC", "DESC" ]
            }
          }
        } ]
      },
      "net.corda.core.node.services.vault.CriteriaExpression_BinaryLogical" : {
        "required" : [ "left", "operator", "right" ],
        "type" : "object",
        "allOf" : [ {
          "$ref" : "#/components/schemas/net.corda.core.node.services.vault.CriteriaExpression_Object_Boolean"
        }, {
          "type" : "object",
          "properties" : {
            "left" : {
              "$ref" : "#/components/schemas/net.corda.core.node.services.vault.CriteriaExpression_Object_Boolean"
            },
            "right" : {
              "$ref" : "#/components/schemas/net.corda.core.node.services.vault.CriteriaExpression_Object_Boolean"
            },
            "operator" : {
              "type" : "string",
              "enum" : [ "AND", "OR" ]
            }
          }
        }, {
          "$ref" : "#/components/schemas/net.corda.core.node.services.vault.CriteriaExpression"
        }, {
          "$ref" : "#/components/schemas/net.corda.core.node.services.vault.CriteriaExpression_net_corda_core_schemas_StatePersistable_Boolean"
        } ]
      },
      "net.corda.core.node.services.vault.CriteriaExpression_ColumnPredicateExpression" : {
        "required" : [ "column", "predicate" ],
        "type" : "object",
        "allOf" : [ {
          "$ref" : "#/components/schemas/net.corda.core.node.services.vault.CriteriaExpression"
        }, {
          "type" : "object",
          "properties" : {
            "column" : {
              "$ref" : "#/components/schemas/net.corda.core.node.services.vault.Column_Object_Object"
            },
            "predicate" : {
              "$ref" : "#/components/schemas/net.corda.core.node.services.vault.ColumnPredicate_Object"
            }
          }
        }, {
          "$ref" : "#/components/schemas/net.corda.core.node.services.vault.CriteriaExpression_Object_Boolean"
        }, {
          "$ref" : "#/components/schemas/net.corda.core.node.services.vault.CriteriaExpression_net_corda_core_schemas_StatePersistable_Boolean"
        } ]
      },
      "net.corda.core.node.services.vault.CriteriaExpression_Not" : {
        "required" : [ "expression" ],
        "type" : "object",
        "allOf" : [ {
          "$ref" : "#/components/schemas/net.corda.core.node.services.vault.CriteriaExpression"
        }, {
          "type" : "object",
          "properties" : {
            "expression" : {
              "$ref" : "#/components/schemas/net.corda.core.node.services.vault.CriteriaExpression_Object_Boolean"
            }
          }
        }, {
          "$ref" : "#/components/schemas/net.corda.core.node.services.vault.CriteriaExpression_net_corda_core_schemas_StatePersistable_Boolean"
        } ]
      },
      "net.corda.core.node.services.vault.CriteriaExpression_Object_Boolean" : {
        "type" : "object",
        "discriminator" : {
          "propertyName" : "@class",
          "mapping" : {
            ".CriteriaExpression$AggregateFunctionExpression" : "#/components/schemas/net.corda.core.node.services.vault.CriteriaExpression_AggregateFunctionExpression",
            ".CriteriaExpression$BinaryLogical" : "#/components/schemas/net.corda.core.node.services.vault.CriteriaExpression_BinaryLogical",
            ".CriteriaExpression$ColumnPredicateExpression" : "#/components/schemas/net.corda.core.node.services.vault.CriteriaExpression_ColumnPredicateExpression",
            ".CriteriaExpression$Not" : "#/components/schemas/net.corda.core.node.services.vault.CriteriaExpression_Not"
          }
        }
      },
      "net.corda.core.node.services.vault.CriteriaExpression_net_corda_core_schemas_StatePersistable_Boolean" : {
        "type" : "object",
        "discriminator" : {
          "propertyName" : "@class",
          "mapping" : {
            ".CriteriaExpression$AggregateFunctionExpression" : "#/components/schemas/net.corda.core.node.services.vault.CriteriaExpression_AggregateFunctionExpression",
            ".CriteriaExpression$BinaryLogical" : "#/components/schemas/net.corda.core.node.services.vault.CriteriaExpression_BinaryLogical",
            ".CriteriaExpression$ColumnPredicateExpression" : "#/components/schemas/net.corda.core.node.services.vault.CriteriaExpression_ColumnPredicateExpression",
            ".CriteriaExpression$Not" : "#/components/schemas/net.corda.core.node.services.vault.CriteriaExpression_Not"
          }
        }
      },
      "net.corda.core.node.services.vault.PageSpecification" : {
        "required" : [ "pageNumber", "pageSize" ],
        "type" : "object",
        "properties" : {
          "pageNumber" : {
            "type" : "integer",
            "format" : "int32"
          },
          "pageSize" : {
            "type" : "integer",
            "format" : "int32"
          }
        }
      },
      "net.corda.core.node.services.vault.QueryCriteria" : {
        "type": "object"
      },
      "net.corda.core.node.services.vault.QueryCriteria_AndComposition" : {
        "required" : [ "a", "b" ],
        "type" : "object",
        "allOf" : [ {
          "$ref" : "#/components/schemas/net.corda.core.node.services.vault.QueryCriteria"
        }, {
          "type" : "object",
          "properties" : {
            "a" : {
              "$ref" : "#/components/schemas/net.corda.core.node.services.vault.QueryCriteria"
            },
            "b" : {
              "$ref" : "#/components/schemas/net.corda.core.node.services.vault.QueryCriteria"
            }
          }
        } ]
      },
      "net.corda.core.node.services.vault.QueryCriteria_CommonQueryCriteria" : {
        "required" : [ "constraintTypes", "constraints", "relevancyStatus", "status" ],
        "type" : "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/net.corda.core.node.services.vault.QueryCriteria"
          },
          {
            "type": "object",
            "properties": {
              "relevancyStatus": {
                "type": "string",
                "enum": [
                  "RELEVANT",
                  "NOT_RELEVANT",
                  "ALL"
                ]
              },
              "constraintTypes": {
                "uniqueItems": true,
                "type": "array",
                "items": {
                  "type": "string",
                  "enum": [
                    "ALWAYS_ACCEPT",
                    "HASH",
                    "CZ_WHITELISTED",
                    "SIGNATURE"
                  ]
                }
              },
              "constraints": {
                "uniqueItems": true,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/net.corda.core.node.services.Vault_ConstraintInfo"
                }
              },
              "participants": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/net.corda.core.identity.AbstractParty"
                }
              },
              "status": {
                "type": "string",
                "enum": [
                  "UNCONSUMED",
                  "CONSUMED",
                  "ALL"
                ]
              },
              "contractStateTypes": {
                "uniqueItems": true,
                "type": "array",
                "items": {
                  "type": "string",
                  "description": "Java class name",
                  "example": "java.lang.Object"
                }
              }
            }
          }
        ]
      },
      "net.corda.core.node.services.vault.QueryCriteria_FungibleAssetQueryCriteria" : {
        "required" : [ "constraintTypes", "constraints", "relevancyStatus", "status" ],
        "type" : "object",
        "allOf" : [ {
          "$ref" : "#/components/schemas/net.corda.core.node.services.vault.QueryCriteria"
        }, {
          "type" : "object",
          "properties" : {
            "participants" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/net.corda.core.identity.AbstractParty"
              }
            },
            "owner" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/net.corda.core.identity.AbstractParty"
              }
            },
            "quantity" : {
              "$ref" : "#/components/schemas/net.corda.core.node.services.vault.ColumnPredicate_Long"
            },
            "issuer" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/net.corda.core.identity.AbstractParty"
              }
            },
            "issuerRef" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/net.corda.core.utilities.OpaqueBytes"
              }
            },
            "status" : {
              "type" : "string",
              "enum" : [ "UNCONSUMED", "CONSUMED", "ALL" ]
            },
            "contractStateTypes" : {
              "uniqueItems" : true,
              "type" : "array",
              "items" : {
                "type" : "string",
                "description" : "Java class name",
                "example" : "java.lang.Object"
              }
            },
            "relevancyStatus" : {
              "type" : "string",
              "enum" : [ "RELEVANT", "NOT_RELEVANT", "ALL" ]
            },
            "constraintTypes" : {
              "uniqueItems" : true,
              "type" : "array",
              "items" : {
                "type" : "string",
                "enum" : [ "ALWAYS_ACCEPT", "HASH", "CZ_WHITELISTED", "SIGNATURE" ]
              }
            },
            "constraints" : {
              "uniqueItems" : true,
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/net.corda.core.node.services.Vault_ConstraintInfo"
              }
            }
          }
        } ]
      },
      "net.corda.core.node.services.vault.QueryCriteria_FungibleStateQueryCriteria" : {
        "required" : [ "constraintTypes", "constraints", "relevancyStatus", "status" ],
        "type" : "object",
        "allOf" : [ {
          "$ref" : "#/components/schemas/net.corda.core.node.services.vault.QueryCriteria"
        }, {
          "type" : "object",
          "properties" : {
            "participants" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/net.corda.core.identity.AbstractParty"
              }
            },
            "quantity" : {
              "$ref" : "#/components/schemas/net.corda.core.node.services.vault.ColumnPredicate_Long"
            },
            "status" : {
              "type" : "string",
              "enum" : [ "UNCONSUMED", "CONSUMED", "ALL" ]
            },
            "contractStateTypes" : {
              "uniqueItems" : true,
              "type" : "array",
              "items" : {
                "type" : "string",
                "description" : "Java class name",
                "example" : "java.lang.Object"
              }
            },
            "relevancyStatus" : {
              "type" : "string",
              "enum" : [ "RELEVANT", "NOT_RELEVANT", "ALL" ]
            },
            "constraintTypes" : {
              "uniqueItems" : true,
              "type" : "array",
              "items" : {
                "type" : "string",
                "enum" : [ "ALWAYS_ACCEPT", "HASH", "CZ_WHITELISTED", "SIGNATURE" ]
              }
            },
            "constraints" : {
              "uniqueItems" : true,
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/net.corda.core.node.services.Vault_ConstraintInfo"
              }
            }
          }
        } ]
      },
      "net.corda.core.node.services.vault.QueryCriteria_LinearStateQueryCriteria" : {
        "required" : [ "constraintTypes", "constraints", "relevancyStatus", "status" ],
        "type" : "object",
        "allOf" : [ {
          "$ref" : "#/components/schemas/net.corda.core.node.services.vault.QueryCriteria"
        }, {
          "type" : "object",
          "properties" : {
            "participants" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/net.corda.core.identity.AbstractParty"
              }
            },
            "uuid" : {
              "type" : "array",
              "items" : {
                "type" : "string",
                "format" : "uuid"
              }
            },
            "externalId" : {
              "type" : "array",
              "items" : {
                "type" : "string"
              }
            },
            "status" : {
              "type" : "string",
              "enum" : [ "UNCONSUMED", "CONSUMED", "ALL" ]
            },
            "contractStateTypes" : {
              "uniqueItems" : true,
              "type" : "array",
              "items" : {
                "type" : "string",
                "description" : "Java class name",
                "example" : "java.lang.Object"
              }
            },
            "relevancyStatus" : {
              "type" : "string",
              "enum" : [ "RELEVANT", "NOT_RELEVANT", "ALL" ]
            },
            "constraintTypes" : {
              "uniqueItems" : true,
              "type" : "array",
              "items" : {
                "type" : "string",
                "enum" : [ "ALWAYS_ACCEPT", "HASH", "CZ_WHITELISTED", "SIGNATURE" ]
              }
            },
            "constraints" : {
              "uniqueItems" : true,
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/net.corda.core.node.services.Vault_ConstraintInfo"
              }
            }
          }
        } ]
      },
      "net.corda.core.node.services.vault.QueryCriteria_OrComposition" : {
        "required" : [ "a", "b" ],
        "type" : "object",
        "allOf" : [ {
          "$ref" : "#/components/schemas/net.corda.core.node.services.vault.QueryCriteria"
        }, {
          "type" : "object",
          "properties" : {
            "a" : {
              "$ref" : "#/components/schemas/net.corda.core.node.services.vault.QueryCriteria"
            },
            "b" : {
              "$ref" : "#/components/schemas/net.corda.core.node.services.vault.QueryCriteria"
            }
          }
        } ]
      },
      "net.corda.core.node.services.vault.QueryCriteria_SoftLockingCondition" : {
        "required" : [ "lockIds", "type" ],
        "type" : "object",
        "properties" : {
          "type" : {
            "type" : "string",
            "enum" : [ "UNLOCKED_ONLY", "LOCKED_ONLY", "SPECIFIED", "UNLOCKED_AND_SPECIFIED" ]
          },
          "lockIds" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "format" : "uuid"
            }
          }
        }
      },
      "net.corda.core.node.services.vault.QueryCriteria_TimeCondition" : {
        "required": [
          "predicate",
          "type"
        ],
        "type" : "object",
        "properties" : {
          "type" : {
            "type" : "string",
            "enum" : [ "RECORDED", "CONSUMED" ]
          },
          "predicate" : {
            "$ref" : "#/components/schemas/net.corda.core.node.services.vault.ColumnPredicate_Instant"
          }
        }
      },
      "net.corda.core.node.services.vault.QueryCriteria_VaultCustomQueryCriteria" : {
        "required" : [ "constraintTypes", "constraints", "expression", "relevancyStatus", "status" ],
        "type" : "object",
        "allOf" : [ {
          "$ref" : "#/components/schemas/net.corda.core.node.services.vault.QueryCriteria"
        }, {
          "type" : "object",
          "properties" : {
            "expression" : {
              "$ref" : "#/components/schemas/net.corda.core.node.services.vault.CriteriaExpression_net_corda_core_schemas_StatePersistable_Boolean"
            },
            "status" : {
              "type" : "string",
              "enum" : [ "UNCONSUMED", "CONSUMED", "ALL" ]
            },
            "contractStateTypes" : {
              "uniqueItems" : true,
              "type" : "array",
              "items" : {
                "type" : "string",
                "description" : "Java class name",
                "example" : "java.lang.Object"
              }
            },
            "relevancyStatus" : {
              "type" : "string",
              "enum" : [ "RELEVANT", "NOT_RELEVANT", "ALL" ]
            },
            "constraintTypes" : {
              "uniqueItems" : true,
              "type" : "array",
              "items" : {
                "type" : "string",
                "enum" : [ "ALWAYS_ACCEPT", "HASH", "CZ_WHITELISTED", "SIGNATURE" ]
              }
            },
            "constraints" : {
              "uniqueItems" : true,
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/net.corda.core.node.services.Vault_ConstraintInfo"
              }
            },
            "participants" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/net.corda.core.identity.AbstractParty"
              }
            }
          }
        } ]
      },
      "net.corda.core.node.services.vault.QueryCriteria_VaultQueryCriteria" : {
        "required" : [ "constraintTypes", "constraints", "relevancyStatus", "status" ],
        "type" : "object",
        "allOf" : [ {
          "$ref" : "#/components/schemas/net.corda.core.node.services.vault.QueryCriteria"
        }, {
          "type" : "object",
          "properties" : {
            "status" : {
              "type" : "string",
              "enum" : [ "UNCONSUMED", "CONSUMED", "ALL" ]
            },
            "contractStateTypes" : {
              "uniqueItems" : true,
              "type" : "array",
              "items" : {
                "type" : "string",
                "description" : "Java class name",
                "example" : "java.lang.Object"
              }
            },
            "stateRefs" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/net.corda.core.contracts.StateRef"
              }
            },
            "notary" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/net.corda.core.identity.AbstractParty"
              }
            },
            "softLockingCondition" : {
              "$ref" : "#/components/schemas/net.corda.core.node.services.vault.QueryCriteria_SoftLockingCondition"
            },
            "timeCondition" : {
              "$ref" : "#/components/schemas/net.corda.core.node.services.vault.QueryCriteria_TimeCondition"
            },
            "relevancyStatus" : {
              "type" : "string",
              "enum" : [ "RELEVANT", "NOT_RELEVANT", "ALL" ]
            },
            "constraintTypes" : {
              "uniqueItems" : true,
              "type" : "array",
              "items" : {
                "type" : "string",
                "enum" : [ "ALWAYS_ACCEPT", "HASH", "CZ_WHITELISTED", "SIGNATURE" ]
              }
            },
            "constraints" : {
              "uniqueItems" : true,
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/net.corda.core.node.services.Vault_ConstraintInfo"
              }
            },
            "participants" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/net.corda.core.identity.AbstractParty"
              }
            }
          }
        } ]
      },
      "net.corda.core.node.services.vault.Sort" : {
        "required" : [ "columns" ],
        "type" : "object",
        "properties" : {
          "columns" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/net.corda.core.node.services.vault.Sort_SortColumn"
            }
          }
        }
      },
      "net.corda.core.node.services.vault.SortAttribute" : {
        "type" : "object"
      },
      "net.corda.core.node.services.vault.Sort_SortColumn" : {
        "required" : [ "direction" ],
        "type" : "object",
        "properties" : {
          "sortAttribute" : {
            "$ref" : "#/components/schemas/net.corda.core.node.services.vault.SortAttribute"
          },
          "direction" : {
            "type" : "string",
            "enum" : [ "ASC", "DESC" ]
          }
        }
      },
      "net.corda.core.contracts.Command_Object" : {
        "required" : [ "signers", "value" ],
        "type" : "object",
        "properties" : {
          "value" : {
            "type" : "object"
          },
          "signers" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "description" : "Base 58 Encoded Public Key",
              "example" : "GfHq2tTVk9z4eXgyUuofmR16H6j7srXt8BCyidKdrZL5JEwFqHgDSuiinbTE"
            }
          }
        }
      },
      "net.corda.core.contracts.PrivacySalt" : {
        "required" : [ "bytes" ],
        "type" : "object",
        "properties" : {
          "bytes" : {
            "type" : "string",
            "format" : "binary"
          }
        }
      },
      "net.corda.core.contracts.TimeWindow" : {
        "type" : "object",
        "properties" : {
          "untilTime" : {
            "type" : "string",
            "description" : "JSR310 encoded time representation of Instant"
          },
          "fromTime": {
            "type" : "string",
            "description" : "JSR310 encoded time representation of Instant"
          },
          "midpoint": {
            "type" : "string",
            "description" : "JSR310 encoded time representation of Instant"
          }
        }
      },
      "net.corda.core.crypto.DigitalSignature" : {
        "required" : [ "bytes" ],
        "type" : "object",
        "properties" : {
          "bytes" : {
            "type" : "string",
            "format" : "binary"
          }
        }
      },
      "net.corda.core.crypto.PartialMerkleTree" : {
        "type" : "object",
        "properties" : {
          "root" : {
            "$ref" : "#/components/schemas/net.corda.core.crypto.PartialMerkleTree_PartialTree"
          }
        }
      },
      "net.corda.core.crypto.PartialMerkleTree_PartialTree" : {
        "type" : "object"
      },
      "net.corda.core.crypto.SignatureMetadata" : {
        "required" : [ "platformVersion", "schemeNumberID" ],
        "type" : "object",
        "properties" : {
          "platformVersion" : {
            "type" : "integer",
            "format" : "int32"
          },
          "schemeNumberID" : {
            "type" : "integer",
            "format" : "int32"
          }
        }
      },
      "net.corda.core.crypto.TransactionSignature" : {
        "required" : [ "by", "bytes" ],
        "type" : "object",
        "properties" : {
          "bytes" : {
            "type" : "string",
            "format" : "binary"
          },
          "by" : {
            "type" : "string",
            "description" : "Base 58 Encoded Public Key",
            "example" : "GfHq2tTVk9z4eXgyUuofmR16H6j7srXt8BCyidKdrZL5JEwFqHgDSuiinbTE"
          },
          "signatureMetadata" : {
            "$ref" : "#/components/schemas/net.corda.core.crypto.SignatureMetadata"
          },
          "partialMerkleTree" : {
            "$ref" : "#/components/schemas/net.corda.core.crypto.PartialMerkleTree"
          }
        }
      },
      "net.corda.core.serialization.SerializedBytes_net_corda_core_transactions_CoreTransaction" : {
        "required" : [ "bytes" ],
        "type" : "object",
        "properties" : {
          "bytes" : {
            "type" : "string",
            "format" : "binary"
          }
        }
      },
      "net.corda.core.transactions.BaseTransaction" : {
        "required" : [ "id", "inputs", "outputStates", "outputs", "references" ],
        "type" : "object",
        "properties" : {
          "inputs" : {
            "type" : "array",
            "items" : {
              "type" : "object"
            }
          },
          "references" : {
            "type" : "array",
            "items" : {
              "type" : "object"
            }
          },
          "notary" : {
            "$ref" : "#/components/schemas/net.corda.core.identity.Party"
          },
          "outputs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/net.corda.core.contracts.TransactionState_net_corda_core_contracts_ContractState"
            }
          },
          "outputStates": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/net.corda.core.contracts.ContractState"
            }
          },
          "id" : {
            "type" : "string",
            "description" : "Base 58 Encoded Secure Hash",
            "example" : "GfHq2tTVk9z4eXgyUuofmR16H6j7srXt8BCyidKdrZL5JEwFqHgDSuiinbTE"
          }
        }
      },
      "net.corda.core.transactions.ComponentGroup" : {
        "required" : [ "components", "groupIndex" ],
        "type" : "object",
        "properties" : {
          "groupIndex" : {
            "type" : "integer",
            "format" : "int32"
          },
          "components" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/net.corda.core.utilities.OpaqueBytes"
            }
          }
        }
      },
      "net.corda.core.transactions.CoreTransaction" : {
        "required" : [ "id", "inputs", "outputStates", "outputs", "references" ],
        "type" : "object",
        "properties" : {
          "inputs" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/net.corda.core.contracts.StateRef"
            }
          },
          "references" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/net.corda.core.contracts.StateRef"
            }
          },
          "networkParametersHash" : {
            "type" : "string",
            "description" : "Base 58 Encoded Secure Hash",
            "example" : "GfHq2tTVk9z4eXgyUuofmR16H6j7srXt8BCyidKdrZL5JEwFqHgDSuiinbTE"
          },
          "notary": {
            "$ref": "#/components/schemas/net.corda.core.identity.Party"
          },
          "outputs" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/net.corda.core.contracts.TransactionState_net_corda_core_contracts_ContractState"
            }
          },
          "outputStates": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/net.corda.core.contracts.ContractState"
            }
          },
          "id" : {
            "type" : "string",
            "description" : "Base 58 Encoded Secure Hash",
            "example" : "GfHq2tTVk9z4eXgyUuofmR16H6j7srXt8BCyidKdrZL5JEwFqHgDSuiinbTE"
          }
        }
      },
      "net.corda.core.transactions.SignedTransaction" : {
        "required" : [ "id", "inputs", "missingSigners", "notaryChangeTransaction", "references", "sigs" ],
        "type" : "object",
        "properties" : {
          "txBits" : {
            "$ref" : "#/components/schemas/net.corda.core.serialization.SerializedBytes_net_corda_core_transactions_CoreTransaction"
          },
          "sigs" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/net.corda.core.crypto.TransactionSignature"
            }
          },
          "id" : {
            "type" : "string",
            "description" : "Base 58 Encoded Secure Hash",
            "example" : "GfHq2tTVk9z4eXgyUuofmR16H6j7srXt8BCyidKdrZL5JEwFqHgDSuiinbTE"
          },
          "coreTransaction" : {
            "$ref" : "#/components/schemas/net.corda.core.transactions.CoreTransaction"
          },
          "tx" : {
            "$ref" : "#/components/schemas/net.corda.core.transactions.WireTransaction"
          },
          "inputs" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/net.corda.core.contracts.StateRef"
            }
          },
          "references" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/net.corda.core.contracts.StateRef"
            }
          },
          "notary" : {
            "$ref" : "#/components/schemas/net.corda.core.identity.Party"
          },
          "networkParametersHash" : {
            "type" : "string",
            "description" : "Base 58 Encoded Secure Hash",
            "example" : "GfHq2tTVk9z4eXgyUuofmR16H6j7srXt8BCyidKdrZL5JEwFqHgDSuiinbTE"
          },
          "notaryChangeTransaction" : {
            "type" : "boolean"
          },
          "missingSigners" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "type" : "string",
              "description" : "Base 58 Encoded Public Key",
              "example" : "GfHq2tTVk9z4eXgyUuofmR16H6j7srXt8BCyidKdrZL5JEwFqHgDSuiinbTE"
            }
          }
        }
      },
      "net.corda.core.transactions.TraversableTransaction" : {
        "required" : [ "attachments", "commands", "componentGroups", "id", "inputs", "outputStates", "outputs", "references" ],
        "type" : "object",
        "properties" : {
          "componentGroups" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/net.corda.core.transactions.ComponentGroup"
            }
          },
          "attachments" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "description" : "Base 58 Encoded Secure Hash",
              "example" : "GfHq2tTVk9z4eXgyUuofmR16H6j7srXt8BCyidKdrZL5JEwFqHgDSuiinbTE"
            }
          },
          "inputs" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/net.corda.core.contracts.StateRef"
            }
          },
          "references" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/net.corda.core.contracts.StateRef"
            }
          },
          "outputs" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/net.corda.core.contracts.TransactionState_net_corda_core_contracts_ContractState"
            }
          },
          "commands" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/net.corda.core.contracts.Command_Object"
            }
          },
          "notary" : {
            "$ref" : "#/components/schemas/net.corda.core.identity.Party"
          },
          "timeWindow" : {
            "$ref" : "#/components/schemas/net.corda.core.contracts.TimeWindow"
          },
          "networkParametersHash" : {
            "type" : "string",
            "description" : "Base 58 Encoded Secure Hash",
            "example" : "GfHq2tTVk9z4eXgyUuofmR16H6j7srXt8BCyidKdrZL5JEwFqHgDSuiinbTE"
          },
          "outputStates" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/net.corda.core.contracts.ContractState"
            }
          },
          "id" : {
            "type" : "string",
            "description" : "Base 58 Encoded Secure Hash",
            "example" : "GfHq2tTVk9z4eXgyUuofmR16H6j7srXt8BCyidKdrZL5JEwFqHgDSuiinbTE"
          }
        }
      },
      "net.corda.core.transactions.WireTransaction" : {
        "required" : [ "attachments", "availableComponentHashes$core", "availableComponentNonces$core", "commands", "groupHashes$core", "groupsMerkleRoots$core", "id", "inputs", "outputs", "references", "requiredSigningKeys" ],
        "type" : "object",
        "properties" : {
          "privacySalt" : {
            "$ref" : "#/components/schemas/net.corda.core.contracts.PrivacySalt"
          },
          "attachments" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "description" : "Base 58 Encoded Secure Hash",
              "example" : "GfHq2tTVk9z4eXgyUuofmR16H6j7srXt8BCyidKdrZL5JEwFqHgDSuiinbTE"
            }
          },
          "inputs" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/net.corda.core.contracts.StateRef"
            }
          },
          "references" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/net.corda.core.contracts.StateRef"
            }
          },
          "outputs" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/net.corda.core.contracts.TransactionState_net_corda_core_contracts_ContractState"
            }
          },
          "commands" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/net.corda.core.contracts.Command_Object"
            }
          },
          "notary" : {
            "$ref" : "#/components/schemas/net.corda.core.identity.Party"
          },
          "timeWindow" : {
            "$ref" : "#/components/schemas/net.corda.core.contracts.TimeWindow"
          },
          "networkParametersHash" : {
            "type" : "string",
            "description" : "Base 58 Encoded Secure Hash",
            "example" : "GfHq2tTVk9z4eXgyUuofmR16H6j7srXt8BCyidKdrZL5JEwFqHgDSuiinbTE"
          },
          "id" : {
            "type" : "string",
            "description" : "Base 58 Encoded Secure Hash",
            "example" : "GfHq2tTVk9z4eXgyUuofmR16H6j7srXt8BCyidKdrZL5JEwFqHgDSuiinbTE"
          },
          "requiredSigningKeys": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string",
              "description": "Base 58 Encoded Public Key",
              "example": "GfHq2tTVk9z4eXgyUuofmR16H6j7srXt8BCyidKdrZL5JEwFqHgDSuiinbTE"
            }
          },
          "groupHashes$core" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "description" : "Base 58 Encoded Secure Hash",
              "example" : "GfHq2tTVk9z4eXgyUuofmR16H6j7srXt8BCyidKdrZL5JEwFqHgDSuiinbTE"
            }
          },
          "groupsMerkleRoots$core" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string",
              "description" : "Base 58 Encoded Secure Hash",
              "example" : "GfHq2tTVk9z4eXgyUuofmR16H6j7srXt8BCyidKdrZL5JEwFqHgDSuiinbTE"
            }
          },
          "availableComponentNonces$core" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "array",
              "items" : {
                "type" : "string",
                "description" : "Base 58 Encoded Secure Hash",
                "example" : "GfHq2tTVk9z4eXgyUuofmR16H6j7srXt8BCyidKdrZL5JEwFqHgDSuiinbTE"
              }
            }
          },
          "availableComponentHashes$core" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "array",
              "items" : {
                "type" : "string",
                "description" : "Base 58 Encoded Secure Hash",
                "example" : "GfHq2tTVk9z4eXgyUuofmR16H6j7srXt8BCyidKdrZL5JEwFqHgDSuiinbTE"
              }
            }
          }
        }
      },
      "net.corda.finance.flows.AbstractCashFlow_Result" : {
        "type" : "object",
        "properties" : {
          "stx" : {
            "$ref" : "#/components/schemas/net.corda.core.transactions.SignedTransaction"
          },
          "recipient" : {
            "$ref" : "#/components/schemas/net.corda.core.identity.AbstractParty"
          }
        }
      },
      "generated.net.corda.finance.flows.CashExitFlowPayload" : {
        "type" : "object",
        "properties" : {
          "amount" : {
            "$ref" : "#/components/schemas/AmountCurrency"
          },
          "issuerRef" : {
            "$ref" : "#/components/schemas/net.corda.core.utilities.OpaqueBytes"
          }
        }
      },
      "generated.net.corda.finance.flows.CashIssueAndPaymentFlowPayload" : {
        "type" : "object",
        "properties" : {
          "amount" : {
            "$ref" : "#/components/schemas/AmountCurrency"
          },
          "issueRef" : {
            "$ref" : "#/components/schemas/net.corda.core.utilities.OpaqueBytes"
          },
          "recipient" : {
            "$ref" : "#/components/schemas/net.corda.core.identity.Party"
          },
          "anonymous" : {
            "type" : "boolean"
          },
          "notary" : {
            "$ref" : "#/components/schemas/net.corda.core.identity.Party"
          }
        }
      },
      "generated.net.corda.finance.flows.CashIssueFlowPayload" : {
        "type" : "object",
        "properties" : {
          "amount" : {
            "$ref" : "#/components/schemas/AmountCurrency"
          },
          "issuerBankPartyRef" : {
            "$ref" : "#/components/schemas/net.corda.core.utilities.OpaqueBytes"
          },
          "notary" : {
            "$ref" : "#/components/schemas/net.corda.core.identity.Party"
          }
        }
      },
      "generated.net.corda.finance.flows.CashPaymentFlowPayload" : {
        "type" : "object",
        "properties" : {
          "amount" : {
            "$ref" : "#/components/schemas/AmountCurrency"
          },
          "recipient" : {
            "$ref" : "#/components/schemas/net.corda.core.identity.Party"
          },
          "anonymous" : {
            "type" : "boolean"
          },
          "issuerConstraint" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/net.corda.core.identity.Party"
            }
          },
          "notary" : {
            "$ref" : "#/components/schemas/net.corda.core.identity.Party"
          }
        }
      },
      "generated.net.corda.examples.obligation.flows.IssueObligation_InitiatorPayload": {
        "type" : "object",
        "properties" : {
          "amount" : {
            "$ref" : "#/components/schemas/AmountCurrency"
          },
          "lender": {
            "$ref" : "#/components/schemas/net.corda.core.identity.Party"
          },
          "anonymous" : {
            "type" : "boolean"
          }
        }
      },
      "generated.net.corda.examples.obligation.flows.SettleObligation_InitiatorPayload": {
        "type" : "object",
        "properties" : {
          "linearId": {
            "$ref": "#/components/schemas/net.corda.core.contracts.UniqueIdentifier"
          },
          "amount" : {
            "$ref" : "#/components/schemas/AmountCurrency"
          },
          "anonymous" : {
            "type" : "boolean"
          }
        }
      },
      "generated.net.corda.examples.obligation.flows.TransferObligation_InitiatorPayload": {
        "type" : "object",
        "properties" : {
          "linearId" : {
            "$ref" : "#/components/schemas/net.corda.core.contracts.UniqueIdentifier"
          },
          "newLender": {
            "$ref" : "#/components/schemas/net.corda.core.identity.Party"
          },
          "anonymous": {
            "type": "boolean"
          }
        }
      }
    }
  }
}